
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000190 l    d  .text	00000000 .text
08004f30 l    d  .rodata	00000000 .rodata
08015394 l    d  .init_array	00000000 .init_array
0801539c l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
2000085c l    d  .bss	00000000 .bss
20007694 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
08015bfc l    d  .parsetable	00000000 .parsetable
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
08003398 l       .text	00000000 LoopCopyDataInit
08003390 l       .text	00000000 CopyDataInit
080033ac l       .text	00000000 LoopFillZerobss
080033a6 l       .text	00000000 FillZerobss
080033be l       .text	00000000 LoopForever
080033d8 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08004f18 l     O .text	00000000 __EH_FRAME_BEGIN__
08000190 l     F .text	00000000 deregister_tm_clones
080001b0 l     F .text	00000000 register_tm_clones
080001d4 l     F .text	00000000 __do_global_dtors_aux
2000085c l       .bss	00000000 completed.6266
0801539c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001fc l     F .text	00000000 frame_dummy
20000860 l       .bss	00000000 object.6271
08015398 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 printf_stdarg.c
08000544 l     F .text	00000028 printchar
0800056c l     F .text	00000086 prints
080005f2 l     F .text	000000a6 printi
08000698 l     F .text	00000120 print
00000000 l    df *ABS*	00000000 parser.c
00000000 l    df *ABS*	00000000 dump.c
20000000 l     O .data	00000004 count.5242
2000087c l     O .bss	00000004 address.5241
00000000 l    df *ABS*	00000000 syscall.c
20000880 l     O .bss	00000004 heap_end.5843
00000000 l    df *ABS*	00000000 terminal.c
20000884 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
200009a8 l     O .bss	00000001 cfgidx.10117
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
00000000 l    df *ABS*	00000000 usbd_conf.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 queue.c
08002306 l     F .text	00000070 prvCopyDataToQueue
08002376 l     F .text	00000026 prvCopyDataFromQueue
0800239c l     F .text	00000076 prvNotifyQueueSetContainer
08002412 l     F .text	00000078 prvUnlockQueue
00000000 l    df *ABS*	00000000 tasks.c
08002840 l     F .text	000000f4 prvAddNewTaskToReadyList
08002934 l     F .text	00000024 prvResetNextTaskUnblockTime
08002958 l     F .text	0000008e prvInitialiseNewTask.isra.3
080029e8 l     F .text	00000078 prvAddCurrentTaskToDelayedList
08002a60 l     F .text	00000012 xTaskCreateStatic.part.6
200009ac l     O .bss	00000004 xNextTaskUnblockTime
200009b0 l     O .bss	00000004 pxDelayedTaskList
200009b4 l     O .bss	00000004 xSchedulerRunning
200009b8 l     O .bss	00000014 xTasksWaitingTermination
200009cc l     O .bss	00000014 xSuspendedTaskList
200009e0 l     O .bss	00000004 uxPendedTicks
200009e4 l     O .bss	00000064 pxReadyTasksLists
20000a48 l     O .bss	00000004 uxSchedulerSuspended
20000a50 l     O .bss	00000014 xPendingReadyList
20000a64 l     O .bss	00000004 xNumOfOverflows
20000a68 l     O .bss	00000004 xTickCount
20000a6c l     O .bss	00000004 pxOverflowDelayedTaskList
20000a70 l     O .bss	00000004 uxTaskNumber
20000a74 l     O .bss	00000014 xDelayedTaskList1
20000a88 l     O .bss	00000014 xDelayedTaskList2
20000a9c l     O .bss	00000004 uxCurrentNumberOfTasks
20000aa0 l     O .bss	00000004 uxTopReadyPriority
20000aa4 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 port.c
0800301c l     F .text	00000030 prvTaskExitError
080030a0 l       .text	00000000 pxCurrentTCBConst2
08003170 l       .text	00000000 pxCurrentTCBConst
20000018 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 heap_4.c
080031a0 l     F .text	00000048 prvInsertBlockIntoFreeList
20000aa8 l     O .bss	00000004 xFreeBytesRemaining
20000aac l     O .bss	00000004 pxEnd
20000ab0 l     O .bss	00000008 xStart
20000ab8 l     O .bss	00006800 ucHeap
200072b8 l     O .bss	00000004 xBlockAllocatedBit
200072bc l     O .bss	00000004 xMinimumEverFreeBytesRemaining
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0800388c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08003a2c l     F .text	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000020 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
080153a0 l       .fini_array	00000000 __fini_array_end
2000085c l       .bss	00000000 __bss_start__
00000000 l       *UND*	00000000 vApplicationGetTimerTaskMemory
08015bfc l       .parsetable	00000000 _parsetable_start
20007694 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 HAL_DMA_Abort
00000000 l       *UND*	00000000 software_init_hook
0801539c l       .fini_array	00000000 __fini_array_start
0801539c l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
08015394 l       .init_array	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
08015394 l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 _exit
08015394 l       .init_array	00000000 __preinit_array_start
080033d8  w    F .text	00000002 RTC_Alarm_IRQHandler
08010338 g     O .rodata	00000010 RTC_BKP19R_fields
080064ac g     O .rodata	00000058 TIM2_SR_fields
0800d9c0 g     O .rodata	00000108 CAN_F10R1_fields
080111b8 g     O .rodata	00000010 TIM16_DMAR_fields
0800350c g     F .text	00000014 putchar
080033d8  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
0800ff28 g     O .rodata	00000010 I2C1_RXDR_fields
080033d8  w    F .text	00000002 TIM8_CC_IRQHandler
08010508 g     O .rodata	00000038 TIM6_CR1_fields
080060e8 g     O .rodata	00000050 I2C1_ICR_fields
08000968 g     F .text	00000004 _isatty_r
080101f8 g     O .rodata	00000010 TIM2_PSC_fields
08006d04 g     O .rodata	00000030 TIM17_CCMR1_Output_fields
08010798 g     O .rodata	00000058 COMP_COMP5_CSR_fields
0800c244 g     O .rodata	00000010 I2C1_TXDR_fields
08003520 g     F .text	00000064 _puts_r
080082fc g     O .rodata	00000108 CAN_F19R1_fields
08000b88 g     F .text	0000003c DecodeWriteRegister
08001aee g     F .text	000000c8 HAL_PCD_EP_ClrStall
0800d614 g     O .rodata	00000010 TIM16_CCR1_fields
080033d8  w    F .text	00000002 DebugMon_Handler
0800096c g     F .text	00000004 _lseek_r
0800ca74 g     O .rodata	00000028 FPU_MVFR1_fields
080021e4 g     F .text	0000001a HAL_PCD_ResetCallback
08001bb6 g     F .text	0000002e PCD_WritePMA
08011468 g     O .rodata	00000108 CAN_F22R1_fields
080066ec g     O .rodata	000000e8 CAN_FA1R_fields
200072f4 g     O .bss	00000224 hUSBDDevice
0800850c g     O .rodata	00000050 TIM2_SMCR_fields
08006cac g     O .rodata	00000028 NVIC_IPR1_fields
0800c744 g     O .rodata	00000108 CAN_F14R1_fields
0800d9b0 g     O .rodata	00000010 TIM8_PSC_fields
0800ba44 g     O .rodata	00000038 TIM15_EGR_fields
08000970 g     F .text	00000054 CmdStats
0800e3f4 g     O .rodata	000000fc TIM2_registers
0800fbdc g     O .rodata	00000060 TIM15_DIER_fields
08007580 g     O .rodata	00000010 DMA1_CMAR3_fields
08007d94 g     O .rodata	00000108 GPIOA_BSRR_fields
08014e38 g     O .rodata	00000068 DMA1_CCR7_fields
0800cbf4 g     O .rodata	00000010 TSC_IOG6CR_fields
080030e8 g     F .text	00000028 vPortExitCritical
08007590 g     O .rodata	00000030 ADC1_SQR1_fields
08007450 g     O .rodata	000000e8 CAN_FS1R_fields
0800d54c g     O .rodata	00000038 TIM1_CCMR2_Input_fields
08005ca8 g     O .rodata	00000018 RTC_SHIFTR_fields
080007b8 g     F .text	0000001c printf
08010390 g     O .rodata	00000030 CAN_TI1R_fields
08001c06 g     F .text	00000016 USBD_SetClassConfig
0800d16c g     O .rodata	00000028 NVIC_IPR14_fields
080033d8  w    F .text	00000002 TIM1_CC_IRQHandler
08008ae4 g     O .rodata	00000150 ADC1_registers
080021cc g     F .text	00000010 HAL_PCD_DataInStageCallback
08010348 g     O .rodata	00000020 TIM2_CR2_fields
0800d09c g     O .rodata	00000010 Flash_WRPR_fields
08004c20 g     F .text	00000020 __sseek
08003b1c g     F .text	0000000a __sinit
0800804c g     O .rodata	00000068 DMA1_CCR2_fields
08004c48 g     F .text	000000a8 __swbuf_r
080033d8  w    F .text	00000002 HardFault_Handler
080068ac g     O .rodata	00000108 TSC_IOHCR_fields
0800c0f4 g     O .rodata	00000028 CRC_CR_fields
0800688c g     O .rodata	00000010 NVIC_ISER0_fields
0800477c g     F .text	00000002 __malloc_unlock
0800ef08 g     O .rodata	00000010 TIM15_ARR_fields
08010df8 g     O .rodata	00000010 RTC_BKP24R_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
0800c64c g     O .rodata	00000010 TIM1_CCR3_fields
08014eb8 g     O .rodata	00000010 TIM1_DMAR_fields
08007d0c g     O .rodata	00000010 TIM15_CCR1_fields
080033d8  w    F .text	00000002 USB_HP_IRQHandler
080101d0 g     O .rodata	00000018 USART1_RTOR_fields
0800a718 g     O .rodata	00000078 RCC_AHBENR_fields
0800dec4 g     O .rodata	00000020 TIM2_CNT_fields
0800edf0 g     O .rodata	00000090 I2C1_registers
08003174 g     F .text	0000002c SysTick_Handler
0800afc8 g     O .rodata	00000010 RTC_WPR_fields
08010e88 g     O .rodata	00000010 RTC_SSR_fields
0800c94c g     O .rodata	00000010 TSC_IOG2CR_fields
080033d8  w    F .text	00000002 PVD_IRQHandler
0800689c g     O .rodata	00000010 DMA1_CPAR7_fields
0800dee4 g     O .rodata	00000018 TIM6_CNT_fields
0800ed38 g     O .rodata	00000080 TIM1_DIER_fields
080021dc g     F .text	00000008 HAL_PCD_SOFCallback
0800bad4 g     O .rodata	00000010 NVIC_ICPR0_fields
080046b0 g     F .text	000000c6 memmove
080033d8  w    F .text	00000002 TAMP_STAMP_IRQHandler
08010c60 g     O .rodata	00000028 NVIC_IPR2_fields
080153a0 g       *ABS*	00000000 _sidata
08003110 g     F .text	00000064 PendSV_Handler
0800f28c g     O .rodata	00000010 NVIC_ICPR1_fields
080033d8  w    F .text	00000002 NMI_Handler
08015394 g       .init_array	00000000 __exidx_end
08003644 g     F .text	00000064 __strtok_r
080033d8  w    F .text	00000002 EXTI3_IRQHandler
08014b60 g     O .rodata	00000010 DMA1_CNDTR5_fields
0800aaa0 g     O .rodata	000000a0 TIM8_CCER_fields
0800b328 g     O .rodata	00000108 CAN_F8R2_fields
08015c44 g       .parsetable	00000000 _parsetable_end
0800fa44 g     O .rodata	00000050 RCC_AHBRSTR_fields
080033e8 g     F .text	0000000c __errno
080067d4 g     O .rodata	00000010 RTC_BKP6R_fields
08006df8 g     O .rodata	00000030 CAN_TI2R_fields
08001e08 g     F .text	00000218 USBD_StdDevReq
0800f080 g     O .rodata	00000010 NVIC_ISER2_fields
08015c2c g     O .parsetable	0000000c CmdWE
08009e58 g     O .rodata	00000028 CAN_RDH0R_fields
20000a4c g     O .bss	00000004 pxCurrentTCB
0800c5f4 g     O .rodata	00000028 FPU_FPDSCR_fields
080081e4 g     O .rodata	00000108 CAN_F0R2_fields
08005bf0 g     O .rodata	00000010 TSC_IOG8CR_fields
08002232 g     F .text	00000026 USBD_LL_IsStallEP
08010690 g     O .rodata	00000108 CAN_F0R1_fields
0800b430 g     O .rodata	00000028 TIM15_SMCR_fields
0800095e g     F .text	0000000a _fstat_r
0800f3dc g     O .rodata	00000050 TIM8_CR1_fields
0800d374 g     O .rodata	00000010 Flash_AR_fields
0800949c g     O .rodata	00000108 CAN_F2R1_fields
0800c2cc g     O .rodata	00000060 COMP_COMP4_CSR_fields
08007968 g     O .rodata	00000048 GPIOB_AFRH_fields
08004f30 g       .text	00000000 _etext
0800c284 g     O .rodata	00000018 EXTI_PR2_fields
0800d1ac g     O .rodata	00000030 USB_FS_FNR_fields
2000085c g       .bss	00000000 _sbss
0800c014 g     O .rodata	00000060 COMP_registers
0800f29c g     O .rodata	00000108 CAN_F4R2_fields
0800ba34 g     O .rodata	00000010 DMA1_CMAR1_fields
08009220 g     O .rodata	00000068 TIM2_DIER_fields
0800a078 g     O .rodata	00000010 TSC_IOG1CR_fields
08011170 g     O .rodata	00000028 TIM17_CCER_fields
08010f68 g     O .rodata	00000010 TIM8_RCR_fields
0800d79c g     O .rodata	00000018 TIM16_CNT_fields
08009018 g     O .rodata	00000108 GPIOB_BSRR_fields
0800a538 g     O .rodata	00000108 CAN_F16R2_fields
08007fdc g     O .rodata	00000020 ADC1_OFR1_fields
0800fc3c g     O .rodata	00000108 CAN_F24R2_fields
080097ec g     O .rodata	00000010 RTC_BKP23R_fields
0800ce14 g     O .rodata	00000010 TIM15_CCR2_fields
08007168 g     O .rodata	000000a0 ADC1_CFGR_fields
08006c14 g     O .rodata	00000010 RTC_BKP13R_fields
0800a7a0 g     O .rodata	00000108 CAN_F20R1_fields
0800a640 g     O .rodata	00000068 USART1_ICR_fields
0801517c g     O .rodata	00000108 CAN_F25R2_fields
08011198 g     O .rodata	00000010 TSC_IOG4CR_fields
0800a8a8 g     O .rodata	00000108 CAN_F27R2_fields
080150ec g     O .rodata	00000080 TIM8_SR_fields
08006090 g     O .rodata	00000058 USB_FS_ISTR_fields
0800eed8 g     O .rodata	00000010 DMA1_CMAR2_fields
08007b88 g     O .rodata	00000010 RTC_BKP26R_fields
0800baa4 g     O .rodata	00000030 ADC1_SQR2_fields
0800afd8 g     O .rodata	00000018 TIM17_CNT_fields
08007a38 g     O .rodata	00000010 WWDG_SR_fields
080093a8 g     O .rodata	0000009c EXTI_registers
08001daa g     F .text	00000006 USBD_LL_SetSpeed
080097cc g     O .rodata	00000010 NVIC_ICTR_fields
08006abc g     O .rodata	00000010 TIM6_ARR_fields
08009e90 g     O .rodata	000000b8 CAN_TSR_fields
0800081c g     F .text	000000b4 DumpBuffer
0800b2a0 g     O .rodata	00000088 GPIOA_IDR_fields
08005b10 g     O .rodata	00000058 USB_FS_USB_EP3R_fields
08002200 g     F .text	00000002 HAL_PCD_ResumeCallback
08000234 g     F .text	00000134 memcpy
08002d8c g     F .text	00000034 vTaskPlaceOnEventList
08010208 g     O .rodata	00000108 CAN_F7R2_fields
0800fdf4 g     O .rodata	00000018 TIM1_CNT_fields
2000085c g     O .data	00000000 .hidden __TMC_END__
0800963c g     O .rodata	00000080 TIM1_SR_fields
080080b4 g     O .rodata	00000028 NVIC_IPR13_fields
08006cd4 g     O .rodata	00000010 TIM15_PSC_fields
08002050 g     F .text	000000b2 USBD_StdEPReq
08003a20 g     F .text	0000000c _cleanup_r
0800db80 g     O .rodata	00000048 GPIOA_AFRH_fields
0800f0d8 g     O .rodata	00000018 DAC_DHR12RD_fields
0800f47c g     O .rodata	00000060 COMP_COMP2_CSR_fields
0800f0f0 g     O .rodata	00000080 TIM8_DIER_fields
08014ea0 g     O .rodata	00000018 ADC1_DIFSEL_fields
080033d8  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
080033d8  w    F .text	00000002 EXTI0_IRQHandler
08010880 g     O .rodata	00000018 TIM8_OR_fields
080033d8  w    F .text	00000002 I2C2_EV_IRQHandler
08006db8 g     O .rodata	00000028 CAN_TDH0R_fields
080095b4 g     O .rodata	00000058 USB_FS_USB_EP4R_fields
0800c254 g     O .rodata	00000030 WWDG_registers
08005e70 g     O .rodata	00000010 TIM17_RCR_fields
08003584 g     F .text	00000010 puts
08003318 g     F .text	00000070 vPortFree
08002142 g     F .text	00000016 USBD_CtlSendStatus
080033d8  w    F .text	00000002 FPU_IRQHandler
08002020 g     F .text	00000030 USBD_StdItfReq
080095a4 g     O .rodata	00000010 TIM8_CCR4_fields
20000014 g     O .data	00000004 SystemCoreClock
0800fe0c g     O .rodata	000000e4 TIM15_registers
08001424 g     F .text	00000182 HAL_PCD_EP_Transmit
0800c4ec g     O .rodata	00000108 CAN_F3R1_fields
08001dc8 g     F .text	00000028 USBD_ParseSetupRequest
0800d4e4 g     O .rodata	00000018 TIM2_CCR1_fields
0800a360 g     O .rodata	00000018 DAC_SWTRIGR_fields
080033d8  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
08008eb8 g     O .rodata	00000108 CAN_F13R1_fields
080040e8 g     F .text	00000010 malloc
0800b80c g     O .rodata	00000010 IWDG_RLR_fields
08001be4 g     F .text	00000022 PCD_ReadPMA
08010e48 g     O .rodata	00000018 CAN_FMR_fields
08014f30 g     O .rodata	0000003c OPAMP_registers
0800ec68 g     O .rodata	00000010 DMA1_CNDTR4_fields
080105f0 g     O .rodata	00000010 NVIC_IABR1_fields
080104c8 g     O .rodata	00000030 ADC1_2_registers
20000878 g     O .bss	00000004 xSemaphore
0800ff78 g     O .rodata	000000d8 EXTI_PR1_fields
080033d8  w    F .text	00000002 UsageFault_Handler
0800e798 g     O .rodata	00000028 TIM8_CCR5_fields
0800229e g     F .text	00000018 vListInsertEnd
080033d8  w    F .text	00000002 ADC1_2_IRQHandler
200072c8 g     O .bss	00000004 __malloc_top_pad
0800f4dc g     O .rodata	00000108 CAN_F4R1_fields
0800d194 g     O .rodata	00000018 ADC1_TR3_fields
080096bc g     O .rodata	00000010 DMA1_CPAR2_fields
08007a48 g     O .rodata	00000050 TIM16_DIER_fields
0800c224 g     O .rodata	00000010 NVIC_ICER2_fields
080037d0 g     F .text	00000018 strtoul
08007a28 g     O .rodata	00000010 TIM8_CCR1_fields
08010a48 g     O .rodata	00000108 CAN_F9R2_fields
0800e3e4 g     O .rodata	00000010 DAC_DHR12L2_fields
08003d7c g     F .text	00000318 __sfvwrite_r
08001db0 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
080033d8  w    F .text	00000002 SPI1_IRQHandler
08000368 g     F .text	00000044 vTask1
0800c65c g     O .rodata	00000030 CAN_TI0R_fields
080033d8  w    F .text	00000002 CAN_SCE_IRQHandler
08010bb8 g     O .rodata	00000050 ADC1_SMPR2_fields
0800d6ac g     O .rodata	00000028 NVIC_IPR4_fields
08000924 g     F .text	00000034 _sbrk_r
08006bec g     O .rodata	00000028 NVIC_IPR18_fields
0800e610 g     O .rodata	00000018 TIM6_DIER_fields
080077b8 g     O .rodata	00000068 TIM1_CCMR1_Output_fields
08014a30 g     O .rodata	000000b8 USART1_ISR_fields
080033d8  w    F .text	00000002 TIM6_DAC_IRQHandler
080085dc g     O .rodata	00000070 I2C1_CR2_fields
0800c93c g     O .rodata	00000010 TIM8_CCR2_fields
08001a4c g     F .text	000000a2 HAL_PCD_EP_SetStall
08000a10 g     F .text	0000000a _read_r
08002298 g     F .text	00000006 vListInitialiseItem
08005c58 g     O .rodata	00000050 TIM1_SMCR_fields
0800cb54 g     O .rodata	00000038 CAN_ESR_fields
0800f604 g     O .rodata	00000088 GPIOB_BRR_fields
2000751c g     O .bss	00000178 hpcd
08004db4 g     F .text	00000084 _fclose_r
0800d624 g     O .rodata	00000020 ADC1_OFR2_fields
08006d34 g     O .rodata	00000018 TIM2_ARR_fields
200072c4 g     O .bss	00000004 __malloc_max_sbrked_mem
08011210 g     O .rodata	00000108 CAN_F9R1_fields
0800d384 g     O .rodata	00000040 RTC_DR_fields
0800fd5c g     O .rodata	00000010 TIM1_CCR1_fields
0800eb50 g     O .rodata	00000010 Flash_OPTKEYR_fields
08009c58 g     O .rodata	00000020 ADC1_OFR4_fields
20007518 g     O .bss	00000004 USBDDataIn
080033d8  w    F .text	00000002 TIM8_UP_IRQHandler
0800a1a0 g     O .rodata	00000108 CAN_F25R1_fields
08010fa8 g     O .rodata	00000020 SPI1_I2SPR_fields
0800e6a0 g     O .rodata	00000010 ADC1_JDR1_fields
0800f27c g     O .rodata	00000010 IWDG_KR_fields
08010540 g     O .rodata	00000058 USB_FS_USB_EP0R_fields
0800c95c g     O .rodata	00000108 CAN_F23R2_fields
0800c6bc g     O .rodata	00000048 CRC_registers
08008e10 g     O .rodata	000000a8 USART1_CR1_fields
0800982c g     O .rodata	00000264 RTC_registers
08009f70 g     O .rodata	00000108 CAN_F5R2_fields
08008c34 g     O .rodata	00000030 TIM17_CR2_fields
08015394 g       .init_array	00000000 __exidx_start
080084ec g     O .rodata	00000020 TIM16_CCMR1_Input_fields
080070d8 g     O .rodata	00000010 Flash_KEYR_fields
0800d024 g     O .rodata	00000068 TIM8_CCMR2_Output_fields
08007938 g     O .rodata	00000030 PWR_CSR_fields
0800fbc4 g     O .rodata	00000018 RTC_ALRMASSR_fields
08010310 g     O .rodata	00000028 SYSCFG_EXTICR4_fields
08009138 g     O .rodata	00000010 NVIC_IABR0_fields
080003f0 g     F .text	00000078 SystemCoreClockConfigure
0801538c g     O .rodata	00000004 _global_impure_ptr
080092e8 g     O .rodata	00000048 FPU_MVFR0_fields
0800edc8 g     O .rodata	00000010 TIM16_RCR_fields
080047d8 g     F .text	000003ec _realloc_r
08003420 g     F .text	00000050 __libc_init_array
08002130 g     F .text	00000012 USBD_CtlContinueRx
080101e8 g     O .rodata	00000010 RTC_BKP12R_fields
080065bc g     O .rodata	00000018 USART1_GTPR_fields
08000ff8 g     F .text	00000338 HAL_PCD_EP_Open
080033d8  w    F .text	00000002 DMA2_Channel2_IRQHandler
080033d8  w    F .text	00000002 DMA1_Channel4_IRQHandler
08007830 g     O .rodata	00000018 TIM1_OR_fields
08005b68 g     O .rodata	00000088 GPIOB_PUPDR_fields
080015a6 g     F .text	000004a6 HAL_PCD_IRQHandler
08000524 g     F .text	00000020 CmdR
08010e98 g     O .rodata	00000010 TIM1_CCR4_fields
0800b9fc g     O .rodata	00000028 CAN_TDL1R_fields
080031e8 g     F .text	00000130 pvPortMalloc
0800f454 g     O .rodata	00000028 NVIC_IPR7_fields
0800ff38 g     O .rodata	00000010 TIM17_DMAR_fields
0800e5f8 g     O .rodata	00000018 TIM15_CNT_fields
080087a4 g     O .rodata	00000010 RTC_BKP10R_fields
08009288 g     O .rodata	00000050 CAN_MSR_fields
0800d23c g     O .rodata	000000a8 RCC_registers
08004f18 g     F .text	00000000 _init
08009f48 g     O .rodata	00000028 CAN_TDL0R_fields
0800c61c g     O .rodata	00000010 DAC_DHR8R2_fields
0800dbc8 g     O .rodata	00000098 RCC_APB1RSTR_fields
08002282 g     F .text	00000016 vListInitialise
080082ec g     O .rodata	00000010 RTC_BKP0R_fields
0800df74 g     O .rodata	00000438 CAN_registers
08009dc8 g     O .rodata	00000068 DMA1_CCR5_fields
0800948c g     O .rodata	00000010 RTC_BKP8R_fields
08008a0c g     O .rodata	000000d8 TSC_registers
0800c32c g     O .rodata	00000038 TIM2_CCMR2_Input_fields
08002216 g     F .text	0000000e USBD_LL_StallEP
08007408 g     O .rodata	00000010 NVIC_ICER1_fields
0800ff48 g     O .rodata	00000030 TIM16_EGR_fields
08015c14 g     O .parsetable	0000000c CmdRE
0800e4f0 g     O .rodata	00000108 CAN_F8R1_fields
080033d8  w    F .text	00000002 USART3_IRQHandler
0800b8cc g     O .rodata	00000108 CAN_F21R1_fields
08002560 g     F .text	0000016c xQueueGenericSend
08008fc0 g     O .rodata	00000058 RCC_CSR_fields
0800be3c g     O .rodata	00000088 GPIOA_OTYPER_fields
080111c8 g     O .rodata	00000018 DAC_DHR12LD_fields
08007e9c g     O .rodata	00000038 TIM16_SR_fields
0800dc60 g     O .rodata	00000144 TIM1_registers
080033f4 g     F .text	0000002c __libc_fini_array
08010840 g     O .rodata	00000040 ADC1_JSQR_fields
20007694 g       .bss	00000000 _ebss
0800c38c g     O .rodata	00000058 FPU_CPACR_fields
080033d8  w    F .text	00000002 DMA1_Channel7_IRQHandler
0800c864 g     O .rodata	00000028 CAN_TDL2R_fields
08007538 g     O .rodata	00000048 GPIOA_AFRL_fields
08003388  w    F .text	00000038 Reset_Handler
08014cf0 g     O .rodata	00000010 RTC_BKP29R_fields
080072c0 g     O .rodata	00000028 NVIC_IPR0_fields
0800bb14 g     O .rodata	00000088 GPIOA_ODR_fields
080096cc g     O .rodata	00000028 NVIC_IPR15_fields
08007820 g     O .rodata	00000010 TIM1_CCR2_fields
08008c98 g     O .rodata	000000d8 EXTI_RTSR1_fields
08009db8 g     O .rodata	00000010 DAC_DOR2_fields
0800ba24 g     O .rodata	00000010 CRC_DR_fields
08007320 g     O .rodata	00000088 GPIOB_OSPEEDR_fields
08002f80 g     F .text	00000084 xTaskPriorityDisinherit
080033d8  w    F .text	00000002 UART5_IRQHandler
08000c50 g     F .text	0000003c DecodePeripheral
0800ff00 g     O .rodata	00000028 SYSCFG_EXTICR1_fields
08005f88 g     O .rodata	00000108 CAN_F11R2_fields
080033d8  w    F .text	00000002 ADC3_IRQHandler
0800b81c g     O .rodata	00000040 RTC_TSTR_fields
0800cb04 g     O .rodata	00000050 TIM2_CR1_fields
0800b4e8 g     O .rodata	00000108 CAN_F1R2_fields
08004780 g     F .text	00000058 _putc_r
0800b078 g     O .rodata	00000010 RTC_BKP17R_fields
08002dc0 g     F .text	00000084 xTaskRemoveFromEventList
08000500 g     F .text	00000002 vApplicationMallocFailedHook
0800dda4 g     O .rodata	00000028 CAN_RDL1R_fields
080087c4 g     O .rodata	00000108 CAN_F23R1_fields
080033d8  w    F .text	00000002 TIM4_IRQHandler
08009ca0 g     O .rodata	00000108 CAN_F18R1_fields
08010ea8 g     O .rodata	000000a8 USB_FS_registers
08000504 g     F .text	00000002 vApplicationTickHook
08011160 g     O .rodata	00000010 TIM8_CCR3_fields
0800eb60 g     O .rodata	00000108 CAN_F13R2_fields
0800d2e4 g     O .rodata	00000038 TIM2_CCMR1_Input_fields
0801516c g     O .rodata	00000010 DAC_DHR12R1_fields
08011428 g     O .rodata	00000030 I2C1_OAR1_fields
08007428 g     O .rodata	00000028 CAN_RF0R_fields
080033d8  w    F .text	00000002 CAN_RX1_IRQHandler
080033d8  w    F .text	00000002 DMA2_Channel1_IRQHandler
08007418 g     O .rodata	00000010 RTC_BKP7R_fields
0800bec4 g     O .rodata	00000018 ADC1_TR1_fields
08010de8 g     O .rodata	00000010 DMA1_CNDTR7_fields
0800217e g     F .text	0000002e USBD_CDC_TransmitPacket
08009da8 g     O .rodata	00000010 TSC_IOG5CR_fields
0800a708 g     O .rodata	00000010 DAC_DHR12R2_fields
0800c63c g     O .rodata	00000010 RTC_BKP18R_fields
080087b4 g     O .rodata	00000010 DMA1_CMAR6_fields
0800a6d0 g     O .rodata	00000038 TIM15_CCMR1_Input_fields
00000000  w      *UND*	00000000 __deregister_frame_info
08002158 g     F .text	00000016 USBD_CtlReceiveStatus
08009bb8 g     O .rodata	00000018 TIM2_CCR4_fields
20007694 g       ._user_heap_stack	00000000 end
08009330 g     O .rodata	00000078 SPI1_CR1_fields
080033d8  w    F .text	00000002 I2C1_EV_IRQHandler
0800defc g     O .rodata	00000078 SPI1_registers
08002202 g     F .text	00000014 USBD_LL_OpenEP
0800d644 g     O .rodata	00000018 TIM8_DCR_fields
08000cd0 g     F .text	00000048 DecodePrintRegisters
0800bd44 g     O .rodata	00000070 USB_FS_USB_CNTR_fields
0800a2d0 g     O .rodata	00000090 USART1_registers
08007848 g     O .rodata	00000010 USART1_TDR_fields
0800dad8 g     O .rodata	00000080 RCC_APB1ENR_fields
08011458 g     O .rodata	00000010 DMA1_CNDTR2_fields
0800f170 g     O .rodata	00000078 CAN_IER_fields
08010600 g     O .rodata	00000068 DMA1_CCR1_fields
08010a38 g     O .rodata	00000010 NVIC_ICER0_fields
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
0800b8a4 g     O .rodata	00000010 NVIC_ISER1_fields
08001ce4 g     F .text	00000088 USBD_LL_DataInStage
08014ce0 g     O .rodata	00000010 RTC_BKP31R_fields
0800bcf4 g     O .rodata	00000050 TIM1_EGR_fields
0800fd8c g     O .rodata	00000068 TIM2_CCMR1_Output_fields
0800ef18 g     O .rodata	00000018 DAC_SR_fields
0800cee4 g     O .rodata	00000018 TIM2_CCR2_fields
08003004 g     F .text	00000018 pvTaskIncrementMutexHeldCount
0800f3cc g     O .rodata	00000010 RTC_BKP3R_fields
080033d8  w    F .text	00000002 DMA1_Channel6_IRQHandler
08001df0 g     F .text	00000016 USBD_CtlError
08001c1c g     F .text	0000000e USBD_ClrClassConfig
08014ae8 g     O .rodata	00000010 RTC_BKP5R_fields
080033d8  w    F .text	00000002 UART4_IRQHandler
080033d8  w    F .text	00000002 DMA2_Channel4_IRQHandler
08003b28 g     F .text	00000002 __sfp_lock_acquire
0800461c g     F .text	00000092 memchr
08002e70 g     F .text	00000074 xTaskCheckForTimeOut
08003bcc g     F .text	000001b0 _free_r
080033d8  w    F .text	00000002 TIM3_IRQHandler
080033d8  w    F .text	00000002 RCC_IRQHandler
08006484 g     O .rodata	00000028 RTC_CALR_fields
080092d8 g     O .rodata	00000010 DAC_DHR12L1_fields
08006584 g     O .rodata	00000038 TIM17_SR_fields
00000200 g       *ABS*	00000000 _Min_Heap_Size
0800bc24 g     O .rodata	00000088 GPIOB_OTYPER_fields
080033d8  w    F .text	00000002 DMA1_Channel1_IRQHandler
080100d8 g     O .rodata	00000010 RTC_BKP9R_fields
08010fc8 g     O .rodata	00000108 CAN_F14R2_fields
080021ba g     F .text	00000012 HAL_PCD_DataOutStageCallback
080033d8 g       .text	00000002 Default_Handler
20000858 g     O .data	00000004 __malloc_sbrk_base
0800d584 g     O .rodata	00000090 GPIOA_LCKR_fields
0800a490 g     O .rodata	00000098 RTC_TAFCR_fields
08002ad4 g     F .text	00000010 vTaskSuspendAll
20000004 g     O .data	00000010 AHBPrescTable
080110d0 g     O .rodata	00000090 GPIOA_registers
08009b98 g     O .rodata	00000010 NVIC_ISPR2_fields
080033d8  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
0800e638 g     O .rodata	00000068 TIM2_CCMR2_Output_fields
08007718 g     O .rodata	00000090 GPIOB_LCKR_fields
080070e8 g     O .rodata	00000080 TIM8_CR2_fields
08006c24 g     O .rodata	00000038 CAN_BTR_fields
08014af8 g     O .rodata	00000068 DMA1_CCR4_fields
08007ce4 g     O .rodata	00000028 NVIC_IPR10_fields
0800a528 g     O .rodata	00000010 TIM17_ARR_fields
0800a378 g     O .rodata	00000108 CAN_F12R2_fields
0800e918 g     O .rodata	00000030 USART1_RQR_fields
0800d1ec g     O .rodata	00000050 TIM17_DIER_fields
08005df8 g     O .rodata	00000010 RTC_BKP22R_fields
0800e948 g     O .rodata	00000028 CAN_TDH2R_fields
0800c08c g     O .rodata	00000010 TIM1_RCR_fields
08002224 g     F .text	0000000e USBD_LL_ClearStallEP
080022e6 g     F .text	00000020 uxListRemove
080150c4 g     O .rodata	00000028 NVIC_IPR5_fields
08007b98 g     O .rodata	00000060 Flash_OBR_fields
080033d8  w    F .text	00000002 EXTI15_10_IRQHandler
0800855c g     O .rodata	00000020 CAN_TDT1R_fields
0800cc4c g     O .rodata	00000040 RTC_TR_fields
0800d774 g     O .rodata	00000028 NVIC_IPR17_fields
080037e8 g     F .text	000000a4 __register_exitproc
08007b28 g     O .rodata	00000060 Flash_CR_fields
0800975c g     O .rodata	00000060 SPI1_SR_fields
08009444 g     O .rodata	00000048 USB_FS_DADDR_fields
08009e40 g     O .rodata	00000018 EXTI_SWIER2_fields
08000fcc g     F .text	0000002c HAL_PCD_SetAddress
0800ba7c g     O .rodata	00000028 NVIC_IPR19_fields
0800a9b0 g     O .rodata	00000010 TIM6_SR_fields
080065e4 g     O .rodata	00000108 CAN_F1R1_fields
0800eae0 g     O .rodata	00000060 DES_registers
0800f5f4 g     O .rodata	00000010 TIM17_PSC_fields
08006504 g     O .rodata	00000028 SYSCFG_EXTICR2_fields
0800aec0 g     O .rodata	00000010 SPI1_CRCPR_fields
08002f10 g     F .text	00000070 vTaskPriorityInherit
08010b50 g     O .rodata	00000018 ADC1_TR2_fields
200072cc g     O .bss	00000028 __malloc_current_mallinfo
0800c6ac g     O .rodata	00000010 RTC_TSSSR_fields
0800a190 g     O .rodata	00000010 TIM6_CR2_fields
0800ece0 g     O .rodata	00000058 RCC_CR_fields
0800bedc g     O .rodata	000000e8 CAN_FM1R_fields
0800ca64 g     O .rodata	00000010 TIM1_CCR6_fields
0800d6d4 g     O .rodata	000000a0 USART1_CR2_fields
0800e808 g     O .rodata	00000068 TIM1_BDTR_fields
08003594 g     F .text	00000044 strcasecmp
08002ce8 g     F .text	000000a4 vTaskSwitchContext
08006334 g     O .rodata	00000010 IWDG_WINR_fields
0800bfc4 g     O .rodata	00000050 ADC1_SMPR1_fields
080097fc g     O .rodata	00000020 I2C1_OAR2_fields
08010898 g     O .rodata	00000108 CAN_F26R1_fields
080036a8 g     F .text	00000128 _strtoul_r
0800d08c g     O .rodata	00000010 CRC_POL_fields
08014d00 g     O .rodata	00000010 DMA1_CMAR4_fields
080033d8  w    F .text	00000002 TIM7_IRQHandler
080021fe g     F .text	00000002 HAL_PCD_SuspendCallback
0800e980 g     O .rodata	00000010 DMA1_CPAR3_fields
0800a790 g     O .rodata	00000010 RTC_BKP14R_fields
08000958 g     F .text	00000006 _close_r
08005a48 g     O .rodata	00000010 SPI1_DR_fields
080070a8 g     O .rodata	00000020 RCC_CFGR2_fields
08006bd4 g     O .rodata	00000018 TIM15_DCR_fields
08006ce4 g     O .rodata	00000020 Flash_ACR_fields
08014e18 g     O .rodata	00000010 CRC_IDR_fields
08009ba8 g     O .rodata	00000010 DMA1_CPAR5_fields
080103c0 g     O .rodata	00000108 CAN_F18R2_fields
0800e7c0 g     O .rodata	00000048 IWDG_registers
08003634 g     F .text	00000010 strtok
080076c8 g     O .rodata	00000010 IWDG_PR_fields
0800cdec g     O .rodata	00000028 NVIC_IPR11_fields
0800c09c g     O .rodata	00000058 COMP_COMP7_CSR_fields
0800644c g     O .rodata	00000028 CAN_RF1R_fields
08004cf0 g     F .text	000000c4 __swsetup_r
08008c88 g     O .rodata	00000010 TIM8_ARR_fields
08000502 g     F .text	00000002 vApplicationStackOverflowHook
080033d8  w    F .text	00000002 EXTI9_5_IRQHandler
080088f4 g     O .rodata	00000010 ADC1_DR_fields
080033d8  w    F .text	00000002 RTC_WKUP_IRQHandler
08014cc8 g     O .rodata	00000018 USART1_BRR_fields
08010598 g     O .rodata	00000058 TIM15_CCMR1_Output_fields
2000044c g     O .data	00000408 __malloc_av_
0800d444 g     O .rodata	00000090 SYSCFG_CFGR1_fields
080111f0 g     O .rodata	00000020 CAN_TDT0R_fields
080008d0 g     F .text	00000054 CmdDump
08004bc4 g     F .text	00000022 __sread
0800bae4 g     O .rodata	00000030 TIM16_CCMR1_Output_fields
0800eee8 g     O .rodata	00000020 WWDG_CFR_fields
0800f7a4 g     O .rodata	000002a0 Peripherals
08010050 g     O .rodata	00000088 GPIOB_ODR_fields
0800d0ac g     O .rodata	00000058 USB_FS_USB_EP5R_fields
0800a088 g     O .rodata	00000108 CAN_F11R1_fields
08004778 g     F .text	00000002 __malloc_lock
0800e970 g     O .rodata	00000010 NVIC_ISPR0_fields
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
080073a8 g     O .rodata	00000060 ADC1_ISR_fields
080079b0 g     O .rodata	00000050 FPU_FPCCR_fields
08010f50 g     O .rodata	00000018 TSC_ICR_fields
0800803c g     O .rodata	00000010 NVIC_IABR2_fields
080039f4 g     F .text	0000002c _fflush_r
08011570 g     O .rodata	00000088 GPIOA_PUPDR_fields
080033d8  w    F .text	00000002 SPI2_IRQHandler
0800f42c g     O .rodata	00000010 RTC_BKP21R_fields
08005dc8 g     O .rodata	00000030 RTC_TSDR_fields
08000b3c g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
0800ef98 g     O .rodata	00000050 RCC_CFGR3_fields
08003470 g     F .text	0000009a memset
080033d8  w    F .text	00000002 MemManage_Handler
08000468 g     F .text	00000098 main
0800e990 g     O .rodata	00000108 TSC_IOSCR_fields
080058d4 g     O .rodata	00000174 DMA1_registers
0800ce34 g     O .rodata	00000028 SYSCFG_EXTICR3_fields
200072c0 g     O .bss	00000004 __malloc_max_total_mem
080097bc g     O .rodata	00000010 ADC1_JDR3_fields
0800cddc g     O .rodata	00000010 SPI1_TXCRCR_fields
08015bfc g       *ABS*	00000000 _siccmram
080022b6 g     F .text	00000030 vListInsert
08014ed8 g     O .rodata	00000058 COMP_COMP3_CSR_fields
0800aa78 g     O .rodata	00000028 NVIC_IPR9_fields
0800ad04 g     O .rodata	0000003c DBGMCU_registers
0800f3a4 g     O .rodata	00000028 NVIC_IPR16_fields
08009a90 g     O .rodata	00000108 CAN_F2R2_fields
08003080 g     F .text	00000024 SVC_Handler
08004c40 g     F .text	00000008 __sclose
080033d8  w    F .text	00000002 DMA2_Channel5_IRQHandler
08008404 g     O .rodata	000000e8 DMA1_IFCR_fields
08007238 g     O .rodata	00000088 TSC_IOGCSR_fields
080111a8 g     O .rodata	00000010 DMA1_CPAR1_fields
08009120 g     O .rodata	00000018 DES_UID0_fields
080040f8 g     F .text	00000524 _malloc_r
0800cc04 g     O .rodata	00000048 GPIOB_AFRL_fields
08006e28 g     O .rodata	00000060 ADC1_IER_fields
080077a8 g     O .rodata	00000010 DAC_DHR8R1_fields
0800e3ac g     O .rodata	00000038 TIM1_CCMR1_Input_fields
08006fa0 g     O .rodata	00000108 TSC_IOASCR_fields
080088cc g     O .rodata	00000028 NVIC_IPR20_fields
08001d6c g     F .text	0000003e USBD_LL_Reset
0800ddcc g     O .rodata	00000020 CAN_RDT1R_fields
0800aff0 g     O .rodata	00000088 GPIOA_BRR_fields
0800f69c g     O .rodata	00000108 CAN_F20R2_fields
0800c074 g     O .rodata	00000018 TSC_ISR_fields
00000000  w      *UND*	00000000 __libc_fini
080033d8  w    F .text	00000002 DMA1_Channel5_IRQHandler
080033d8  w    F .text	00000002 USB_LP_IRQHandler
0800cd94 g     O .rodata	00000048 SPI1_I2SCFGR_fields
080075c0 g     O .rodata	00000108 CAN_F15R2_fields
080033d8  w    F .text	00000002 EXTI4_IRQHandler
0800ee80 g     O .rodata	00000058 USB_FS_USB_EP2R_fields
080061e8 g     O .rodata	00000010 TIM8_CCR6_fields
08001c84 g     F .text	00000060 USBD_LL_DataOutStage
0800a480 g     O .rodata	00000010 RTC_BKP4R_fields
0800250c g     F .text	00000052 xQueueGenericCreate
08003b30 g     F .text	0000009c _malloc_trim_r
0800fef0 g     O .rodata	00000010 TSC_IOG7CR_fields
08006474 g     O .rodata	00000010 RTC_BKP16R_fields
0800bcac g     O .rodata	00000030 DBGMCU_CR_fields
0800c68c g     O .rodata	00000020 CAN_RDT0R_fields
08007bf8 g     O .rodata	00000010 ADC1_AWD2CR_fields
080109a0 g     O .rodata	00000010 DMA1_CMAR5_fields
0800a2a8 g     O .rodata	00000028 CAN_RDL0R_fields
08011660 g     O .rodata	00000010 DMA1_CPAR4_fields
0800f1e8 g     O .rodata	0000006c TIM6_registers
0800c37c g     O .rodata	00000010 RTC_BKP11R_fields
08000efc g     F .text	00000068 SystemInit
0800d65c g     O .rodata	00000050 TIM16_BDTR_fields
0800bdc4 g     O .rodata	00000078 RTC_ALRMBR_fields
0800c84c g     O .rodata	00000018 TIM2_DCR_fields
08011608 g     O .rodata	00000058 ADC1_CR_fields
08004f24 g     F .text	00000000 _fini
08000506 g     F .text	0000001c CmdW
080033d8  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
0800ad40 g     O .rodata	00000028 EXTI_EMR2_fields
08002c04 g     F .text	000000e4 xTaskResumeAll
08002acc g     F .text	00000006 vTaskStartScheduler
08007310 g     O .rodata	00000010 RTC_WUTR_fields
0800ce24 g     O .rodata	00000010 DMA1_CPAR6_fields
08010830 g     O .rodata	00000010 CRC_INIT_fields
08006148 g     O .rodata	00000090 RTC_ISR_fields
08006de0 g     O .rodata	00000018 TIM1_DCR_fields
0800684c g     O .rodata	00000040 PWR_CR_fields
08009148 g     O .rodata	00000038 TIM2_EGR_fields
080033dc g     F .text	0000000c atexit
080109b0 g     O .rodata	00000088 OPAMP_OPAMP1_CR_fields
08007c08 g     O .rodata	00000054 FPU_registers
08006e98 g     O .rodata	00000108 EXTI_IMR1_fields
08000b04 g     F .text	00000038 _write_r
080078c0 g     O .rodata	00000018 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
08010e08 g     O .rodata	00000030 ADC1_SQR3_fields
080033d8  w    F .text	00000002 DMA1_Channel3_IRQHandler
080113a0 g     O .rodata	00000088 DBGMCU_APB1FZ_fields
0800ca9c g     O .rodata	00000068 SPI1_CR2_fields
08010e70 g     O .rodata	00000018 ADC1_CALFACT_fields
0800f5e4 g     O .rodata	00000010 RTC_BKP28R_fields
08007a98 g     O .rodata	00000028 TIM1_CCR5_fields
08002258 g     F .text	0000000e USBD_LL_SetUSBAddress
08010668 g     O .rodata	00000028 NVIC_IPR12_fields
20000448 g     O .data	00000004 _impure_ptr
0800c29c g     O .rodata	00000020 CAN_TDT2R_fields
0800eb40 g     O .rodata	00000010 ADC1_JDR4_fields
0800ea98 g     O .rodata	00000048 TIM15_CR2_fields
080038a0 g     F .text	00000154 __sflush_r
080067e4 g     O .rodata	00000068 RCC_CFGR_fields
08007208 g     O .rodata	00000030 TIM17_EGR_fields
080033d8  w    F .text	00000002 ADC4_IRQHandler
0800e870 g     O .rodata	000000a8 RTC_CR_fields
0800211e g     F .text	00000012 USBD_CtlContinueSendData
080100e8 g     O .rodata	000000e8 DMA1_ISR_fields
08007ed4 g     O .rodata	00000108 CAN_F6R1_fields
080033d8  w    F .text	00000002 WWDG_IRQHandler
08005e80 g     O .rodata	00000108 EXTI_EMR1_fields
0800a6a8 g     O .rodata	00000028 NVIC_IPR6_fields
08011670 g     O .rodata	00000018 TIM2_CCR3_fields
0800ef30 g     O .rodata	00000068 DMA1_CCR6_fields
0800bb9c g     O .rodata	00000088 GPIOA_MODER_fields
0800eff8 g     O .rodata	00000088 OPAMP_OPAMP2_CR_fields
08002ee4 g     F .text	0000000c vTaskMissedYield
0800d3c4 g     O .rodata	00000080 TIM1_CR2_fields
08009624 g     O .rodata	00000018 RTC_PRER_fields
08002266 g     F .text	0000000e USBD_LL_Transmit
080033d8  w    F .text	00000002 TIM2_IRQHandler
080107f0 g     O .rodata	00000028 TIM16_CCER_fields
0800b8b4 g     O .rodata	00000018 DES_UID1_fields
08015c08 g     O .parsetable	0000000c CmdDecodeE
080026cc g     F .text	00000174 xQueueGenericReceive
0800869c g     O .rodata	00000108 CAN_F26R2_fields
0800cefc g     O .rodata	00000108 CAN_F6R2_fields
08008904 g     O .rodata	00000108 CAN_F16R1_fields
08002ae4 g     F .text	00000120 xTaskIncrementTick
080061d8 g     O .rodata	00000010 RTC_BKP27R_fields
0800c364 g     O .rodata	00000018 EXTI_RTSR2_fields
08010f78 g     O .rodata	00000030 TIM16_CR2_fields
08007d1c g     O .rodata	00000078 RTC_ALRMAR_fields
0800f26c g     O .rodata	00000010 TIM1_ARR_fields
080080dc g     O .rodata	00000108 CAN_F22R2_fields
08005cc0 g     O .rodata	00000108 CAN_F24R1_fields
080021ac g     F .text	0000000e HAL_PCD_SetupStageCallback
08014d10 g     O .rodata	00000108 CAN_F5R1_fields
080033d8  w    F .text	00000002 COMP7_IRQHandler
20007fff g       *ABS*	00000000 _estack
0800dac8 g     O .rodata	00000010 RTC_BKP2R_fields
080033d8  w    F .text	00000002 COMP1_2_3_IRQHandler
0800cc8c g     O .rodata	00000108 CAN_F17R1_fields
080033d8  w    F .text	00000002 EXTI1_IRQHandler
08007ac0 g     O .rodata	00000068 TIM8_BDTR_fields
0800d31c g     O .rodata	00000058 USB_FS_USB_EP1R_fields
0800248c g     F .text	00000080 xQueueGenericReset
08005a58 g     O .rodata	000000b8 ADC1_2_CSR_fields
0800d1dc g     O .rodata	00000010 FPU_FPCAR_fields
2000085c g       .data	00000000 _edata
0800b5f0 g     O .rodata	00000144 TIM8_registers
080097dc g     O .rodata	00000010 RTC_BKP30R_fields
0800d004 g     O .rodata	00000020 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
0800c704 g     O .rodata	00000040 TIM16_CR1_fields
08014f6c g     O .rodata	00000108 CAN_F17R2_fields
08007ffc g     O .rodata	00000040 TIM15_CR1_fields
08000d18 g     F .text	000001e4 CmdDecode
0800c2bc g     O .rodata	00000010 TIM15_RCR_fields
08009bd0 g     O .rodata	00000088 GPIOB_IDR_fields
08005c00 g     O .rodata	00000058 TIM1_CCMR3_Output_fields
0800bdb4 g     O .rodata	00000010 TIM8_DMAR_fields
08006d4c g     O .rodata	0000006c Flash_registers
0800aed0 g     O .rodata	00000018 TIM16_DCR_fields
08002a72 g     F .text	0000005a xTaskCreate
08014c80 g     O .rodata	00000048 RCC_APB2RSTR_fields
080007d4 g     F .text	00000028 fetch_uint32_arg
0800f254 g     O .rodata	00000018 RTC_ALRMBSSR_fields
0800f090 g     O .rodata	00000048 SYSCFG_RCR_fields
080033d8  w    F .text	00000002 USART2_IRQHandler
08010b78 g     O .rodata	00000040 TIM17_CR1_fields
0800d7dc g     O .rodata	000001d4 NVIC_registers
080033d8  w    F .text	00000002 COMP4_5_6_IRQHandler
08004be8 g     F .text	00000038 __swrite
20000854 g     O .data	00000004 __malloc_trim_threshold
0800c234 g     O .rodata	00000010 TIM17_CCR1_fields
08008de0 g     O .rodata	00000030 I2C1_TIMINGR_fields
0800f68c g     O .rodata	00000010 USB_FS_BTABLE_fields
0800aa50 g     O .rodata	00000028 CAN_TDH1R_fields
0800c88c g     O .rodata	000000b0 I2C1_CR1_fields
08000000 g     O .isr_vector	00000000 g_pfnVectors
08002102 g     F .text	0000001c USBD_CtlSendData
0800fabc g     O .rodata	00000108 CAN_F15R1_fields
0800edd8 g     O .rodata	00000018 ADC1_2_CDR_fields
08004094 g     F .text	00000052 _fwalk_reent
08000f64 g     F .text	00000068 SystemCoreClockUpdate
08009e80 g     O .rodata	00000010 TIM6_PSC_fields
0800e628 g     O .rodata	00000010 RTC_BKP15R_fields
08008c64 g     O .rodata	00000024 PWR_registers
0800fa94 g     O .rodata	00000028 Flash_SR_fields
080111e0 g     O .rodata	00000010 ADC1_JDR2_fields
0800b9ec g     O .rodata	00000010 RTC_BKP20R_fields
2000001c g     O .data	00000004 __ctype_ptr__
08009e30 g     O .rodata	00000010 DMA1_CNDTR6_fields
08006344 g     O .rodata	00000108 CAN_F19R2_fields
080033d8  w    F .text	00000002 I2C2_ER_IRQHandler
0800aee8 g     O .rodata	00000048 ADC1_2_CCR_fields
080033d8  w    F .text	00000002 DMA1_Channel2_IRQHandler
08006280 g     O .rodata	000000b4 DAC_registers
08011318 g     O .rodata	00000088 GPIOA_OSPEEDR_fields
08014c48 g     O .rodata	00000038 TIM8_CCMR2_Input_fields
08003b2c g     F .text	00000002 __sfp_lock_release
080061f8 g     O .rodata	00000050 TIM17_BDTR_fields
0800d7b4 g     O .rodata	00000028 CAN_RDH1R_fields
0800cb8c g     O .rodata	00000068 TIM2_CCER_fields
08010818 g     O .rodata	00000018 DAC_DHR8RD_fields
080007fc g     F .text	00000020 fetch_string_arg
0800b190 g     O .rodata	00000088 GPIOB_MODER_fields
08015bfc g     O .parsetable	0000000c CmdDumpE
08009180 g     O .rodata	000000a0 USART1_CR3_fields
08000bc4 g     F .text	00000040 DecodeField
08010368 g     O .rodata	00000028 CAN_RI0R_fields
080033d8  w    F .text	00000002 TIM8_BRK_IRQHandler
08007a00 g     O .rodata	00000028 DBGMCU_APB2FZ_fields
08002ef0 g     F .text	00000020 xTaskGetSchedulerState
080070c8 g     O .rodata	00000010 TIM1_PSC_fields
08000c8c g     F .text	00000044 DecodePrintPeripherals
0800af30 g     O .rodata	00000040 TIM15_CCER_fields
08015284 g     O .rodata	00000101 _ctype_
0800d4d4 g     O .rodata	00000010 DMA1_CMAR7_fields
080003ac g     F .text	00000044 vTask2
08009c78 g     O .rodata	00000028 CAN_RI1R_fields
08010c88 g     O .rodata	00000030 SYSCFG_CFGR2_fields
0800a9c0 g     O .rodata	00000090 RCC_CIR_fields
08015c20 g     O .parsetable	0000000c CmdStatsE
080033d8  w    F .text	00000002 FLASH_IRQHandler
0800acf4 g     O .rodata	00000010 TIM15_DMAR_fields
08010cb8 g     O .rodata	00000018 EXTI_FTSR2_fields
0800adb8 g     O .rodata	00000108 CAN_F10R2_fields
08008db8 g     O .rodata	00000028 NVIC_IPR3_fields
08010e60 g     O .rodata	00000010 DMA1_CNDTR1_fields
080076e8 g     O .rodata	00000030 I2C1_TIMEOUTR_fields
08006c5c g     O .rodata	00000050 TIM15_BDTR_fields
08000a1c g     F .text	000000e8 TerminalOutputBufferWrite
080033d8  w    F .text	00000002 BusFault_Handler
080033d8  w    F .text	00000002 USART1_IRQHandler
0800af70 g     O .rodata	00000058 COMP_COMP1_CSR_fields
08015074 g     O .rodata	00000050 TIM8_EGR_fields
08004e38 g     F .text	000000e0 __smakebuf_r
0800b85c g     O .rodata	00000048 TIM15_SR_fields
080035d8 g     F .text	0000005c strlen
08008d70 g     O .rodata	00000048 RCC_APB2ENR_fields
0800304c g     F .text	0000002c pxPortInitialiseStack
080033d8  w    F .text	00000002 SPI3_IRQHandler
0800d104 g     O .rodata	00000068 DMA1_CCR3_fields
0800864c g     O .rodata	00000050 TIM1_CR1_fields
0800fd6c g     O .rodata	00000020 IWDG_SR_fields
08010c08 g     O .rodata	00000058 USB_FS_USB_EP6R_fields
0800ddec g     O .rodata	000000d8 TIM16_registers
0800ac28 g     O .rodata	000000cc TIM17_registers
08005834 g     O .rodata	000000a0 TIM1_CCER_fields
0800c3e4 g     O .rodata	00000108 CAN_F3R2_fields
08007c5c g     O .rodata	00000088 DAC_CR_fields
080033d8  w    F .text	00000002 I2C1_ER_IRQHandler
08007868 g     O .rodata	00000058 USB_FS_USB_EP7R_fields
0800b458 g     O .rodata	00000090 I2C1_ISR_fields
08005e08 g     O .rodata	00000068 TIM1_CCMR2_Output_fields
080072e8 g     O .rodata	00000028 NVIC_IPR8_fields
08002e44 g     F .text	0000002c vTaskSetTimeOutState
08010cd0 g     O .rodata	00000010 TSC_IOG3CR_fields
08002274 g     F .text	0000000e USBD_LL_PrepareReceive
080030a4 g     F .text	00000044 vPortEnterCritical
0800981c g     O .rodata	00000010 DMA1_CNDTR3_fields
080069b4 g     O .rodata	00000108 CAN_F27R1_fields
0800bcdc g     O .rodata	00000018 TSC_IER_fields
0800ab40 g     O .rodata	000000e8 CAN_FFA1R_fields
0800960c g     O .rodata	00000018 TIM8_CNT_fields
08010b68 g     O .rodata	00000010 ADC1_AWD3CR_fields
00000000  w      *UND*	00000000 _Jv_RegisterClasses
08010e38 g     O .rodata	00000010 RTC_BKP25R_fields
0800c11c g     O .rodata	00000108 TSC_IOCCR_fields
0800ce5c g     O .rodata	00000088 OPAMP_OPAMP3_CR_fields
08014b70 g     O .rodata	000000d8 EXTI_SWIER1_fields
08006138 g     O .rodata	00000010 TIM16_ARR_fields
0800b9d4 g     O .rodata	00000018 DBGMCU_IDCODE_fields
0800db58 g     O .rodata	00000028 EXTI_IMR2_fields
0800efe8 g     O .rodata	00000010 TIM6_EGR_fields
0800d53c g     O .rodata	00000010 SPI1_RXCRCR_fields
08014ec8 g     O .rodata	00000010 I2C1_PECR_fields
08001330 g     F .text	000000f4 HAL_PCD_EP_Receive
08014a10 g     O .rodata	00000020 ADC1_OFR3_fields
0800857c g     O .rodata	00000060 COMP_COMP6_CSR_fields
0800c62c g     O .rodata	00000010 RTC_BKP1R_fields
0800ec78 g     O .rodata	00000068 TIM8_CCMR1_Output_fields
0800e708 g     O .rodata	00000090 GPIOB_registers
08000c04 g     F .text	0000004c DecodeRegister
0800ad68 g     O .rodata	00000050 TIM8_SMCR_fields
08000b48 g     F .text	00000040 DecodeReadRegister
00000000  w      *UND*	00000000 __register_frame_info
0800652c g     O .rodata	00000058 CAN_MCR_fields
080065d4 g     O .rodata	00000010 DAC_DOR1_fields
080009c4 g     F .text	0000004c TerminalRead
080096f4 g     O .rodata	00000068 TSC_CR_fields
080076d8 g     O .rodata	00000010 TIM2_DMAR_fields
08006248 g     O .rodata	00000038 TIM8_CCMR1_Input_fields
08006acc g     O .rodata	00000108 CAN_F12R1_fields
080033d8  w    F .text	00000002 USBWakeUp_IRQHandler
08014e28 g     O .rodata	00000010 TIM16_PSC_fields
0800edb8 g     O .rodata	00000010 USART1_RDR_fields
0800d4fc g     O .rodata	00000040 RCC_BDCR_fields
0800f43c g     O .rodata	00000018 TIM17_DCR_fields
080115f8 g     O .rodata	00000010 NVIC_ISPR1_fields
08006e88 g     O .rodata	00000010 NVIC_ICPR2_fields
08010ce0 g     O .rodata	00000108 CAN_F21R2_fields
080104f8 g     O .rodata	00000010 DES_UID2_fields
0800216e g     F .text	00000010 USBD_CDC_SetTxBuffer
080078d8 g     O .rodata	00000060 SYSCFG_registers
0800b218 g     O .rodata	00000088 OPAMP_OPAMP4_CR_fields
080033d8  w    F .text	00000002 DMA2_Channel3_IRQHandler
0800b734 g     O .rodata	000000d8 EXTI_FTSR1_fields
0800b088 g     O .rodata	00000108 CAN_F7R1_fields
08001c2a g     F .text	0000005a USBD_LL_SetupStage
0800fd44 g     O .rodata	00000018 WWDG_CR_fields
080033d8  w    F .text	00000002 EXTI2_TSC_IRQHandler
08007858 g     O .rodata	00000010 NVIC_STIR_fields
080033d8  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
0800e6b0 g     O .rodata	00000058 TIM8_CCMR3_Output_fields



Disassembly of section .text:

08000190 <deregister_tm_clones>:
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x14>)
 8000192:	4805      	ldr	r0, [pc, #20]	; (80001a8 <deregister_tm_clones+0x18>)
 8000194:	1a1b      	subs	r3, r3, r0
 8000196:	2b06      	cmp	r3, #6
 8000198:	d902      	bls.n	80001a0 <deregister_tm_clones+0x10>
 800019a:	4b04      	ldr	r3, [pc, #16]	; (80001ac <deregister_tm_clones+0x1c>)
 800019c:	b103      	cbz	r3, 80001a0 <deregister_tm_clones+0x10>
 800019e:	4718      	bx	r3
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	2000085f 	.word	0x2000085f
 80001a8:	2000085c 	.word	0x2000085c
 80001ac:	00000000 	.word	0x00000000

080001b0 <register_tm_clones>:
 80001b0:	4905      	ldr	r1, [pc, #20]	; (80001c8 <register_tm_clones+0x18>)
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <register_tm_clones+0x1c>)
 80001b4:	1a09      	subs	r1, r1, r0
 80001b6:	1089      	asrs	r1, r1, #2
 80001b8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001bc:	1049      	asrs	r1, r1, #1
 80001be:	d002      	beq.n	80001c6 <register_tm_clones+0x16>
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <register_tm_clones+0x20>)
 80001c2:	b103      	cbz	r3, 80001c6 <register_tm_clones+0x16>
 80001c4:	4718      	bx	r3
 80001c6:	4770      	bx	lr
 80001c8:	2000085c 	.word	0x2000085c
 80001cc:	2000085c 	.word	0x2000085c
 80001d0:	00000000 	.word	0x00000000

080001d4 <__do_global_dtors_aux>:
 80001d4:	b510      	push	{r4, lr}
 80001d6:	4c06      	ldr	r4, [pc, #24]	; (80001f0 <__do_global_dtors_aux+0x1c>)
 80001d8:	7823      	ldrb	r3, [r4, #0]
 80001da:	b943      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x1a>
 80001dc:	f7ff ffd8 	bl	8000190 <deregister_tm_clones>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x20>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x16>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x24>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000085c 	.word	0x2000085c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004f18 	.word	0x08004f18

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b08      	ldr	r3, [pc, #32]	; (8000220 <frame_dummy+0x24>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x28>)
 8000204:	4908      	ldr	r1, [pc, #32]	; (8000228 <frame_dummy+0x2c>)
 8000206:	f3af 8000 	nop.w
 800020a:	4808      	ldr	r0, [pc, #32]	; (800022c <frame_dummy+0x30>)
 800020c:	6803      	ldr	r3, [r0, #0]
 800020e:	b913      	cbnz	r3, 8000216 <frame_dummy+0x1a>
 8000210:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000214:	e7cc      	b.n	80001b0 <register_tm_clones>
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <frame_dummy+0x34>)
 8000218:	2b00      	cmp	r3, #0
 800021a:	d0f9      	beq.n	8000210 <frame_dummy+0x14>
 800021c:	4798      	blx	r3
 800021e:	e7f7      	b.n	8000210 <frame_dummy+0x14>
 8000220:	00000000 	.word	0x00000000
 8000224:	08004f18 	.word	0x08004f18
 8000228:	20000860 	.word	0x20000860
 800022c:	2000085c 	.word	0x2000085c
 8000230:	00000000 	.word	0x00000000

08000234 <memcpy>:
 8000234:	4684      	mov	ip, r0
 8000236:	ea41 0300 	orr.w	r3, r1, r0
 800023a:	f013 0303 	ands.w	r3, r3, #3
 800023e:	d16d      	bne.n	800031c <memcpy+0xe8>
 8000240:	3a40      	subs	r2, #64	; 0x40
 8000242:	d341      	bcc.n	80002c8 <memcpy+0x94>
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000270:	f840 3b04 	str.w	r3, [r0], #4
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	f851 3b04 	ldr.w	r3, [r1], #4
 8000298:	f840 3b04 	str.w	r3, [r0], #4
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a8:	f840 3b04 	str.w	r3, [r0], #4
 80002ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b0:	f840 3b04 	str.w	r3, [r0], #4
 80002b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b8:	f840 3b04 	str.w	r3, [r0], #4
 80002bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c0:	f840 3b04 	str.w	r3, [r0], #4
 80002c4:	3a40      	subs	r2, #64	; 0x40
 80002c6:	d2bd      	bcs.n	8000244 <memcpy+0x10>
 80002c8:	3230      	adds	r2, #48	; 0x30
 80002ca:	d311      	bcc.n	80002f0 <memcpy+0xbc>
 80002cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d0:	f840 3b04 	str.w	r3, [r0], #4
 80002d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d8:	f840 3b04 	str.w	r3, [r0], #4
 80002dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e0:	f840 3b04 	str.w	r3, [r0], #4
 80002e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e8:	f840 3b04 	str.w	r3, [r0], #4
 80002ec:	3a10      	subs	r2, #16
 80002ee:	d2ed      	bcs.n	80002cc <memcpy+0x98>
 80002f0:	320c      	adds	r2, #12
 80002f2:	d305      	bcc.n	8000300 <memcpy+0xcc>
 80002f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f8:	f840 3b04 	str.w	r3, [r0], #4
 80002fc:	3a04      	subs	r2, #4
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0xc0>
 8000300:	3204      	adds	r2, #4
 8000302:	d008      	beq.n	8000316 <memcpy+0xe2>
 8000304:	07d2      	lsls	r2, r2, #31
 8000306:	bf1c      	itt	ne
 8000308:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800030c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000310:	d301      	bcc.n	8000316 <memcpy+0xe2>
 8000312:	880b      	ldrh	r3, [r1, #0]
 8000314:	8003      	strh	r3, [r0, #0]
 8000316:	4660      	mov	r0, ip
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	2a08      	cmp	r2, #8
 800031e:	d313      	bcc.n	8000348 <memcpy+0x114>
 8000320:	078b      	lsls	r3, r1, #30
 8000322:	d08d      	beq.n	8000240 <memcpy+0xc>
 8000324:	f010 0303 	ands.w	r3, r0, #3
 8000328:	d08a      	beq.n	8000240 <memcpy+0xc>
 800032a:	f1c3 0304 	rsb	r3, r3, #4
 800032e:	1ad2      	subs	r2, r2, r3
 8000330:	07db      	lsls	r3, r3, #31
 8000332:	bf1c      	itt	ne
 8000334:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000338:	f800 3b01 	strbne.w	r3, [r0], #1
 800033c:	d380      	bcc.n	8000240 <memcpy+0xc>
 800033e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000342:	f820 3b02 	strh.w	r3, [r0], #2
 8000346:	e77b      	b.n	8000240 <memcpy+0xc>
 8000348:	3a04      	subs	r2, #4
 800034a:	d3d9      	bcc.n	8000300 <memcpy+0xcc>
 800034c:	3a01      	subs	r2, #1
 800034e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000352:	f800 3b01 	strb.w	r3, [r0], #1
 8000356:	d2f9      	bcs.n	800034c <memcpy+0x118>
 8000358:	780b      	ldrb	r3, [r1, #0]
 800035a:	7003      	strb	r3, [r0, #0]
 800035c:	784b      	ldrb	r3, [r1, #1]
 800035e:	7043      	strb	r3, [r0, #1]
 8000360:	788b      	ldrb	r3, [r1, #2]
 8000362:	7083      	strb	r3, [r0, #2]
 8000364:	4660      	mov	r0, ip
 8000366:	4770      	bx	lr

08000368 <vTask1>:
	for( ;; );
}
/*-----------------------------------------------------------*/

void vTask1( void *pvParameters )
{
 8000368:	b513      	push	{r0, r1, r4, lr}
	for( ;; )
	{
		/* Print out the name of this task. */
		/* lets make the sema un-available */
	
		 xSemaphoreTake( xSemaphore, ( TickType_t ) portMAX_DELAY );
 800036a:	4c0d      	ldr	r4, [pc, #52]	; (80003a0 <vTask1+0x38>)
 800036c:	2100      	movs	r1, #0
 800036e:	460b      	mov	r3, r1
 8000370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000374:	6820      	ldr	r0, [r4, #0]
 8000376:	f002 f9a9 	bl	80026cc <xQueueGenericReceive>
		 printf( "%s\n",pcTaskName );
 800037a:	480a      	ldr	r0, [pc, #40]	; (80003a4 <vTask1+0x3c>)
 800037c:	f003 f902 	bl	8003584 <puts>
		/* lets make the sema available */
		 xSemaphoreGive( xSemaphore);
 8000380:	2100      	movs	r1, #0
 8000382:	460b      	mov	r3, r1
 8000384:	6820      	ldr	r0, [r4, #0]
 8000386:	460a      	mov	r2, r1
 8000388:	f002 f8ea 	bl	8002560 <xQueueGenericSend>

		/* Delay for a period. */
		for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++ )
 800038c:	2300      	movs	r3, #0
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	9a01      	ldr	r2, [sp, #4]
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <vTask1+0x40>)
 8000394:	429a      	cmp	r2, r3
 8000396:	d8e8      	bhi.n	800036a <vTask1+0x2>
 8000398:	9b01      	ldr	r3, [sp, #4]
 800039a:	3301      	adds	r3, #1
 800039c:	e7f7      	b.n	800038e <vTask1+0x26>
 800039e:	bf00      	nop
 80003a0:	20000878 	.word	0x20000878
 80003a4:	08004f30 	.word	0x08004f30
 80003a8:	000ffffe 	.word	0x000ffffe

080003ac <vTask2>:
	}
}
/*-----------------------------------------------------------*/

void vTask2( void *pvParameters )
{
 80003ac:	b513      	push	{r0, r1, r4, lr}
	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Print out the name of this task. */
		/* lets make the sema un-available */
		 xSemaphoreTake( xSemaphore, ( TickType_t ) portMAX_DELAY );
 80003ae:	4c0d      	ldr	r4, [pc, #52]	; (80003e4 <vTask2+0x38>)
 80003b0:	2100      	movs	r1, #0
 80003b2:	460b      	mov	r3, r1
 80003b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003b8:	6820      	ldr	r0, [r4, #0]
 80003ba:	f002 f987 	bl	80026cc <xQueueGenericReceive>
	  	 printf( "%s\n",pcTaskName );
 80003be:	480a      	ldr	r0, [pc, #40]	; (80003e8 <vTask2+0x3c>)
 80003c0:	f003 f8e0 	bl	8003584 <puts>
		/* lets make the sema available */
		 xSemaphoreGive( xSemaphore);
 80003c4:	2100      	movs	r1, #0
 80003c6:	460b      	mov	r3, r1
 80003c8:	6820      	ldr	r0, [r4, #0]
 80003ca:	460a      	mov	r2, r1
 80003cc:	f002 f8c8 	bl	8002560 <xQueueGenericSend>
		 
		/* Delay for a period. */
	for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++ )
 80003d0:	2300      	movs	r3, #0
 80003d2:	9301      	str	r3, [sp, #4]
 80003d4:	9a01      	ldr	r2, [sp, #4]
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <vTask2+0x40>)
 80003d8:	429a      	cmp	r2, r3
 80003da:	d8e8      	bhi.n	80003ae <vTask2+0x2>
 80003dc:	9b01      	ldr	r3, [sp, #4]
 80003de:	3301      	adds	r3, #1
 80003e0:	e7f7      	b.n	80003d2 <vTask2+0x26>
 80003e2:	bf00      	nop
 80003e4:	20000878 	.word	0x20000878
 80003e8:	08004f43 	.word	0x08004f43
 80003ec:	000ffffe 	.word	0x000ffffe

080003f0 <SystemCoreClockConfigure>:
                             (HSE is not populated on Nucleo board)
 *----------------------------------------------------------------------------*/

void SystemCoreClockConfigure(void) {

  RCC->CR |= ((uint32_t)RCC_CR_HSEON);                     /* Enable HSE */
 80003f0:	4b1a      	ldr	r3, [pc, #104]	; (800045c <SystemCoreClockConfigure+0x6c>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003f8:	601a      	str	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0);                  /* Wait for HSE Ready */
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	0390      	lsls	r0, r2, #14
 80003fe:	d5fc      	bpl.n	80003fa <SystemCoreClockConfigure+0xa>

  RCC->CFGR = RCC_CFGR_SW_HSE;                             /* HSE is system clock */
 8000400:	4a16      	ldr	r2, [pc, #88]	; (800045c <SystemCoreClockConfigure+0x6c>)
 8000402:	2101      	movs	r1, #1
 8000404:	6051      	str	r1, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE);  /* Wait for HSE used as system clock */
 8000406:	6859      	ldr	r1, [r3, #4]
 8000408:	4a14      	ldr	r2, [pc, #80]	; (800045c <SystemCoreClockConfigure+0x6c>)
 800040a:	f001 010c 	and.w	r1, r1, #12
 800040e:	2904      	cmp	r1, #4
 8000410:	d1f9      	bne.n	8000406 <SystemCoreClockConfigure+0x16>

  FLASH->ACR  = (FLASH_ACR_PRFTBE     |                    /* Enable Prefetch Buffer */
 8000412:	4913      	ldr	r1, [pc, #76]	; (8000460 <SystemCoreClockConfigure+0x70>)
 8000414:	2017      	movs	r0, #23
 8000416:	6008      	str	r0, [r1, #0]
                 //FLASH_ACR_ICEN       |                    /* Instruction cache enable */
                 //FLASH_ACR_DCEN       |                    /* Data cache enable */
				 FLASH_ACR_LATENCY );                  /* Flash 3 wait state */

  RCC->CFGR |= (RCC_CFGR_HPRE_DIV1  |                      /* HCLK = SYSCLK */
 8000418:	6851      	ldr	r1, [r2, #4]
 800041a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800041e:	6051      	str	r1, [r2, #4]
                RCC_CFGR_PPRE1_DIV2 |                      /* APB1 = HCLK/2 */
                RCC_CFGR_PPRE2_DIV1  );                    /* APB2 = HCLK/1 */

  RCC->CR &= ~RCC_CR_PLLON;                                /* Disable PLL */
 8000420:	6811      	ldr	r1, [r2, #0]
 8000422:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8000426:	6011      	str	r1, [r2, #0]

  /* PLL configuration:  VCO = HSI/M * N,  Sysclk = VCO/P */
  RCC->CFGR = ( 16ul                   |                /* PLL_M =  16 */
 8000428:	490e      	ldr	r1, [pc, #56]	; (8000464 <SystemCoreClockConfigure+0x74>)
 800042a:	6051      	str	r1, [r2, #4]
                 (  0ul << 16)            |                /* PLL_P =   2 */
                 (RCC_CFGR_PLLXTPRE) |                /* PLL_SRC = HSI */
                 (  7ul << 24)            |                /* PLL_Q =   7 */
                 (  2ul << 28)             );              /* PLL_R =   2 */

  RCC->CR |= RCC_CR_PLLON;                                 /* Enable PLL */
 800042c:	6811      	ldr	r1, [r2, #0]
 800042e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000432:	6011      	str	r1, [r2, #0]
  while((RCC->CR & RCC_CR_PLLRDY) == 0) __NOP();           /* Wait till PLL is ready */
 8000434:	6819      	ldr	r1, [r3, #0]
 8000436:	4a09      	ldr	r2, [pc, #36]	; (800045c <SystemCoreClockConfigure+0x6c>)
 8000438:	0189      	lsls	r1, r1, #6
 800043a:	d401      	bmi.n	8000440 <SystemCoreClockConfigure+0x50>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800043c:	bf00      	nop
 800043e:	e7f9      	b.n	8000434 <SystemCoreClockConfigure+0x44>

  RCC->CFGR &= ~RCC_CFGR_SW;                               /* Select PLL as system clock source */
 8000440:	6851      	ldr	r1, [r2, #4]
 8000442:	f021 0103 	bic.w	r1, r1, #3
 8000446:	6051      	str	r1, [r2, #4]
  RCC->CFGR |=  RCC_CFGR_SW_PLL;
 8000448:	6851      	ldr	r1, [r2, #4]
 800044a:	f041 0102 	orr.w	r1, r1, #2
 800044e:	6051      	str	r1, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);  /* Wait till PLL is system clock src */
 8000450:	685a      	ldr	r2, [r3, #4]
 8000452:	f002 020c 	and.w	r2, r2, #12
 8000456:	2a08      	cmp	r2, #8
 8000458:	d1fa      	bne.n	8000450 <SystemCoreClockConfigure+0x60>
}
 800045a:	4770      	bx	lr
 800045c:	40021000 	.word	0x40021000
 8000460:	40022000 	.word	0x40022000
 8000464:	27023210 	.word	0x27023210

08000468 <main>:


SemaphoreHandle_t xSemaphore = NULL;

int main( void )
{
 8000468:	b507      	push	{r0, r1, r2, lr}
	
	printf("Eclipse-FreeRTOS Project, Feb 11 , 2017 \n");
	
	
	/* Create one of the two tasks. */
	xTaskCreate(	vTask1,		/* Pointer to the function that implements the task. */
 800046a:	2400      	movs	r4, #0

int main( void )
{
  
	/* essential Board initializations */
   SystemInit();
 800046c:	f000 fd46 	bl	8000efc <SystemInit>
	
	printf("Eclipse-FreeRTOS Project, Feb 11 , 2017 \n");
	
	
	/* Create one of the two tasks. */
	xTaskCreate(	vTask1,		/* Pointer to the function that implements the task. */
 8000470:	2501      	movs	r5, #1
  
	/* essential Board initializations */
   SystemInit();
	
	 /* This function initializes the MCU clock, PLL will be used to generate Main MCU clock */
	SystemCoreClockConfigure();  
 8000472:	f7ff ffbd 	bl	80003f0 <SystemCoreClockConfigure>
	SystemCoreClockUpdate();
 8000476:	f000 fd75 	bl	8000f64 <SystemCoreClockUpdate>
	
	/* Trace init */
	 
	
	printf("Eclipse-FreeRTOS Project, Feb 11 , 2017 \n");
 800047a:	4819      	ldr	r0, [pc, #100]	; (80004e0 <main+0x78>)
 800047c:	f003 f882 	bl	8003584 <puts>
	
	
	/* Create one of the two tasks. */
	xTaskCreate(	vTask1,		/* Pointer to the function that implements the task. */
 8000480:	4918      	ldr	r1, [pc, #96]	; (80004e4 <main+0x7c>)
 8000482:	9500      	str	r5, [sp, #0]
 8000484:	22f0      	movs	r2, #240	; 0xf0
 8000486:	4623      	mov	r3, r4
 8000488:	9401      	str	r4, [sp, #4]
 800048a:	4817      	ldr	r0, [pc, #92]	; (80004e8 <main+0x80>)
 800048c:	f002 faf1 	bl	8002a72 <xTaskCreate>
					NULL,		/* We are not using the task parameter. */
					1,			/* This task will run at priority 1. */
					NULL );		/* We are not using the task handle. */

	/* Create the other task in exactly the same way. */
	xTaskCreate( vTask2, "Task 2", 240, NULL, 1, NULL );
 8000490:	4916      	ldr	r1, [pc, #88]	; (80004ec <main+0x84>)
 8000492:	9500      	str	r5, [sp, #0]
 8000494:	22f0      	movs	r2, #240	; 0xf0
 8000496:	4623      	mov	r3, r4
 8000498:	9401      	str	r4, [sp, #4]
 800049a:	4815      	ldr	r0, [pc, #84]	; (80004f0 <main+0x88>)
 800049c:	f002 fae9 	bl	8002a72 <xTaskCreate>
	
	/* Create the other task in exactly the same way. */
	xTaskCreate( vTask2, "crazy1", 240, NULL, 1, NULL );
 80004a0:	4914      	ldr	r1, [pc, #80]	; (80004f4 <main+0x8c>)
 80004a2:	9500      	str	r5, [sp, #0]
 80004a4:	22f0      	movs	r2, #240	; 0xf0
 80004a6:	4623      	mov	r3, r4
 80004a8:	9401      	str	r4, [sp, #4]
 80004aa:	4811      	ldr	r0, [pc, #68]	; (80004f0 <main+0x88>)
 80004ac:	f002 fae1 	bl	8002a72 <xTaskCreate>
	
	/* Create the other task in exactly the same way. */
	xTaskCreate( vTask2, "crazy2", 240, NULL, 1, NULL );
 80004b0:	4623      	mov	r3, r4
 80004b2:	4911      	ldr	r1, [pc, #68]	; (80004f8 <main+0x90>)
 80004b4:	9500      	str	r5, [sp, #0]
 80004b6:	22f0      	movs	r2, #240	; 0xf0
 80004b8:	9401      	str	r4, [sp, #4]
 80004ba:	480d      	ldr	r0, [pc, #52]	; (80004f0 <main+0x88>)
 80004bc:	f002 fad9 	bl	8002a72 <xTaskCreate>
	
  /* lets create the binary semaphore dynamically */
	xSemaphore = xSemaphoreCreateBinary();
 80004c0:	4621      	mov	r1, r4
 80004c2:	2203      	movs	r2, #3
 80004c4:	4628      	mov	r0, r5
 80004c6:	f002 f821 	bl	800250c <xQueueGenericCreate>
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <main+0x94>)
	
	/* lets make the semaphore token available for the first time */
	xSemaphoreGive( xSemaphore);
 80004cc:	4621      	mov	r1, r4
	
	/* Create the other task in exactly the same way. */
	xTaskCreate( vTask2, "crazy2", 240, NULL, 1, NULL );
	
  /* lets create the binary semaphore dynamically */
	xSemaphore = xSemaphoreCreateBinary();
 80004ce:	6018      	str	r0, [r3, #0]
	
	/* lets make the semaphore token available for the first time */
	xSemaphoreGive( xSemaphore);
 80004d0:	4622      	mov	r2, r4
 80004d2:	4623      	mov	r3, r4
 80004d4:	f002 f844 	bl	8002560 <xQueueGenericSend>

	/* Start the scheduler so our tasks start executing. */
	vTaskStartScheduler();
 80004d8:	f002 faf8 	bl	8002acc <vTaskStartScheduler>

	/* If all is well we will never reach here as the scheduler will now be
	running.  If we do reach here then it is likely that there was insufficient
	heap available for the idle task to be created. */
	for( ;; );
 80004dc:	e7fe      	b.n	80004dc <main+0x74>
 80004de:	bf00      	nop
 80004e0:	08004f56 	.word	0x08004f56
 80004e4:	08004f7f 	.word	0x08004f7f
 80004e8:	08000369 	.word	0x08000369
 80004ec:	08004f86 	.word	0x08004f86
 80004f0:	080003ad 	.word	0x080003ad
 80004f4:	08004f8d 	.word	0x08004f8d
 80004f8:	08004f94 	.word	0x08004f94
 80004fc:	20000878 	.word	0x20000878

08000500 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
	/* This function will only be called if an API call to create a task, queue
	or semaphore fails because there is too little heap RAM remaining. */
	for( ;; );
 8000500:	e7fe      	b.n	8000500 <vApplicationMallocFailedHook>

08000502 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName )
{
	/* This function will only be called if a task overflows its stack.  Note
	that stack overflow checking does slow down the context switch
	implementation. */
	for( ;; );
 8000502:	e7fe      	b.n	8000502 <vApplicationStackOverflowHook>

08000504 <vApplicationTickHook>:
	/* This example does not use the idle hook to perform any processing. */
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8000504:	4770      	bx	lr

08000506 <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 8000506:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 8000508:	b940      	cbnz	r0, 800051c <CmdW+0x16>

  fetch_uint32_arg(&addr);
 800050a:	4668      	mov	r0, sp
 800050c:	f000 f962 	bl	80007d4 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 8000510:	a801      	add	r0, sp, #4
 8000512:	f000 f95f 	bl	80007d4 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 8000516:	9b00      	ldr	r3, [sp, #0]
 8000518:	9a01      	ldr	r2, [sp, #4]
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	b003      	add	sp, #12
 800051e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000524 <CmdR>:
#include "common.h"



void CmdR(int mode)
{
 8000524:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr;

  if(mode != CMD_INTERACTIVE) return;
 8000526:	b938      	cbnz	r0, 8000538 <CmdR+0x14>

  fetch_uint32_arg(&addr);
 8000528:	a801      	add	r0, sp, #4
 800052a:	f000 f953 	bl	80007d4 <fetch_uint32_arg>

  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 800052e:	9901      	ldr	r1, [sp, #4]
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <CmdR+0x1c>)
 8000532:	680a      	ldr	r2, [r1, #0]
 8000534:	f000 f940 	bl	80007b8 <printf>
	 (unsigned int)(*((uint32_t *)addr)));
}
 8000538:	b003      	add	sp, #12
 800053a:	f85d fb04 	ldr.w	pc, [sp], #4
 800053e:	bf00      	nop
 8000540:	08004f9b 	.word	0x08004f9b

08000544 <printchar>:
#include "common.h"

int _write_r(void *reent, int fd, char *ptr, size_t len);

static void printchar(char **str, int c)
{
 8000544:	b507      	push	{r0, r1, r2, lr}
  char output = c;
 8000546:	b2cb      	uxtb	r3, r1
 8000548:	f88d 3007 	strb.w	r3, [sp, #7]
  if (str) {
 800054c:	4601      	mov	r1, r0
 800054e:	b128      	cbz	r0, 800055c <printchar+0x18>
    **str = c;
 8000550:	6802      	ldr	r2, [r0, #0]
 8000552:	7013      	strb	r3, [r2, #0]
    ++(*str);
 8000554:	6803      	ldr	r3, [r0, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	6003      	str	r3, [r0, #0]
 800055a:	e004      	b.n	8000566 <printchar+0x22>
  } else {
    _write_r(NULL, 0, &output, 1); 
 800055c:	f10d 0207 	add.w	r2, sp, #7
 8000560:	2301      	movs	r3, #1
 8000562:	f000 facf 	bl	8000b04 <_write_r>
  }
}
 8000566:	b003      	add	sp, #12
 8000568:	f85d fb04 	ldr.w	pc, [sp], #4

0800056c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 800056c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8000570:	1e14      	subs	r4, r2, #0

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8000572:	4680      	mov	r8, r0
 8000574:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8000576:	dd0f      	ble.n	8000598 <prints+0x2c>
 8000578:	460a      	mov	r2, r1
 800057a:	1b50      	subs	r0, r2, r5
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 800057c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000580:	2900      	cmp	r1, #0
 8000582:	d1fa      	bne.n	800057a <prints+0xe>
		if (len >= width) width = 0;
 8000584:	42a0      	cmp	r0, r4
		else width -= len;
 8000586:	bfb4      	ite	lt
 8000588:	1a24      	sublt	r4, r4, r0

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
 800058a:	460c      	movge	r4, r1
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
 800058c:	f013 0f02 	tst.w	r3, #2
 8000590:	bf0c      	ite	eq
 8000592:	2720      	moveq	r7, #32
 8000594:	2730      	movne	r7, #48	; 0x30
 8000596:	e000      	b.n	800059a <prints+0x2e>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8000598:	2720      	movs	r7, #32
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
 800059a:	07db      	lsls	r3, r3, #31
 800059c:	d40d      	bmi.n	80005ba <prints+0x4e>
 800059e:	4626      	mov	r6, r4
		for ( ; width > 0; --width) {
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	dd05      	ble.n	80005b0 <prints+0x44>
			printchar (out, padchar);
 80005a4:	4640      	mov	r0, r8
 80005a6:	4639      	mov	r1, r7
 80005a8:	f7ff ffcc 	bl	8000544 <printchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 80005ac:	3e01      	subs	r6, #1
 80005ae:	e7f7      	b.n	80005a0 <prints+0x34>
 80005b0:	ea24 7ae4 	bic.w	sl, r4, r4, asr #31
 80005b4:	ebca 0404 	rsb	r4, sl, r4
 80005b8:	e001      	b.n	80005be <prints+0x52>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 80005ba:	f04f 0a00 	mov.w	sl, #0
 80005be:	46a9      	mov	r9, r5
 80005c0:	ebc5 060a 	rsb	r6, r5, sl
 80005c4:	444e      	add	r6, r9
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 80005c6:	f819 1b01 	ldrb.w	r1, [r9], #1
 80005ca:	b119      	cbz	r1, 80005d4 <prints+0x68>
		printchar (out, *string);
 80005cc:	4640      	mov	r0, r8
 80005ce:	f7ff ffb9 	bl	8000544 <printchar>
 80005d2:	e7f5      	b.n	80005c0 <prints+0x54>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 80005d4:	4625      	mov	r5, r4
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80005d6:	2d00      	cmp	r5, #0
 80005d8:	dd05      	ble.n	80005e6 <prints+0x7a>
		printchar (out, padchar);
 80005da:	4640      	mov	r0, r8
 80005dc:	4639      	mov	r1, r7
 80005de:	f7ff ffb1 	bl	8000544 <printchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80005e2:	3d01      	subs	r5, #1
 80005e4:	e7f7      	b.n	80005d6 <prints+0x6a>
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
 80005e6:	2c00      	cmp	r4, #0
 80005e8:	bfac      	ite	ge
 80005ea:	1930      	addge	r0, r6, r4
 80005ec:	1c30      	addlt	r0, r6, #0
 80005ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080005f2 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80005f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005f6:	b085      	sub	sp, #20
 80005f8:	4607      	mov	r7, r0
 80005fa:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80005fe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 8000600:	460d      	mov	r5, r1

	if (i == 0) {
 8000602:	b951      	cbnz	r1, 800061a <printi+0x28>
		print_buf[0] = '0';
 8000604:	2330      	movs	r3, #48	; 0x30
 8000606:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
 800060a:	f88d 1005 	strb.w	r1, [sp, #5]
		return prints (out, print_buf, width, pad);
 800060e:	464a      	mov	r2, r9
 8000610:	a901      	add	r1, sp, #4
 8000612:	4633      	mov	r3, r6
 8000614:	f7ff ffaa 	bl	800056c <prints>
 8000618:	e03b      	b.n	8000692 <printi+0xa0>
	}

	if (sg && b == 10 && i < 0) {
 800061a:	b133      	cbz	r3, 800062a <printi+0x38>
 800061c:	2a0a      	cmp	r2, #10
 800061e:	d104      	bne.n	800062a <printi+0x38>
 8000620:	2900      	cmp	r1, #0
 8000622:	da02      	bge.n	800062a <printi+0x38>
		neg = 1;
		u = -i;
 8000624:	424d      	negs	r5, r1
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 8000626:	2001      	movs	r0, #1
 8000628:	e000      	b.n	800062c <printi+0x3a>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 800062a:	2000      	movs	r0, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 800062c:	f10d 0810 	add.w	r8, sp, #16
 8000630:	2100      	movs	r1, #0
 8000632:	f808 1d01 	strb.w	r1, [r8, #-1]!

	while (u) {
 8000636:	b175      	cbz	r5, 8000656 <printi+0x64>
		t = u % b;
 8000638:	fbb5 f1f2 	udiv	r1, r5, r2
 800063c:	fb02 5511 	mls	r5, r2, r1, r5
		if( t >= 10 )
 8000640:	2d09      	cmp	r5, #9
			t += letbase - '0' - 10;
 8000642:	bfc2      	ittt	gt
 8000644:	9b0e      	ldrgt	r3, [sp, #56]	; 0x38
 8000646:	f1a3 043a 	subgt.w	r4, r3, #58	; 0x3a
 800064a:	192d      	addgt	r5, r5, r4
		*--s = t + '0';
 800064c:	3530      	adds	r5, #48	; 0x30
 800064e:	f808 5d01 	strb.w	r5, [r8, #-1]!
		u /= b;
 8000652:	460d      	mov	r5, r1
 8000654:	e7ef      	b.n	8000636 <printi+0x44>
 8000656:	4643      	mov	r3, r8
	}

	if (neg) {
 8000658:	b198      	cbz	r0, 8000682 <printi+0x90>
		if( width && (pad & PAD_ZERO) ) {
 800065a:	f1b9 0f00 	cmp.w	r9, #0
 800065e:	d009      	beq.n	8000674 <printi+0x82>
 8000660:	07b2      	lsls	r2, r6, #30
 8000662:	d507      	bpl.n	8000674 <printi+0x82>
			printchar (out, '-');
 8000664:	4638      	mov	r0, r7
 8000666:	212d      	movs	r1, #45	; 0x2d
 8000668:	f7ff ff6c 	bl	8000544 <printchar>
			++pc;
			--width;
 800066c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 8000670:	2401      	movs	r4, #1
			--width;
 8000672:	e007      	b.n	8000684 <printi+0x92>
		}
		else {
			*--s = '-';
 8000674:	222d      	movs	r2, #45	; 0x2d
 8000676:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800067a:	f803 2c01 	strb.w	r2, [r3, #-1]

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 800067e:	2400      	movs	r4, #0
 8000680:	e000      	b.n	8000684 <printi+0x92>
 8000682:	4604      	mov	r4, r0
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 8000684:	4638      	mov	r0, r7
 8000686:	4641      	mov	r1, r8
 8000688:	464a      	mov	r2, r9
 800068a:	4633      	mov	r3, r6
 800068c:	f7ff ff6e 	bl	800056c <prints>
 8000690:	4420      	add	r0, r4
}
 8000692:	b005      	add	sp, #20
 8000694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000698 <print>:

static int print(char **out, const char *format, va_list args )
{
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	b089      	sub	sp, #36	; 0x24
 800069c:	4606      	mov	r6, r0
 800069e:	460d      	mov	r5, r1
 80006a0:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
 80006a2:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 80006a4:	782b      	ldrb	r3, [r5, #0]
 80006a6:	b123      	cbz	r3, 80006b2 <print+0x1a>
		if (*format == '%') {
 80006a8:	2b25      	cmp	r3, #37	; 0x25
 80006aa:	d179      	bne.n	80007a0 <print+0x108>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
 80006ac:	786b      	ldrb	r3, [r5, #1]
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 80006ae:	1c6a      	adds	r2, r5, #1
			width = pad = 0;
			if (*format == '\0') break;
 80006b0:	b92b      	cbnz	r3, 80006be <print+0x26>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 80006b2:	2e00      	cmp	r6, #0
 80006b4:	d07b      	beq.n	80007ae <print+0x116>
 80006b6:	6833      	ldr	r3, [r6, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e077      	b.n	80007ae <print+0x116>
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
 80006be:	2b25      	cmp	r3, #37	; 0x25
 80006c0:	d06d      	beq.n	800079e <print+0x106>
			if (*format == '-') {
 80006c2:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
 80006c4:	bf06      	itte	eq
 80006c6:	1caa      	addeq	r2, r5, #2
				pad = PAD_RIGHT;
 80006c8:	2301      	moveq	r3, #1
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 80006ca:	2300      	movne	r3, #0
 80006cc:	4610      	mov	r0, r2
 80006ce:	3201      	adds	r2, #1
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 80006d0:	7801      	ldrb	r1, [r0, #0]
 80006d2:	2930      	cmp	r1, #48	; 0x30
 80006d4:	d102      	bne.n	80006dc <print+0x44>
				++format;
				pad |= PAD_ZERO;
 80006d6:	f043 0302 	orr.w	r3, r3, #2
 80006da:	e7f7      	b.n	80006cc <print+0x34>
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 80006dc:	2200      	movs	r2, #0
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80006de:	7801      	ldrb	r1, [r0, #0]
 80006e0:	f1a1 0730 	sub.w	r7, r1, #48	; 0x30
 80006e4:	fa5f fe87 	uxtb.w	lr, r7
 80006e8:	f1be 0f09 	cmp.w	lr, #9
 80006ec:	4605      	mov	r5, r0
 80006ee:	f100 0001 	add.w	r0, r0, #1
 80006f2:	d803      	bhi.n	80006fc <print+0x64>
				width *= 10;
				width += *format - '0';
 80006f4:	210a      	movs	r1, #10
 80006f6:	fb01 7202 	mla	r2, r1, r2, r7
 80006fa:	e7f0      	b.n	80006de <print+0x46>
			}
			if( *format == 's' ) {
 80006fc:	2973      	cmp	r1, #115	; 0x73
 80006fe:	d109      	bne.n	8000714 <print+0x7c>
				register char *s = (char *)va_arg( args, int );
 8000700:	9905      	ldr	r1, [sp, #20]
				pc += prints (out, s?s:"(null)", width, pad);
 8000702:	4f2c      	ldr	r7, [pc, #176]	; (80007b4 <print+0x11c>)
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = (char *)va_arg( args, int );
 8000704:	1d08      	adds	r0, r1, #4
 8000706:	6809      	ldr	r1, [r1, #0]
 8000708:	9005      	str	r0, [sp, #20]
				pc += prints (out, s?s:"(null)", width, pad);
 800070a:	2900      	cmp	r1, #0
 800070c:	bf08      	it	eq
 800070e:	4639      	moveq	r1, r7
 8000710:	4630      	mov	r0, r6
 8000712:	e041      	b.n	8000798 <print+0x100>
				continue;
			}
			if( *format == 'd' ) {
 8000714:	2964      	cmp	r1, #100	; 0x64
 8000716:	d10e      	bne.n	8000736 <print+0x9e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000718:	e88d 000c 	stmia.w	sp, {r2, r3}
 800071c:	9905      	ldr	r1, [sp, #20]
 800071e:	2361      	movs	r3, #97	; 0x61
 8000720:	9302      	str	r3, [sp, #8]
 8000722:	1d08      	adds	r0, r1, #4
 8000724:	6809      	ldr	r1, [r1, #0]
 8000726:	9005      	str	r0, [sp, #20]
 8000728:	220a      	movs	r2, #10
 800072a:	4630      	mov	r0, r6
 800072c:	2301      	movs	r3, #1
 800072e:	f7ff ff60 	bl	80005f2 <printi>
 8000732:	4404      	add	r4, r0
				continue;
 8000734:	e039      	b.n	80007aa <print+0x112>
			}
			if( *format == 'x' ) {
 8000736:	2978      	cmp	r1, #120	; 0x78
 8000738:	d106      	bne.n	8000748 <print+0xb0>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 800073a:	9905      	ldr	r1, [sp, #20]
 800073c:	1d08      	adds	r0, r1, #4
 800073e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8000742:	9005      	str	r0, [sp, #20]
 8000744:	2361      	movs	r3, #97	; 0x61
 8000746:	e007      	b.n	8000758 <print+0xc0>
				continue;
			}
			if( *format == 'X' ) {
 8000748:	2958      	cmp	r1, #88	; 0x58
 800074a:	d10a      	bne.n	8000762 <print+0xca>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 800074c:	9905      	ldr	r1, [sp, #20]
 800074e:	1d08      	adds	r0, r1, #4
 8000750:	e88d 000c 	stmia.w	sp, {r2, r3}
 8000754:	9005      	str	r0, [sp, #20]
 8000756:	2341      	movs	r3, #65	; 0x41
 8000758:	9302      	str	r3, [sp, #8]
 800075a:	4630      	mov	r0, r6
 800075c:	6809      	ldr	r1, [r1, #0]
 800075e:	2210      	movs	r2, #16
 8000760:	e00b      	b.n	800077a <print+0xe2>
				continue;
			}
			if( *format == 'u' ) {
 8000762:	2975      	cmp	r1, #117	; 0x75
 8000764:	d10b      	bne.n	800077e <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000766:	e88d 000c 	stmia.w	sp, {r2, r3}
 800076a:	9905      	ldr	r1, [sp, #20]
 800076c:	2361      	movs	r3, #97	; 0x61
 800076e:	9302      	str	r3, [sp, #8]
 8000770:	1d08      	adds	r0, r1, #4
 8000772:	6809      	ldr	r1, [r1, #0]
 8000774:	9005      	str	r0, [sp, #20]
 8000776:	220a      	movs	r2, #10
 8000778:	4630      	mov	r0, r6
 800077a:	2300      	movs	r3, #0
 800077c:	e7d7      	b.n	800072e <print+0x96>
				continue;
			}
			if( *format == 'c' ) {
 800077e:	2963      	cmp	r1, #99	; 0x63
 8000780:	d113      	bne.n	80007aa <print+0x112>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000782:	9905      	ldr	r1, [sp, #20]
 8000784:	1d08      	adds	r0, r1, #4
 8000786:	6809      	ldr	r1, [r1, #0]
 8000788:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
 800078c:	2100      	movs	r1, #0
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 800078e:	9005      	str	r0, [sp, #20]
				scr[1] = '\0';
 8000790:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
 8000794:	4630      	mov	r0, r6
 8000796:	a907      	add	r1, sp, #28
 8000798:	f7ff fee8 	bl	800056c <prints>
 800079c:	e7c9      	b.n	8000732 <print+0x9a>
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 800079e:	4615      	mov	r5, r2
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
 80007a0:	4630      	mov	r0, r6
 80007a2:	7829      	ldrb	r1, [r5, #0]
 80007a4:	f7ff fece 	bl	8000544 <printchar>
			++pc;
 80007a8:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 80007aa:	3501      	adds	r5, #1
 80007ac:	e77a      	b.n	80006a4 <print+0xc>
		}
	}
	if (out) **out = '\0';
	va_end( args );
	return pc;
}
 80007ae:	4620      	mov	r0, r4
 80007b0:	b009      	add	sp, #36	; 0x24
 80007b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b4:	08004fe8 	.word	0x08004fe8

080007b8 <printf>:

int printf(const char *format, ...)
{
 80007b8:	b40f      	push	{r0, r1, r2, r3}
 80007ba:	b507      	push	{r0, r1, r2, lr}
 80007bc:	aa04      	add	r2, sp, #16
        va_list args;
        
        va_start( args, format );
        return print( 0, format, args );
 80007be:	2000      	movs	r0, #0
	va_end( args );
	return pc;
}

int printf(const char *format, ...)
{
 80007c0:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
 80007c4:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
 80007c6:	f7ff ff67 	bl	8000698 <print>
}
 80007ca:	b003      	add	sp, #12
 80007cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80007d0:	b004      	add	sp, #16
 80007d2:	4770      	bx	lr

080007d4 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 80007d4:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80007d6:	4908      	ldr	r1, [pc, #32]	; (80007f8 <fetch_uint32_arg+0x24>)
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 80007d8:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 80007da:	2000      	movs	r0, #0
 80007dc:	f002 ff2a 	bl	8003634 <strtok>
  if(p == NULL) {
 80007e0:	b130      	cbz	r0, 80007f0 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 80007e2:	2100      	movs	r1, #0
 80007e4:	460a      	mov	r2, r1
 80007e6:	f002 fff3 	bl	80037d0 <strtoul>
 80007ea:	6020      	str	r0, [r4, #0]
  return 0;
 80007ec:	2000      	movs	r0, #0
 80007ee:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
  return 0;
}     
 80007f4:	bd10      	pop	{r4, pc}
 80007f6:	bf00      	nop
 80007f8:	08005043 	.word	0x08005043

080007fc <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80007fc:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80007fe:	4906      	ldr	r1, [pc, #24]	; (8000818 <fetch_string_arg+0x1c>)
  return 0;
}     

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8000800:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 8000802:	2000      	movs	r0, #0
 8000804:	f002 ff16 	bl	8003634 <strtok>
  if(p == NULL) {
 8000808:	b110      	cbz	r0, 8000810 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 800080a:	6020      	str	r0, [r4, #0]
  return 0;
 800080c:	2000      	movs	r0, #0
 800080e:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 8000810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = p;
  return 0;
}
 8000814:	bd10      	pop	{r4, pc}
 8000816:	bf00      	nop
 8000818:	08005043 	.word	0x08005043

0800081c <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 800081c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000820:	4680      	mov	r8, r0
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	4692      	mov	sl, r2
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 8000826:	460d      	mov	r5, r1
 8000828:	2900      	cmp	r1, #0
 800082a:	d044      	beq.n	80008b6 <DumpBuffer+0x9a>
 800082c:	ac03      	add	r4, sp, #12
 800082e:	eb00 0901 	add.w	r9, r0, r1
 8000832:	4606      	mov	r6, r0
 8000834:	4627      	mov	r7, r4
 8000836:	ebc8 010a 	rsb	r1, r8, sl

  p = buffer;
  bufp = buf;
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
 800083a:	454e      	cmp	r6, r9
 800083c:	4431      	add	r1, r6
 800083e:	ebc8 0306 	rsb	r3, r8, r6
 8000842:	d025      	beq.n	8000890 <DumpBuffer+0x74>
    if((i% BYTES_PER_LINE) == 0) {
 8000844:	f013 0b0f 	ands.w	fp, r3, #15
 8000848:	d103      	bne.n	8000852 <DumpBuffer+0x36>
      printf("%08x:",(unsigned int)address);
 800084a:	481c      	ldr	r0, [pc, #112]	; (80008bc <DumpBuffer+0xa0>)
 800084c:	f7ff ffb4 	bl	80007b8 <printf>
      bufp = buf;
 8000850:	463c      	mov	r4, r7
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <DumpBuffer+0xa4>)
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
      bufp = buf;
    }
    /* Read the value to print */
    c = *p++;
 8000854:	f816 1b01 	ldrb.w	r1, [r6], #1
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8000858:	681b      	ldr	r3, [r3, #0]
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 800085a:	481a      	ldr	r0, [pc, #104]	; (80008c4 <DumpBuffer+0xa8>)
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 800085c:	440b      	add	r3, r1
 800085e:	785b      	ldrb	r3, [r3, #1]
 8000860:	f013 0f97 	tst.w	r3, #151	; 0x97
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 8000864:	bf08      	it	eq
 8000866:	222e      	moveq	r2, #46	; 0x2e
 8000868:	f104 0301 	add.w	r3, r4, #1
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
      *bufp++ = c; /* Stick in the character */
 800086c:	bf14      	ite	ne
 800086e:	7021      	strbne	r1, [r4, #0]
    } else {
      *bufp++ = '.';
 8000870:	7022      	strbeq	r2, [r4, #0]
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	461c      	mov	r4, r3
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8000876:	f7ff ff9f 	bl	80007b8 <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 800087a:	f1bb 0f0f 	cmp.w	fp, #15
 800087e:	9b01      	ldr	r3, [sp, #4]
 8000880:	d1d9      	bne.n	8000836 <DumpBuffer+0x1a>
      *bufp = '\0';  /* NULL terminate buffer */
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 8000886:	4639      	mov	r1, r7
 8000888:	480f      	ldr	r0, [pc, #60]	; (80008c8 <DumpBuffer+0xac>)
 800088a:	f7ff ff95 	bl	80007b8 <printf>
 800088e:	e7d2      	b.n	8000836 <DumpBuffer+0x1a>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8000890:	2300      	movs	r3, #0
  if(count % BYTES_PER_LINE) {
 8000892:	f015 050f 	ands.w	r5, r5, #15
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8000896:	7023      	strb	r3, [r4, #0]
  if(count % BYTES_PER_LINE) {
 8000898:	d00d      	beq.n	80008b6 <DumpBuffer+0x9a>
 800089a:	461c      	mov	r4, r3
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800089c:	f1c5 0310 	rsb	r3, r5, #16
 80008a0:	429c      	cmp	r4, r3
 80008a2:	d204      	bcs.n	80008ae <DumpBuffer+0x92>
      printf("   ");
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <DumpBuffer+0xb0>)
 80008a6:	f7ff ff87 	bl	80007b8 <printf>
  }

  /* dump out to EOL */
  *bufp='\0';
  if(count % BYTES_PER_LINE) {
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80008aa:	3401      	adds	r4, #1
 80008ac:	e7f6      	b.n	800089c <DumpBuffer+0x80>
      printf("   ");
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <DumpBuffer+0xac>)
 80008b0:	4639      	mov	r1, r7
 80008b2:	f7ff ff81 	bl	80007b8 <printf>
  }



}
 80008b6:	b009      	add	sp, #36	; 0x24
 80008b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008bc:	080050d3 	.word	0x080050d3
 80008c0:	2000001c 	.word	0x2000001c
 80008c4:	080050d9 	.word	0x080050d9
 80008c8:	080050df 	.word	0x080050df
 80008cc:	080050e5 	.word	0x080050e5

080008d0 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 80008d0:	2801      	cmp	r0, #1


}

void CmdDump(int action)
{
 80008d2:	b538      	push	{r3, r4, r5, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 80008d4:	d01d      	beq.n	8000912 <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 80008d6:	2802      	cmp	r0, #2
 80008d8:	4c0e      	ldr	r4, [pc, #56]	; (8000914 <CmdDump+0x44>)
 80008da:	4d0f      	ldr	r5, [pc, #60]	; (8000918 <CmdDump+0x48>)
 80008dc:	d109      	bne.n	80008f2 <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 80008de:	480f      	ldr	r0, [pc, #60]	; (800091c <CmdDump+0x4c>)
 80008e0:	f002 fe50 	bl	8003584 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80008e4:	6821      	ldr	r1, [r4, #0]
 80008e6:	682a      	ldr	r2, [r5, #0]
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 80008ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80008ee:	f7ff bf63 	b.w	80007b8 <printf>
	   (unsigned int)address, (unsigned int)count);
    return;
  }

  /* Fetch address, defaut to last address if missing */
  rc = fetch_uint32_arg(&address);
 80008f2:	4620      	mov	r0, r4
 80008f4:	f7ff ff6e 	bl	80007d4 <fetch_uint32_arg>
  if(rc == 0) {
 80008f8:	b910      	cbnz	r0, 8000900 <CmdDump+0x30>
    /* Fetch count, default to last count if missing */
    fetch_uint32_arg(&count);
 80008fa:	4628      	mov	r0, r5
 80008fc:	f7ff ff6a 	bl	80007d4 <fetch_uint32_arg>
  }

  DumpBuffer((uint8_t *)address, count, address);
 8000900:	6820      	ldr	r0, [r4, #0]
 8000902:	6829      	ldr	r1, [r5, #0]
 8000904:	4602      	mov	r2, r0
 8000906:	f7ff ff89 	bl	800081c <DumpBuffer>
  /* Update parameters for next time */
  address = address+count;
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	682a      	ldr	r2, [r5, #0]
 800090e:	4413      	add	r3, r2
 8000910:	6023      	str	r3, [r4, #0]
 8000912:	bd38      	pop	{r3, r4, r5, pc}
 8000914:	2000087c 	.word	0x2000087c
 8000918:	20000000 	.word	0x20000000
 800091c:	080050e9 	.word	0x080050e9
 8000920:	08005281 	.word	0x08005281

08000924 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8000924:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <_sbrk_r+0x2c>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	b90a      	cbnz	r2, 8000930 <_sbrk_r+0xc>
                heap_end = &end;
 800092c:	4a09      	ldr	r2, [pc, #36]	; (8000954 <_sbrk_r+0x30>)
 800092e:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 8000930:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 8000932:	466b      	mov	r3, sp
 8000934:	4401      	add	r1, r0
 8000936:	4299      	cmp	r1, r3
 8000938:	d906      	bls.n	8000948 <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 800093a:	f002 fd55 	bl	80033e8 <__errno>
 800093e:	230c      	movs	r3, #12
 8000940:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 8000942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000946:	bd08      	pop	{r3, pc}
        }

        heap_end += incr;
 8000948:	4b01      	ldr	r3, [pc, #4]	; (8000950 <_sbrk_r+0x2c>)
 800094a:	6019      	str	r1, [r3, #0]

        return (caddr_t) prev_heap_end;
}
 800094c:	bd08      	pop	{r3, pc}
 800094e:	bf00      	nop
 8000950:	20000880 	.word	0x20000880
 8000954:	20007694 	.word	0x20007694

08000958 <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 8000958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800095c:	4770      	bx	lr

0800095e <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 800095e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000962:	6053      	str	r3, [r2, #4]
        return 0;
}
 8000964:	2000      	movs	r0, #0
 8000966:	4770      	bx	lr

08000968 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8000968:	2001      	movs	r0, #1
 800096a:	4770      	bx	lr

0800096c <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 800096c:	2000      	movs	r0, #0
 800096e:	4770      	bx	lr

08000970 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8000970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8000974:	4604      	mov	r4, r0

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8000976:	b085      	sub	sp, #20
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8000978:	b9e8      	cbnz	r0, 80009b6 <CmdStats+0x46>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097a:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 800097c:	480f      	ldr	r0, [pc, #60]	; (80009bc <CmdStats+0x4c>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800097e:	4621      	mov	r1, r4
  if(mode != CMD_INTERACTIVE) return;

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8000980:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 8000984:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
 8000988:	f8d0 9118 	ldr.w	r9, [r0, #280]	; 0x118
 800098c:	f8d0 811c 	ldr.w	r8, [r0, #284]	; 0x11c
 8000990:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8000994:	2214      	movs	r2, #20
 8000996:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800099a:	f002 fd69 	bl	8003470 <memset>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800099e:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <CmdStats+0x50>)
 80009a2:	f8cd 9000 	str.w	r9, [sp]
 80009a6:	f8cd 8004 	str.w	r8, [sp, #4]
 80009aa:	9702      	str	r7, [sp, #8]
 80009ac:	4621      	mov	r1, r4
 80009ae:	4632      	mov	r2, r6
 80009b0:	462b      	mov	r3, r5
 80009b2:	f7ff ff01 	bl	80007b8 <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 80009b6:	b005      	add	sp, #20
 80009b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009bc:	20000884 	.word	0x20000884
 80009c0:	080052d1 	.word	0x080052d1

080009c4 <TerminalRead>:

/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(uint32_t index, uint8_t *ptr, uint32_t len)
{
 80009c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c6:	b672      	cpsid	i
 80009c8:	440a      	add	r2, r1
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 80009ca:	460e      	mov	r6, r1
 80009cc:	4f0f      	ldr	r7, [pc, #60]	; (8000a0c <TerminalRead+0x48>)
 80009ce:	f44f 7592 	mov.w	r5, #292	; 0x124
 80009d2:	4345      	muls	r5, r0
 80009d4:	197c      	adds	r4, r7, r5
 80009d6:	3480      	adds	r4, #128	; 0x80
 80009d8:	88a3      	ldrh	r3, [r4, #4]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	ebc1 0e06 	rsb	lr, r1, r6
 80009e0:	b183      	cbz	r3, 8000a04 <TerminalRead+0x40>
 80009e2:	4296      	cmp	r6, r2
 80009e4:	d00e      	beq.n	8000a04 <TerminalRead+0x40>
    tail   = TerminalState[index].inTail;
 80009e6:	8863      	ldrh	r3, [r4, #2]
 80009e8:	b29b      	uxth	r3, r3
    *ptr++ = TerminalState[index].inBuffer[tail];
 80009ea:	441d      	add	r5, r3
    TerminalState[index].inTail = TERMINALINCR(tail);
 80009ec:	3301      	adds	r3, #1
  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
    tail   = TerminalState[index].inTail;
    *ptr++ = TerminalState[index].inBuffer[tail];
 80009ee:	5d7d      	ldrb	r5, [r7, r5]
 80009f0:	f806 5b01 	strb.w	r5, [r6], #1
    TerminalState[index].inTail = TERMINALINCR(tail);
 80009f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009f8:	8063      	strh	r3, [r4, #2]
    TerminalState[index].inCount--;
 80009fa:	88a3      	ldrh	r3, [r4, #4]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	80a3      	strh	r3, [r4, #4]
 8000a02:	e7e3      	b.n	80009cc <TerminalRead+0x8>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000a04:	b662      	cpsie	i
  /* Critical section end */
  __enable_irq();

  return count;

}
 8000a06:	4670      	mov	r0, lr
 8000a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000884 	.word	0x20000884

08000a10 <_read_r>:
}

int _read_r( void *r, int fd, char *ptr, int len )
{
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8000a10:	4611      	mov	r1, r2
 8000a12:	2000      	movs	r0, #0
 8000a14:	461a      	mov	r2, r3
 8000a16:	f7ff bfd5 	b.w	80009c4 <TerminalRead>
	...

08000a1c <TerminalOutputBufferWrite>:

/* Write a block to the given terminal buffer, assume interrupts can
 * be disabled.
 */
 uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8000a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1e:	4e37      	ldr	r6, [pc, #220]	; (8000afc <TerminalOutputBufferWrite+0xe0>)
 8000a20:	f44f 7392 	mov.w	r3, #292	; 0x124
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8000a24:	2a7f      	cmp	r2, #127	; 0x7f
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8000a26:	fb03 6300 	mla	r3, r3, r0, r6
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8000a2a:	d906      	bls.n	8000a3a <TerminalOutputBufferWrite+0x1e>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8000a2c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8000a30:	3201      	adds	r2, #1
 8000a32:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 8000a36:	2001      	movs	r0, #1
 8000a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8000a3a:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8000a3e:	fa12 f484 	uxtah	r4, r2, r4
 8000a42:	2c7f      	cmp	r4, #127	; 0x7f
    /* Keep track of how many times we block */
    TerminalState[index].stats.writeBlocked++;
 8000a44:	bf82      	ittt	hi
 8000a46:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 8000a4a:	3401      	addhi	r4, #1
 8000a4c:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  }

  /* Block until there is room in the buffer */
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 8000a50:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000a54:	fb03 6300 	mla	r3, r3, r0, r6
 8000a58:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8000a5c:	fa12 f484 	uxtah	r4, r2, r4
 8000a60:	2c7f      	cmp	r4, #127	; 0x7f
 8000a62:	d8f5      	bhi.n	8000a50 <TerminalOutputBufferWrite+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i

  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
 8000a66:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8000a6a:	4414      	add	r4, r2
 8000a6c:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
 8000a70:	440a      	add	r2, r1
  while((len != 0) 
 8000a72:	4291      	cmp	r1, r2
 8000a74:	d01c      	beq.n	8000ab0 <TerminalOutputBufferWrite+0x94>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8000a76:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000a7a:	fb03 6300 	mla	r3, r3, r0, r6
 8000a7e:	f503 7584 	add.w	r5, r3, #264	; 0x108
 8000a82:	886c      	ldrh	r4, [r5, #2]
 8000a84:	b2a4      	uxth	r4, r4
 8000a86:	2c7f      	cmp	r4, #127	; 0x7f
 8000a88:	d812      	bhi.n	8000ab0 <TerminalOutputBufferWrite+0x94>
    head = TerminalState[index].outHead;
 8000a8a:	f8b3 4106 	ldrh.w	r4, [r3, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8000a8e:	f811 eb01 	ldrb.w	lr, [r1], #1
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	f503 7780 	add.w	r7, r3, #256	; 0x100
    TerminalState[index].outBuffer[head] = *p++;
 8000a98:	4423      	add	r3, r4
    TerminalState[index].outHead = TERMINALINCR(head);
 8000a9a:	3401      	adds	r4, #1
 8000a9c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8000aa0:	80fc      	strh	r4, [r7, #6]
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
    TerminalState[index].outBuffer[head] = *p++;
 8000aa2:	f883 e086 	strb.w	lr, [r3, #134]	; 0x86
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
 8000aa6:	886b      	ldrh	r3, [r5, #2]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	806b      	strh	r3, [r5, #2]
 8000aae:	e7e0      	b.n	8000a72 <TerminalOutputBufferWrite+0x56>
    len--;
  }
  
  /* Trigger output from this buffer */
  tail = TerminalState[index].outTail;
 8000ab0:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000ab4:	fb03 6300 	mla	r3, r3, r0, r6
 8000ab8:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8000abc:	b295      	uxth	r5, r2
  count = TerminalState[index].outCount;
 8000abe:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8000ac2:	b292      	uxth	r2, r2
  /* Only allow a transfer to the end of the buffer */
  if((count + tail) >= TERMINALBUFFERSIZE) {
 8000ac4:	1953      	adds	r3, r2, r5
 8000ac6:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 8000ac8:	bf88      	it	hi
 8000aca:	f1c5 0280 	rsbhi	r2, r5, #128	; 0x80
  }
  switch(index) {
 8000ace:	b990      	cbnz	r0, 8000af6 <TerminalOutputBufferWrite+0xda>
    }
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 8000ad0:	4f0b      	ldr	r7, [pc, #44]	; (8000b00 <TerminalOutputBufferWrite+0xe4>)
 8000ad2:	f897 31fc 	ldrb.w	r3, [r7, #508]	; 0x1fc
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d10d      	bne.n	8000af6 <TerminalOutputBufferWrite+0xda>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8000ada:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8000adc:	1971      	adds	r1, r6, r5
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8000ade:	4638      	mov	r0, r7
 8000ae0:	3186      	adds	r1, #134	; 0x86
 8000ae2:	4622      	mov	r2, r4
 8000ae4:	f001 fb43 	bl	800216e <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 8000ae8:	4638      	mov	r0, r7
 8000aea:	f001 fb48 	bl	800217e <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8000aee:	b910      	cbnz	r0, 8000af6 <TerminalOutputBufferWrite+0xda>
	/* CDC was not busy, and we are now sending */
	TerminalState[index].outSending = count;
 8000af0:	4b02      	ldr	r3, [pc, #8]	; (8000afc <TerminalOutputBufferWrite+0xe0>)
 8000af2:	f8a3 410c 	strh.w	r4, [r3, #268]	; 0x10c
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000af6:	b662      	cpsie	i
 8000af8:	2000      	movs	r0, #0
    

  /* Critical section end */
  __enable_irq();
  return 0;
}
 8000afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000afc:	20000884 	.word	0x20000884
 8000b00:	200072f4 	.word	0x200072f4

08000b04 <_write_r>:
#endif

}

int _write_r(void *reent, int fd, char *ptr, size_t len)
{
 8000b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b06:	461d      	mov	r5, r3
 8000b08:	4614      	mov	r4, r2
 8000b0a:	18d7      	adds	r7, r2, r3
  uint32_t count;
  /* Frob buffer to add appropriate carriage returns and newlines */
  count = len;
  while(count != 0) {
 8000b0c:	42bc      	cmp	r4, r7
 8000b0e:	4626      	mov	r6, r4
 8000b10:	d00f      	beq.n	8000b32 <_write_r+0x2e>
    if(*ptr == '\n') {
 8000b12:	7833      	ldrb	r3, [r6, #0]
 8000b14:	2b0a      	cmp	r3, #10
 8000b16:	f104 0401 	add.w	r4, r4, #1
 8000b1a:	d104      	bne.n	8000b26 <_write_r+0x22>
      /* XXX handle buffer overflow */
#ifdef USE_UART
      TerminalOutputBufferWrite(INDEX_UART,"\r",1);
#endif
#ifdef USE_USB
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	4906      	ldr	r1, [pc, #24]	; (8000b38 <_write_r+0x34>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	f7ff ff7b 	bl	8000a1c <TerminalOutputBufferWrite>
    }
#ifdef USE_UART
    TerminalOutputBufferWrite(INDEX_UART,ptr,1);
#endif
#ifdef USE_USB
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 8000b26:	4631      	mov	r1, r6
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff ff76 	bl	8000a1c <TerminalOutputBufferWrite>
 8000b30:	e7ec      	b.n	8000b0c <_write_r+0x8>
    /* Transfer error in transmission process */
    Error_Handler();
  }
#endif
  return len;
}
 8000b32:	4628      	mov	r0, r5
 8000b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b36:	bf00      	nop
 8000b38:	08005048 	.word	0x08005048

08000b3c <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
#elif defined (USE_USB_INTERRUPT_REMAPPED)
void USB_LP_IRQHandler(void)
#endif
{
  HAL_PCD_IRQHandler(&hpcd);
 8000b3c:	4801      	ldr	r0, [pc, #4]	; (8000b44 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8000b3e:	f000 bd32 	b.w	80015a6 <HAL_PCD_IRQHandler>
 8000b42:	bf00      	nop
 8000b44:	2000751c 	.word	0x2000751c

08000b48 <DecodeReadRegister>:
#include "decoder.h"


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8000b48:	b510      	push	{r4, lr}
 8000b4a:	460b      	mov	r3, r1
  uint32_t address, val;

  if(p == NULL) return 0;
 8000b4c:	4604      	mov	r4, r0
 8000b4e:	b1b0      	cbz	r0, 8000b7e <DecodeReadRegister+0x36>
  if(r == NULL) return 0;
 8000b50:	b1b1      	cbz	r1, 8000b80 <DecodeReadRegister+0x38>
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000b52:	8888      	ldrh	r0, [r1, #4]

  /* read register according to size */
  switch(r->size) {
 8000b54:	7989      	ldrb	r1, [r1, #6]

  if(p == NULL) return 0;
  if(r == NULL) return 0;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000b56:	6862      	ldr	r2, [r4, #4]

  /* read register according to size */
  switch(r->size) {
 8000b58:	2910      	cmp	r1, #16
 8000b5a:	d005      	beq.n	8000b68 <DecodeReadRegister+0x20>
 8000b5c:	2920      	cmp	r1, #32
 8000b5e:	d005      	beq.n	8000b6c <DecodeReadRegister+0x24>
 8000b60:	2908      	cmp	r1, #8
 8000b62:	d105      	bne.n	8000b70 <DecodeReadRegister+0x28>
  case 8:
    val = *(uint8_t *)address;
 8000b64:	5c80      	ldrb	r0, [r0, r2]
    break;
 8000b66:	bd10      	pop	{r4, pc}
  case 16:
    val = *(uint16_t *)address;
 8000b68:	5a80      	ldrh	r0, [r0, r2]
    break;  
 8000b6a:	bd10      	pop	{r4, pc}
  case 32:
    val = *(uint32_t *)address;
 8000b6c:	5880      	ldr	r0, [r0, r2]
    break;
 8000b6e:	bd10      	pop	{r4, pc}
  default:
    printf("Invalid size 0x%x for register %s in periphral %s!\n",
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4804      	ldr	r0, [pc, #16]	; (8000b84 <DecodeReadRegister+0x3c>)
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	f7ff fe1f 	bl	80007b8 <printf>
	   (unsigned int)r->size,
	   r->name,
	   p->name);
    return 0;
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	bd10      	pop	{r4, pc}
 8000b7e:	bd10      	pop	{r4, pc}
/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
  uint32_t address, val;

  if(p == NULL) return 0;
 8000b80:	4608      	mov	r0, r1
	   r->name,
	   p->name);
    return 0;
  }
  return val;
}
 8000b82:	bd10      	pop	{r4, pc}
 8000b84:	0800537b 	.word	0x0800537b

08000b88 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8000b88:	b538      	push	{r3, r4, r5, lr}
 8000b8a:	460b      	mov	r3, r1
  uint32_t address;

  if(p == NULL) return 1;
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	b1a8      	cbz	r0, 8000bbc <DecodeWriteRegister+0x34>
  if(r == NULL) return 1;
 8000b90:	b1a1      	cbz	r1, 8000bbc <DecodeWriteRegister+0x34>
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000b92:	888d      	ldrh	r5, [r1, #4]

  /* read register according to size */
  switch(r->size) {
 8000b94:	7989      	ldrb	r1, [r1, #6]

  if(p == NULL) return 1;
  if(r == NULL) return 1;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000b96:	6840      	ldr	r0, [r0, #4]

  /* read register according to size */
  switch(r->size) {
 8000b98:	2910      	cmp	r1, #16
 8000b9a:	d005      	beq.n	8000ba8 <DecodeWriteRegister+0x20>
 8000b9c:	2920      	cmp	r1, #32
 8000b9e:	d005      	beq.n	8000bac <DecodeWriteRegister+0x24>
 8000ba0:	2908      	cmp	r1, #8
 8000ba2:	d106      	bne.n	8000bb2 <DecodeWriteRegister+0x2a>
  case 8:
    *(uint8_t *)address = val;
 8000ba4:	542a      	strb	r2, [r5, r0]
 8000ba6:	e002      	b.n	8000bae <DecodeWriteRegister+0x26>
    break;
  case 16:
    *(uint16_t *)address = val;
 8000ba8:	522a      	strh	r2, [r5, r0]
 8000baa:	e000      	b.n	8000bae <DecodeWriteRegister+0x26>
    break;  
  case 32:
    *(uint32_t *)address = val;
 8000bac:	502a      	str	r2, [r5, r0]
	   (unsigned int)r->size,
	   r->name,
	   p->name);
    return 1;
  }
  return 0;
 8000bae:	2000      	movs	r0, #0
  case 16:
    *(uint16_t *)address = val;
    break;  
  case 32:
    *(uint32_t *)address = val;
    break;
 8000bb0:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s in periphral %s!\n",
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <DecodeWriteRegister+0x38>)
 8000bb6:	6823      	ldr	r3, [r4, #0]
 8000bb8:	f7ff fdfe 	bl	80007b8 <printf>
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
 8000bbc:	2001      	movs	r0, #1
	   r->name,
	   p->name);
    return 1;
  }
  return 0;
}
 8000bbe:	bd38      	pop	{r3, r4, r5, pc}
 8000bc0:	0800537b 	.word	0x0800537b

08000bc4 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8000bc4:	b530      	push	{r4, r5, lr}
 8000bc6:	b085      	sub	sp, #20
  uint32_t v;
  if(f == NULL) return;
 8000bc8:	b198      	cbz	r0, 8000bf2 <DecodeField+0x2e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8000bca:	7944      	ldrb	r4, [r0, #5]
 8000bcc:	7905      	ldrb	r5, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <DecodeField+0x34>)
void DecodeField(const Field_t *f, uint32_t val)
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	40a2      	lsls	r2, r4
 8000bd4:	40e9      	lsrs	r1, r5
 8000bd6:	3a01      	subs	r2, #1
 8000bd8:	400a      	ands	r2, r1
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8000bda:	6801      	ldr	r1, [r0, #0]
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <DecodeField+0x38>)
 8000bde:	9400      	str	r4, [sp, #0]
 8000be0:	2c01      	cmp	r4, #1
 8000be2:	bf98      	it	ls
 8000be4:	4603      	movls	r3, r0
 8000be6:	9301      	str	r3, [sp, #4]
 8000be8:	9502      	str	r5, [sp, #8]
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <DecodeField+0x3c>)
 8000bec:	4613      	mov	r3, r2
 8000bee:	f7ff fde3 	bl	80007b8 <printf>
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8000bf2:	b005      	add	sp, #20
 8000bf4:	bd30      	pop	{r4, r5, pc}
 8000bf6:	bf00      	nop
 8000bf8:	080053af 	.word	0x080053af
 8000bfc:	080053b5 	.word	0x080053b5
 8000c00:	080053bb 	.word	0x080053bb

08000c04 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8000c04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c06:	4616      	mov	r6, r2
 8000c08:	461d      	mov	r5, r3
  Field_t const *f;
  
  if(r == NULL) return;
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	b1d8      	cbz	r0, 8000c46 <DecodeRegister+0x42>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8000c0e:	7983      	ldrb	r3, [r0, #6]
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	8883      	ldrh	r3, [r0, #4]
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <DecodeRegister+0x48>)
	 r->name,
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8000c16:	4419      	add	r1, r3
  Field_t const *f;
  
  if(r == NULL) return;

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8000c18:	9101      	str	r1, [sp, #4]
 8000c1a:	6821      	ldr	r1, [r4, #0]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	f7ff fdcb 	bl	80007b8 <printf>
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8000c22:	68a4      	ldr	r4, [r4, #8]
 8000c24:	b144      	cbz	r4, 8000c38 <DecodeRegister+0x34>
 8000c26:	b175      	cbz	r5, 8000c46 <DecodeRegister+0x42>
    for(f = r->fields; f->name != NULL; f++) {
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	b133      	cbz	r3, 8000c3a <DecodeRegister+0x36>
      DecodeField(f,val);
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4631      	mov	r1, r6
 8000c30:	f7ff ffc8 	bl	8000bc4 <DecodeField>
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
    for(f = r->fields; f->name != NULL; f++) {
 8000c34:	3408      	adds	r4, #8
 8000c36:	e7f7      	b.n	8000c28 <DecodeRegister+0x24>
      DecodeField(f,val);
    }
  }
  if(decodeFields) {
 8000c38:	b12d      	cbz	r5, 8000c46 <DecodeRegister+0x42>
    printf("\n");
 8000c3a:	200a      	movs	r0, #10
  }

}
 8000c3c:	b002      	add	sp, #8
 8000c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    for(f = r->fields; f->name != NULL; f++) {
      DecodeField(f,val);
    }
  }
  if(decodeFields) {
    printf("\n");
 8000c42:	f002 bc63 	b.w	800350c <putchar>
  }

}
 8000c46:	b002      	add	sp, #8
 8000c48:	bd70      	pop	{r4, r5, r6, pc}
 8000c4a:	bf00      	nop
 8000c4c:	080053e4 	.word	0x080053e4

08000c50 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;

  if(p == NULL) return;
 8000c54:	4605      	mov	r5, r0
 8000c56:	b1a8      	cbz	r0, 8000c84 <DecodePeripheral+0x34>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8000c58:	480b      	ldr	r0, [pc, #44]	; (8000c88 <DecodePeripheral+0x38>)
 8000c5a:	e895 0006 	ldmia.w	r5, {r1, r2}
 8000c5e:	f7ff fdab 	bl	80007b8 <printf>
	 p->name,  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8000c62:	68ac      	ldr	r4, [r5, #8]
 8000c64:	b904      	cbnz	r4, 8000c68 <DecodePeripheral+0x18>
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
    for(r = p->registers; r->name != NULL; r++) {
 8000c68:	6823      	ldr	r3, [r4, #0]
 8000c6a:	b15b      	cbz	r3, 8000c84 <DecodePeripheral+0x34>
      /* Read value */
      val = DecodeReadRegister(p,r);
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f7ff ff6a 	bl	8000b48 <DecodeReadRegister>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8000c74:	6869      	ldr	r1, [r5, #4]

  /* Dump out registers */
  if(p->registers != NULL) {
    for(r = p->registers; r->name != NULL; r++) {
      /* Read value */
      val = DecodeReadRegister(p,r);
 8000c76:	4602      	mov	r2, r0
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8000c78:	4633      	mov	r3, r6
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f7ff ffc2 	bl	8000c04 <DecodeRegister>
  printf("Peripheral %-13s: Base address: 0x%08x\n",
	 p->name,  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
    for(r = p->registers; r->name != NULL; r++) {
 8000c80:	340c      	adds	r4, #12
 8000c82:	e7f1      	b.n	8000c68 <DecodePeripheral+0x18>
 8000c84:	bd70      	pop	{r4, r5, r6, pc}
 8000c86:	bf00      	nop
 8000c88:	0800541f 	.word	0x0800541f

08000c8c <DecodePrintPeripherals>:
  }
}

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8000c8c:	b538      	push	{r3, r4, r5, lr}
 8000c8e:	4605      	mov	r5, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8000c90:	2009      	movs	r0, #9
 8000c92:	f002 fc3b 	bl	800350c <putchar>

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
 8000c96:	2408      	movs	r4, #8
  printf("\t");
  for(; p->name != NULL; p++) {
 8000c98:	6829      	ldr	r1, [r5, #0]
 8000c9a:	b189      	cbz	r1, 8000cc0 <DecodePrintPeripherals+0x34>
    col += printf("%s",p->name);
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <DecodePrintPeripherals+0x38>)
 8000c9e:	f7ff fd8b 	bl	80007b8 <printf>
    if((p+1)->name != NULL) {
 8000ca2:	68eb      	ldr	r3, [r5, #12]
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
    col += printf("%s",p->name);
 8000ca4:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8000ca6:	b14b      	cbz	r3, 8000cbc <DecodePrintPeripherals+0x30>
      col += printf(", ");
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <DecodePrintPeripherals+0x3c>)
 8000caa:	f7ff fd85 	bl	80007b8 <printf>
 8000cae:	4404      	add	r4, r0
      if(col > 70) {
 8000cb0:	2c46      	cmp	r4, #70	; 0x46
 8000cb2:	d903      	bls.n	8000cbc <DecodePrintPeripherals+0x30>
	col = 8;
	printf("\n\t");
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <DecodePrintPeripherals+0x40>)
 8000cb6:	f7ff fd7f 	bl	80007b8 <printf>
  for(; p->name != NULL; p++) {
    col += printf("%s",p->name);
    if((p+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8000cba:	2408      	movs	r4, #8
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
 8000cbc:	350c      	adds	r5, #12
 8000cbe:	e7eb      	b.n	8000c98 <DecodePrintPeripherals+0xc>
	col = 8;
	printf("\n\t");
      }
    }
  }
}
 8000cc0:	bd38      	pop	{r3, r4, r5, pc}
 8000cc2:	bf00      	nop
 8000cc4:	080050d0 	.word	0x080050d0
 8000cc8:	080053b8 	.word	0x080053b8
 8000ccc:	08005447 	.word	0x08005447

08000cd0 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r) {
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4605      	mov	r5, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8000cd4:	2009      	movs	r0, #9
 8000cd6:	f002 fc19 	bl	800350c <putchar>
  }
}

void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
 8000cda:	2408      	movs	r4, #8
  printf("\t");
  for(; r->name != NULL; r++) {
 8000cdc:	6829      	ldr	r1, [r5, #0]
 8000cde:	b199      	cbz	r1, 8000d08 <DecodePrintRegisters+0x38>
    col += printf("%s",r->name);
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <DecodePrintRegisters+0x3c>)
 8000ce2:	f7ff fd69 	bl	80007b8 <printf>
    if((r+1)->name != NULL) {
 8000ce6:	68eb      	ldr	r3, [r5, #12]
void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
  printf("\t");
  for(; r->name != NULL; r++) {
    col += printf("%s",r->name);
 8000ce8:	4420      	add	r0, r4
 8000cea:	b2c4      	uxtb	r4, r0
    if((r+1)->name != NULL) {
 8000cec:	b153      	cbz	r3, 8000d04 <DecodePrintRegisters+0x34>
      col += printf(", ");
 8000cee:	4808      	ldr	r0, [pc, #32]	; (8000d10 <DecodePrintRegisters+0x40>)
 8000cf0:	f7ff fd62 	bl	80007b8 <printf>
 8000cf4:	4420      	add	r0, r4
 8000cf6:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8000cf8:	2c46      	cmp	r4, #70	; 0x46
 8000cfa:	d903      	bls.n	8000d04 <DecodePrintRegisters+0x34>
	col = 8;
	printf("\n\t");
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <DecodePrintRegisters+0x44>)
 8000cfe:	f7ff fd5b 	bl	80007b8 <printf>
  for(; r->name != NULL; r++) {
    col += printf("%s",r->name);
    if((r+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8000d02:	2408      	movs	r4, #8

void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
  printf("\t");
  for(; r->name != NULL; r++) {
 8000d04:	350c      	adds	r5, #12
 8000d06:	e7e9      	b.n	8000cdc <DecodePrintRegisters+0xc>
	col = 8;
	printf("\n\t");
      }
    }
  }
}
 8000d08:	bd38      	pop	{r3, r4, r5, pc}
 8000d0a:	bf00      	nop
 8000d0c:	080050d0 	.word	0x080050d0
 8000d10:	080053b8 	.word	0x080053b8
 8000d14:	08005447 	.word	0x08005447

08000d18 <CmdDecode>:

void CmdDecode(int mode)
{
 8000d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t val,oval,t,m;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8000d1c:	2802      	cmp	r0, #2
    }
  }
}

void CmdDecode(int mode)
{
 8000d1e:	b086      	sub	sp, #24
  uint32_t val,oval,t,m;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8000d20:	d118      	bne.n	8000d54 <CmdDecode+0x3c>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8000d22:	a805      	add	r0, sp, #20
 8000d24:	f7ff fd6a 	bl	80007fc <fetch_string_arg>
    if(rc) {
 8000d28:	b910      	cbnz	r0, 8000d30 <CmdDecode+0x18>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8000d2a:	9e05      	ldr	r6, [sp, #20]
 8000d2c:	4c65      	ldr	r4, [pc, #404]	; (8000ec4 <CmdDecode+0x1ac>)
 8000d2e:	e00d      	b.n	8000d4c <CmdDecode+0x34>
  if(mode == CMD_LONG_HELP) {
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
    if(rc) {
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8000d30:	4865      	ldr	r0, [pc, #404]	; (8000ec8 <CmdDecode+0x1b0>)
 8000d32:	f002 fc27 	bl	8003584 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8000d36:	4863      	ldr	r0, [pc, #396]	; (8000ec4 <CmdDecode+0x1ac>)
 8000d38:	f7ff ffa8 	bl	8000c8c <DecodePrintPeripherals>
      printf("\n\n"
 8000d3c:	4863      	ldr	r0, [pc, #396]	; (8000ecc <CmdDecode+0x1b4>)
 8000d3e:	e036      	b.n	8000dae <CmdDecode+0x96>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8000d40:	4630      	mov	r0, r6
 8000d42:	4629      	mov	r1, r5
 8000d44:	f002 fc26 	bl	8003594 <strcasecmp>
 8000d48:	b308      	cbz	r0, 8000d8e <CmdDecode+0x76>
	p++;
 8000d4a:	340c      	adds	r4, #12
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8000d4c:	6825      	ldr	r5, [r4, #0]
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d1f6      	bne.n	8000d40 <CmdDecode+0x28>
 8000d52:	e014      	b.n	8000d7e <CmdDecode+0x66>
    }
    
    return;
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
 8000d54:	a802      	add	r0, sp, #8
 8000d56:	f7ff fd51 	bl	80007fc <fetch_string_arg>
  if(rc) {
 8000d5a:	b910      	cbnz	r0, 8000d62 <CmdDecode+0x4a>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8000d5c:	9e02      	ldr	r6, [sp, #8]
 8000d5e:	4c59      	ldr	r4, [pc, #356]	; (8000ec4 <CmdDecode+0x1ac>)
 8000d60:	e009      	b.n	8000d76 <CmdDecode+0x5e>
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
  if(rc) {
    /* User did not specify a peripheral name */
    printf("Missing peripheral name, please chose one of:\n\n");
 8000d62:	485b      	ldr	r0, [pc, #364]	; (8000ed0 <CmdDecode+0x1b8>)
 8000d64:	f002 fc0e 	bl	8003584 <puts>
 8000d68:	e01d      	b.n	8000da6 <CmdDecode+0x8e>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	f002 fc12 	bl	8003594 <strcasecmp>
 8000d70:	4605      	mov	r5, r0
 8000d72:	b1f8      	cbz	r0, 8000db4 <CmdDecode+0x9c>
    p++;
 8000d74:	340c      	adds	r4, #12
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8000d76:	6821      	ldr	r1, [r4, #0]
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d1f6      	bne.n	8000d6a <CmdDecode+0x52>
 8000d7c:	e00f      	b.n	8000d9e <CmdDecode+0x86>
	p++;
      }

      if(p->name == NULL) {
	/* No valid peripheral name found */
	printf("%s is not a valid peripheral name\n"
 8000d7e:	4631      	mov	r1, r6
 8000d80:	4854      	ldr	r0, [pc, #336]	; (8000ed4 <CmdDecode+0x1bc>)
 8000d82:	f7ff fd19 	bl	80007b8 <printf>
	       "Valid peripherals are:\n"
	       "\n",
	       n);
      DecodePrintPeripherals(Peripherals);
 8000d86:	484f      	ldr	r0, [pc, #316]	; (8000ec4 <CmdDecode+0x1ac>)
 8000d88:	f7ff ff80 	bl	8000c8c <DecodePrintPeripherals>
	return;
 8000d8c:	e097      	b.n	8000ebe <CmdDecode+0x1a6>
      }
      printf("Valid registers for peripheral %s:\n"
 8000d8e:	4852      	ldr	r0, [pc, #328]	; (8000ed8 <CmdDecode+0x1c0>)
 8000d90:	4629      	mov	r1, r5
 8000d92:	f7ff fd11 	bl	80007b8 <printf>
	     "\n",
	     p->name);
      DecodePrintRegisters(p->registers);
 8000d96:	68a0      	ldr	r0, [r4, #8]
 8000d98:	f7ff ff9a 	bl	8000cd0 <DecodePrintRegisters>
 8000d9c:	e006      	b.n	8000dac <CmdDecode+0x94>
    p++;
  }

  if(p->name == NULL) {
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8000d9e:	484f      	ldr	r0, [pc, #316]	; (8000edc <CmdDecode+0x1c4>)
 8000da0:	4631      	mov	r1, r6
 8000da2:	f7ff fd09 	bl	80007b8 <printf>
	   pname);
    DecodePrintPeripherals(Peripherals);
 8000da6:	4847      	ldr	r0, [pc, #284]	; (8000ec4 <CmdDecode+0x1ac>)
 8000da8:	f7ff ff70 	bl	8000c8c <DecodePrintPeripherals>
    printf("\n\n");
 8000dac:	484c      	ldr	r0, [pc, #304]	; (8000ee0 <CmdDecode+0x1c8>)
 8000dae:	f002 fbe9 	bl	8003584 <puts>
    return;
 8000db2:	e084      	b.n	8000ebe <CmdDecode+0x1a6>
  }
  
  /* See if the user is specifying a register */
  rc = fetch_string_arg(&rname);
 8000db4:	a803      	add	r0, sp, #12
 8000db6:	f7ff fd21 	bl	80007fc <fetch_string_arg>
  if(rc) {
 8000dba:	b110      	cbz	r0, 8000dc2 <CmdDecode+0xaa>
    /* No register name specified, dump whole peripheral */
    DecodePeripheral(p,0);
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	4629      	mov	r1, r5
 8000dc0:	e00f      	b.n	8000de2 <CmdDecode+0xca>
    return;
  }

  /* See if we can find the register in the list. */
  r = p->registers;
 8000dc2:	68a5      	ldr	r5, [r4, #8]
  while((r->name != NULL) && strcasecmp(rname,r->name)) {
 8000dc4:	9e03      	ldr	r6, [sp, #12]
 8000dc6:	6829      	ldr	r1, [r5, #0]
 8000dc8:	4630      	mov	r0, r6
 8000dca:	b121      	cbz	r1, 8000dd6 <CmdDecode+0xbe>
 8000dcc:	f002 fbe2 	bl	8003594 <strcasecmp>
 8000dd0:	b150      	cbz	r0, 8000de8 <CmdDecode+0xd0>
    r++;
 8000dd2:	350c      	adds	r5, #12
 8000dd4:	e7f7      	b.n	8000dc6 <CmdDecode+0xae>
  }

  if(r->name == NULL) {
    /* if the user says 'full' do a full decode */
    if(strcasecmp(rname,"full") == 0) {
 8000dd6:	4943      	ldr	r1, [pc, #268]	; (8000ee4 <CmdDecode+0x1cc>)
 8000dd8:	f002 fbdc 	bl	8003594 <strcasecmp>
 8000ddc:	bb08      	cbnz	r0, 8000e22 <CmdDecode+0x10a>
      DecodePeripheral(p,1);
 8000dde:	4620      	mov	r0, r4
 8000de0:	2101      	movs	r1, #1
 8000de2:	f7ff ff35 	bl	8000c50 <DecodePeripheral>
      return;
 8000de6:	e06a      	b.n	8000ebe <CmdDecode+0x1a6>
    printf("\n\n");
    return;
  }    

  /* Check to see if there is a field name, or integer value to program */
  rc = fetch_string_arg(&fname);
 8000de8:	a804      	add	r0, sp, #16
 8000dea:	f7ff fd07 	bl	80007fc <fetch_string_arg>
  if(rc == 0) {
 8000dee:	b960      	cbnz	r0, 8000e0a <CmdDecode+0xf2>
    /* There was something... see if it matches a field name */
    f = r->fields;
 8000df0:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,f->name)) {
 8000df2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8000df6:	6837      	ldr	r7, [r6, #0]
 8000df8:	2f00      	cmp	r7, #0
 8000dfa:	d043      	beq.n	8000e84 <CmdDecode+0x16c>
 8000dfc:	4640      	mov	r0, r8
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f002 fbc8 	bl	8003594 <strcasecmp>
 8000e04:	b198      	cbz	r0, 8000e2e <CmdDecode+0x116>
      f++;
 8000e06:	3608      	adds	r6, #8
 8000e08:	e7f5      	b.n	8000df6 <CmdDecode+0xde>
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8000e0a:	4629      	mov	r1, r5
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f7ff fe9b 	bl	8000b48 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8000e12:	6861      	ldr	r1, [r4, #4]
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8000e14:	9005      	str	r0, [sp, #20]
 8000e16:	4602      	mov	r2, r0
  DecodeRegister(r,p->base, val,1);
 8000e18:	2301      	movs	r3, #1
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	f7ff fef2 	bl	8000c04 <DecodeRegister>
 8000e20:	e04d      	b.n	8000ebe <CmdDecode+0x1a6>
      DecodePeripheral(p,1);
      return;
    }

    /* No valid register name found */
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8000e22:	4631      	mov	r1, r6
 8000e24:	6822      	ldr	r2, [r4, #0]
 8000e26:	4830      	ldr	r0, [pc, #192]	; (8000ee8 <CmdDecode+0x1d0>)
 8000e28:	f7ff fcc6 	bl	80007b8 <printf>
 8000e2c:	e7b3      	b.n	8000d96 <CmdDecode+0x7e>
    while((f->name != NULL) && strcasecmp(fname,f->name)) {
      f++;
    }
    if(f->name != NULL) {
      /* Matched a field name, look for the value */
      rc = fetch_uint32_arg(&val);
 8000e2e:	a805      	add	r0, sp, #20
 8000e30:	f7ff fcd0 	bl	80007d4 <fetch_uint32_arg>
      if(rc) {
 8000e34:	b110      	cbz	r0, 8000e3c <CmdDecode+0x124>
	/* Unable to locate a value */
	printf("Missing Value to program into register %s\n",
 8000e36:	482d      	ldr	r0, [pc, #180]	; (8000eec <CmdDecode+0x1d4>)
 8000e38:	6829      	ldr	r1, [r5, #0]
 8000e3a:	e032      	b.n	8000ea2 <CmdDecode+0x18a>
	       r->name);
	return;
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f7ff fe82 	bl	8000b48 <DecodeReadRegister>
      /* Create mask */
      m = (1<<f->width)-1;
 8000e44:	7972      	ldrb	r2, [r6, #5]

      oval = (t >> f->offset) & m; /* Save old value */
 8000e46:	f896 e004 	ldrb.w	lr, [r6, #4]

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 8000e4a:	9905      	ldr	r1, [sp, #20]
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	4093      	lsls	r3, r2

      oval = (t >> f->offset) & m; /* Save old value */
 8000e50:	fa20 f70e 	lsr.w	r7, r0, lr
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 8000e54:	3b01      	subs	r3, #1

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 8000e56:	fa03 f20e 	lsl.w	r2, r3, lr
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */
 8000e5a:	401f      	ands	r7, r3

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	fa03 f30e 	lsl.w	r3, r3, lr
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 8000e62:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
      DecodeWriteRegister(p,r,t);
 8000e66:	4629      	mov	r1, r5
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f7ff fe8c 	bl	8000b88 <DecodeWriteRegister>
      printf("%s.%s.%s (%d) -> (%d)\n",
 8000e70:	9b05      	ldr	r3, [sp, #20]
 8000e72:	9700      	str	r7, [sp, #0]
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	6821      	ldr	r1, [r4, #0]
 8000e78:	682a      	ldr	r2, [r5, #0]
 8000e7a:	6833      	ldr	r3, [r6, #0]
 8000e7c:	481c      	ldr	r0, [pc, #112]	; (8000ef0 <CmdDecode+0x1d8>)
 8000e7e:	f7ff fc9b 	bl	80007b8 <printf>
	     p->name, r->name, f->name,
	     (unsigned)oval, (unsigned)val);
      return;
 8000e82:	e01c      	b.n	8000ebe <CmdDecode+0x1a6>

    }
    /* No matching register name, check if this is an integer */
    errno = 0;
 8000e84:	f002 fab0 	bl	80033e8 <__errno>
    val = strtoul(fname,NULL,0);
 8000e88:	4639      	mov	r1, r7
	     (unsigned)oval, (unsigned)val);
      return;

    }
    /* No matching register name, check if this is an integer */
    errno = 0;
 8000e8a:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8000e8c:	463a      	mov	r2, r7
 8000e8e:	9804      	ldr	r0, [sp, #16]
 8000e90:	f002 fc9e 	bl	80037d0 <strtoul>
 8000e94:	9005      	str	r0, [sp, #20]
    if(errno != 0) {
 8000e96:	f002 faa7 	bl	80033e8 <__errno>
 8000e9a:	6803      	ldr	r3, [r0, #0]
 8000e9c:	b123      	cbz	r3, 8000ea8 <CmdDecode+0x190>
      /* Unable to do conversion */
      printf("Invalid number '%s' entered.\n",
 8000e9e:	4815      	ldr	r0, [pc, #84]	; (8000ef4 <CmdDecode+0x1dc>)
 8000ea0:	9904      	ldr	r1, [sp, #16]
 8000ea2:	f7ff fc89 	bl	80007b8 <printf>
	     fname);
      return;
 8000ea6:	e00a      	b.n	8000ebe <CmdDecode+0x1a6>
    }
    /* Write to register */
    DecodeWriteRegister(p,r,val);
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	9a05      	ldr	r2, [sp, #20]
 8000eac:	4620      	mov	r0, r4
 8000eae:	f7ff fe6b 	bl	8000b88 <DecodeWriteRegister>
    printf("%s.%s = 0x%08x\n",
 8000eb2:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <CmdDecode+0x1e0>)
 8000eb4:	6821      	ldr	r1, [r4, #0]
 8000eb6:	682a      	ldr	r2, [r5, #0]
 8000eb8:	9b05      	ldr	r3, [sp, #20]
 8000eba:	f7ff fc7d 	bl	80007b8 <printf>
  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

}
 8000ebe:	b006      	add	sp, #24
 8000ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ec4:	0800f7a4 	.word	0x0800f7a4
 8000ec8:	0800544a 	.word	0x0800544a
 8000ecc:	08005639 	.word	0x08005639
 8000ed0:	0800568e 	.word	0x0800568e
 8000ed4:	0800576a 	.word	0x0800576a
 8000ed8:	080057a5 	.word	0x080057a5
 8000edc:	080057ca 	.word	0x080057ca
 8000ee0:	08005804 	.word	0x08005804
 8000ee4:	08005806 	.word	0x08005806
 8000ee8:	080056bd 	.word	0x080056bd
 8000eec:	080056fa 	.word	0x080056fa
 8000ef0:	08005725 	.word	0x08005725
 8000ef4:	0800573c 	.word	0x0800573c
 8000ef8:	0800575a 	.word	0x0800575a

08000efc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access, UL for unsigned long */
 8000efc:	4915      	ldr	r1, [pc, #84]	; (8000f54 <SystemInit+0x58>)
 8000efe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000f02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <SystemInit+0x5c>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000f14:	6858      	ldr	r0, [r3, #4]
 8000f16:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <SystemInit+0x60>)
 8000f18:	4002      	ands	r2, r0
 8000f1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000f22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f26:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f2e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000f36:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3a:	f022 020f 	bic.w	r2, r2, #15
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000f40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f42:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <SystemInit+0x64>)
 8000f44:	4002      	ands	r2, r0
 8000f46:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f50:	608b      	str	r3, [r1, #8]
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	f87fc00c 	.word	0xf87fc00c
 8000f60:	ff00fccc 	.word	0xff00fccc

08000f64 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <SystemCoreClockUpdate+0x54>)
 8000f66:	4915      	ldr	r1, [pc, #84]	; (8000fbc <SystemCoreClockUpdate+0x58>)
 8000f68:	6853      	ldr	r3, [r2, #4]
 8000f6a:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8000f6e:	2b04      	cmp	r3, #4
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000f70:	b510      	push	{r4, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8000f72:	d001      	beq.n	8000f78 <SystemCoreClockUpdate+0x14>
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d001      	beq.n	8000f7c <SystemCoreClockUpdate+0x18>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
      break;
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <SystemCoreClockUpdate+0x5c>)
 8000f7a:	e012      	b.n	8000fa2 <SystemCoreClockUpdate+0x3e>
      break;
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000f7c:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000f7e:	6850      	ldr	r0, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;

      if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
 8000f80:	03c0      	lsls	r0, r0, #15
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000f82:	bf49      	itett	mi
 8000f84:	6ad0      	ldrmi	r0, [r2, #44]	; 0x2c
      pllmull = ( pllmull >> 18) + 2;

      if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000f86:	480f      	ldrpl	r0, [pc, #60]	; (8000fc4 <SystemCoreClockUpdate+0x60>)
      }
      else
      {
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 8000f88:	4c0d      	ldrmi	r4, [pc, #52]	; (8000fc0 <SystemCoreClockUpdate+0x5c>)
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000f8a:	f000 000f 	andmi.w	r0, r0, #15
      break;
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 8000f8e:	f3c3 4383 	ubfx	r3, r3, #18, #4
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000f92:	bf48      	it	mi
 8000f94:	3001      	addmi	r0, #1
      break;
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 8000f96:	f103 0302 	add.w	r3, r3, #2
      }
      else
      {
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 8000f9a:	bf48      	it	mi
 8000f9c:	fbb4 f0f0 	udivmi	r0, r4, r0
 8000fa0:	4343      	muls	r3, r0
 8000fa2:	600b      	str	r3, [r1, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000fa4:	6853      	ldr	r3, [r2, #4]
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <SystemCoreClockUpdate+0x64>)
 8000fa8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fac:	5cd2      	ldrb	r2, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000fae:	680b      	ldr	r3, [r1, #0]
 8000fb0:	40d3      	lsrs	r3, r2
 8000fb2:	600b      	str	r3, [r1, #0]
 8000fb4:	bd10      	pop	{r4, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	20000014 	.word	0x20000014
 8000fc0:	007a1200 	.word	0x007a1200
 8000fc4:	003d0900 	.word	0x003d0900
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8000fcc:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d00f      	beq.n	8000ff4 <HAL_PCD_SetAddress+0x28>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 8000fda:	b921      	cbnz	r1, 8000fe6 <HAL_PCD_SetAddress+0x1a>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8000fdc:	6803      	ldr	r3, [r0, #0]
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8000fe4:	e001      	b.n	8000fea <HAL_PCD_SetAddress+0x1e>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8000fe6:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 8000fea:	2300      	movs	r3, #0
 8000fec:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	4770      	bx	lr
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8000ff4:	2002      	movs	r0, #2
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8000ffa:	b2cc      	uxtb	r4, r1
 8000ffc:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001000:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8001004:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001008:	bf15      	itete	ne
 800100a:	fb05 0106 	mlane	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800100e:	fb05 0101 	mlaeq	r1, r5, r1, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001012:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001014:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001016:	09e4      	lsrs	r4, r4, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8001018:	700e      	strb	r6, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800101a:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 800101c:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 800101e:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 8001022:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8001024:	2b01      	cmp	r3, #1
 8001026:	f000 8181 	beq.w	800132c <HAL_PCD_EP_Open+0x334>
 800102a:	2301      	movs	r3, #1
 800102c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 8001030:	78cc      	ldrb	r4, [r1, #3]
 8001032:	780a      	ldrb	r2, [r1, #0]
 8001034:	6803      	ldr	r3, [r0, #0]
 8001036:	2c03      	cmp	r4, #3
 8001038:	d82f      	bhi.n	800109a <HAL_PCD_EP_Open+0xa2>
 800103a:	e8df f004 	tbb	[pc, r4]
 800103e:	2202      	.short	0x2202
 8001040:	170d      	.short	0x170d
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8001042:	b212      	sxth	r2, r2
 8001044:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001048:	b2a4      	uxth	r4, r4
 800104a:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 800104e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8001052:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8001056:	e01e      	b.n	8001096 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8001058:	b212      	sxth	r2, r2
 800105a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800105e:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8001062:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8001066:	0424      	lsls	r4, r4, #16
 8001068:	0c24      	lsrs	r4, r4, #16
 800106a:	e014      	b.n	8001096 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 800106c:	b212      	sxth	r2, r2
 800106e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001072:	b2a4      	uxth	r4, r4
 8001074:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8001078:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800107c:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
 8001080:	e009      	b.n	8001096 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8001082:	b212      	sxth	r2, r2
 8001084:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001088:	b2a4      	uxth	r4, r4
 800108a:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 800108e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8001092:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001096:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 800109a:	780a      	ldrb	r2, [r1, #0]
 800109c:	b216      	sxth	r6, r2
 800109e:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 80010a2:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 80010a6:	f024 02f0 	bic.w	r2, r4, #240	; 0xf0
 80010aa:	0512      	lsls	r2, r2, #20
 80010ac:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80010b0:	0d12      	lsrs	r2, r2, #20
 80010b2:	432a      	orrs	r2, r5
 80010b4:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80010b8:	7a8c      	ldrb	r4, [r1, #10]
 80010ba:	780a      	ldrb	r2, [r1, #0]
 80010bc:	2c00      	cmp	r4, #0
 80010be:	d175      	bne.n	80011ac <HAL_PCD_EP_Open+0x1b4>
  {
    if (ep->is_in)
 80010c0:	784d      	ldrb	r5, [r1, #1]
 80010c2:	888c      	ldrh	r4, [r1, #4]
 80010c4:	2608      	movs	r6, #8
 80010c6:	b33d      	cbz	r5, 8001118 <HAL_PCD_EP_Open+0x120>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80010c8:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80010cc:	b2ad      	uxth	r5, r5
 80010ce:	fb16 5202 	smlabb	r2, r6, r2, r5
 80010d2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80010d6:	0864      	lsrs	r4, r4, #1
 80010d8:	0064      	lsls	r4, r4, #1
 80010da:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80010de:	780c      	ldrb	r4, [r1, #0]
 80010e0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80010e4:	0652      	lsls	r2, r2, #25
 80010e6:	d50b      	bpl.n	8001100 <HAL_PCD_EP_Open+0x108>
 80010e8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80010ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010f0:	0512      	lsls	r2, r2, #20
 80010f2:	0d12      	lsrs	r2, r2, #20
 80010f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010f8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80010fc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8001100:	7809      	ldrb	r1, [r1, #0]
 8001102:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001106:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800110a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800110e:	0412      	lsls	r2, r2, #16
 8001110:	0c12      	lsrs	r2, r2, #16
 8001112:	f082 0220 	eor.w	r2, r2, #32
 8001116:	e0fe      	b.n	8001316 <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8001118:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 800111c:	b2bf      	uxth	r7, r7
 800111e:	fb16 7202 	smlabb	r2, r6, r2, r7
 8001122:	3204      	adds	r2, #4
 8001124:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 8001128:	0864      	lsrs	r4, r4, #1
 800112a:	0064      	lsls	r4, r4, #1
 800112c:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8001130:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001134:	780c      	ldrb	r4, [r1, #0]
 8001136:	b292      	uxth	r2, r2
 8001138:	fb16 2204 	smlabb	r2, r6, r4, r2
 800113c:	68ce      	ldr	r6, [r1, #12]
 800113e:	2e3e      	cmp	r6, #62	; 0x3e
 8001140:	f102 0206 	add.w	r2, r2, #6
 8001144:	d90b      	bls.n	800115e <HAL_PCD_EP_Open+0x166>
 8001146:	f3c6 144f 	ubfx	r4, r6, #5, #16
 800114a:	06f7      	lsls	r7, r6, #27
 800114c:	bf04      	itt	eq
 800114e:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8001152:	b2a4      	uxtheq	r4, r4
 8001154:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8001158:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800115c:	e006      	b.n	800116c <HAL_PCD_EP_Open+0x174>
 800115e:	f3c6 044f 	ubfx	r4, r6, #1, #16
 8001162:	07f6      	lsls	r6, r6, #31
 8001164:	bf44      	itt	mi
 8001166:	3401      	addmi	r4, #1
 8001168:	b2a4      	uxthmi	r4, r4
 800116a:	02a4      	lsls	r4, r4, #10
 800116c:	b2a4      	uxth	r4, r4
 800116e:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8001172:	780c      	ldrb	r4, [r1, #0]
 8001174:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001178:	0452      	lsls	r2, r2, #17
 800117a:	d50b      	bpl.n	8001194 <HAL_PCD_EP_Open+0x19c>
 800117c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001180:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001184:	0512      	lsls	r2, r2, #20
 8001186:	0d12      	lsrs	r2, r2, #20
 8001188:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800118c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001190:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8001194:	7809      	ldrb	r1, [r1, #0]
 8001196:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800119a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800119e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011a2:	0412      	lsls	r2, r2, #16
 80011a4:	0c12      	lsrs	r2, r2, #16
 80011a6:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80011aa:	e0b4      	b.n	8001316 <HAL_PCD_EP_Open+0x31e>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80011ac:	b212      	sxth	r2, r2
 80011ae:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 80011b2:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80011b6:	f424 74f8 	bic.w	r4, r4, #496	; 0x1f0
 80011ba:	0524      	lsls	r4, r4, #20
 80011bc:	0d24      	lsrs	r4, r4, #20
 80011be:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80011c2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80011c6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80011ca:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80011ce:	780c      	ldrb	r4, [r1, #0]
 80011d0:	2208      	movs	r2, #8
 80011d2:	b2b6      	uxth	r6, r6
 80011d4:	fb12 6604 	smlabb	r6, r2, r4, r6
 80011d8:	88cc      	ldrh	r4, [r1, #6]
 80011da:	0864      	lsrs	r4, r4, #1
 80011dc:	0064      	lsls	r4, r4, #1
 80011de:	f845 4016 	str.w	r4, [r5, r6, lsl #1]
 80011e2:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80011e6:	780e      	ldrb	r6, [r1, #0]
 80011e8:	b2a4      	uxth	r4, r4
 80011ea:	fb12 4206 	smlabb	r2, r2, r6, r4
 80011ee:	890c      	ldrh	r4, [r1, #8]
 80011f0:	3204      	adds	r2, #4
 80011f2:	0864      	lsrs	r4, r4, #1
 80011f4:	0064      	lsls	r4, r4, #1
 80011f6:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 80011fa:	780c      	ldrb	r4, [r1, #0]
    
    if (ep->is_in==0)
 80011fc:	784a      	ldrb	r2, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80011fe:	b224      	sxth	r4, r4
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
    
    if (ep->is_in==0)
 8001200:	2a00      	cmp	r2, #0
 8001202:	d146      	bne.n	8001292 <HAL_PCD_EP_Open+0x29a>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8001204:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001208:	0457      	lsls	r7, r2, #17
 800120a:	d50b      	bpl.n	8001224 <HAL_PCD_EP_Open+0x22c>
 800120c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001210:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001214:	0512      	lsls	r2, r2, #20
 8001216:	0d12      	lsrs	r2, r2, #20
 8001218:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800121c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001220:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8001224:	780c      	ldrb	r4, [r1, #0]
 8001226:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800122a:	0656      	lsls	r6, r2, #25
 800122c:	d50b      	bpl.n	8001246 <HAL_PCD_EP_Open+0x24e>
 800122e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001232:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001236:	0512      	lsls	r2, r2, #20
 8001238:	0d12      	lsrs	r2, r2, #20
 800123a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800123e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001242:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8001246:	780c      	ldrb	r4, [r1, #0]
 8001248:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800124c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001250:	0512      	lsls	r2, r2, #20
 8001252:	0d12      	lsrs	r2, r2, #20
 8001254:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001258:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800125c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8001260:	780c      	ldrb	r4, [r1, #0]
 8001262:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001266:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800126a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800126e:	0412      	lsls	r2, r2, #16
 8001270:	0c12      	lsrs	r2, r2, #16
 8001272:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8001276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800127a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800127e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8001282:	7809      	ldrb	r1, [r1, #0]
 8001284:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001288:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800128c:	0512      	lsls	r2, r2, #20
 800128e:	0d12      	lsrs	r2, r2, #20
 8001290:	e041      	b.n	8001316 <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8001292:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001296:	0455      	lsls	r5, r2, #17
 8001298:	d50b      	bpl.n	80012b2 <HAL_PCD_EP_Open+0x2ba>
 800129a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800129e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80012a2:	0512      	lsls	r2, r2, #20
 80012a4:	0d12      	lsrs	r2, r2, #20
 80012a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80012aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80012b2:	780c      	ldrb	r4, [r1, #0]
 80012b4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80012b8:	0652      	lsls	r2, r2, #25
 80012ba:	d50b      	bpl.n	80012d4 <HAL_PCD_EP_Open+0x2dc>
 80012bc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80012c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80012c4:	0512      	lsls	r2, r2, #20
 80012c6:	0d12      	lsrs	r2, r2, #20
 80012c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012cc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80012d0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80012d4:	780c      	ldrb	r4, [r1, #0]
 80012d6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80012da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80012de:	0512      	lsls	r2, r2, #20
 80012e0:	0d12      	lsrs	r2, r2, #20
 80012e2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80012e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ea:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80012ee:	780c      	ldrb	r4, [r1, #0]
 80012f0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80012f4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80012f8:	0512      	lsls	r2, r2, #20
 80012fa:	0d12      	lsrs	r2, r2, #20
 80012fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001300:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001304:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8001308:	7809      	ldrb	r1, [r1, #0]
 800130a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800130e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001312:	0492      	lsls	r2, r2, #18
 8001314:	0c92      	lsrs	r2, r2, #18
 8001316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800131a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800131e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8001322:	2300      	movs	r3, #0
 8001324:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 8001328:	4618      	mov	r0, r3
 800132a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 800132c:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 800132e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001330 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001330:	b570      	push	{r4, r5, r6, lr}
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001332:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001336:	241c      	movs	r4, #28
 8001338:	fb04 0401 	mla	r4, r4, r1, r0
 800133c:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
 8001340:	606a      	str	r2, [r5, #4]
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8001342:	2200      	movs	r2, #0
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 8001344:	60ab      	str	r3, [r5, #8]
  ep->xfer_count = 0;
 8001346:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 800134a:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 800134e:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 8001352:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8001356:	2b01      	cmp	r3, #1
 8001358:	d062      	beq.n	8001420 <HAL_PCD_EP_Receive+0xf0>
 800135a:	2301      	movs	r3, #1
 800135c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8001360:	68ab      	ldr	r3, [r5, #8]
 8001362:	f8d4 40c0 	ldr.w	r4, [r4, #192]	; 0xc0
 8001366:	42a3      	cmp	r3, r4
    ep->xfer_len-=len; 
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0;
 8001368:	bf98      	it	ls
 800136a:	60aa      	strls	r2, [r5, #8]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 800136c:	f04f 021c 	mov.w	r2, #28
 8001370:	fb02 0201 	mla	r2, r2, r1, r0
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8001374:	bf84      	itt	hi
 8001376:	1b1b      	subhi	r3, r3, r4
 8001378:	60ab      	strhi	r3, [r5, #8]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 800137a:	f892 50be 	ldrb.w	r5, [r2, #190]	; 0xbe
 800137e:	bf88      	it	hi
 8001380:	4623      	movhi	r3, r4
 8001382:	32b0      	adds	r2, #176	; 0xb0
 8001384:	6804      	ldr	r4, [r0, #0]
 8001386:	b10d      	cbz	r5, 800138c <HAL_PCD_EP_Receive+0x5c>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001388:	7955      	ldrb	r5, [r2, #5]
 800138a:	bb15      	cbnz	r5, 80013d2 <HAL_PCD_EP_Receive+0xa2>
 800138c:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8001390:	7912      	ldrb	r2, [r2, #4]
 8001392:	b2ad      	uxth	r5, r5
 8001394:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8001398:	2b3e      	cmp	r3, #62	; 0x3e
 800139a:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 800139e:	f105 0506 	add.w	r5, r5, #6
 80013a2:	d90b      	bls.n	80013bc <HAL_PCD_EP_Receive+0x8c>
 80013a4:	f3c3 124f 	ubfx	r2, r3, #5, #16
 80013a8:	06db      	lsls	r3, r3, #27
 80013aa:	bf04      	itt	eq
 80013ac:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80013b0:	b292      	uxtheq	r2, r2
 80013b2:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80013b6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80013ba:	e006      	b.n	80013ca <HAL_PCD_EP_Receive+0x9a>
 80013bc:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80013c0:	07db      	lsls	r3, r3, #31
 80013c2:	bf44      	itt	mi
 80013c4:	3201      	addmi	r2, #1
 80013c6:	b292      	uxthmi	r2, r2
 80013c8:	0292      	lsls	r2, r2, #10
 80013ca:	b292      	uxth	r2, r2
 80013cc:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 80013d0:	e00c      	b.n	80013ec <HAL_PCD_EP_Receive+0xbc>
 80013d2:	2d01      	cmp	r5, #1
 80013d4:	bf01      	itttt	eq
 80013d6:	f8b4 5050 	ldrheq.w	r5, [r4, #80]	; 0x50
 80013da:	7912      	ldrbeq	r2, [r2, #4]
 80013dc:	b2ad      	uxtheq	r5, r5
 80013de:	eb05 02c2 	addeq.w	r2, r5, r2, lsl #3
 80013e2:	bf04      	itt	eq
 80013e4:	eb04 0242 	addeq.w	r2, r4, r2, lsl #1
 80013e8:	f8c2 340c 	streq.w	r3, [r2, #1036]	; 0x40c
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80013ec:	231c      	movs	r3, #28
 80013ee:	fb03 0101 	mla	r1, r3, r1, r0
 80013f2:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 80013f6:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80013fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001402:	041b      	lsls	r3, r3, #16
 8001404:	0c1b      	lsrs	r3, r3, #16
 8001406:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800140a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800140e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001412:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 8001416:	2300      	movs	r3, #0
 8001418:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 800141c:	4618      	mov	r0, r3
 800141e:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
 8001420:	2002      	movs	r0, #2
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8001422:	bd70      	pop	{r4, r5, r6, pc}

08001424 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001426:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800142a:	211c      	movs	r1, #28
 800142c:	fb01 0106 	mla	r1, r1, r6, r0
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001430:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001432:	f101 0038 	add.w	r0, r1, #56	; 0x38
 8001436:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 8001438:	6043      	str	r3, [r0, #4]
  ep->xfer_count = 0;
 800143a:	2200      	movs	r2, #0
  ep->is_in = 1;
 800143c:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 800143e:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1;
 8001440:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8001444:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 8001448:	f894 5140 	ldrb.w	r5, [r4, #320]	; 0x140
 800144c:	429d      	cmp	r5, r3
 800144e:	f000 80a8 	beq.w	80015a2 <HAL_PCD_EP_Transmit+0x17e>
 8001452:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8001456:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001458:	6845      	ldr	r5, [r0, #4]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800145a:	271c      	movs	r7, #28
 800145c:	fb07 4706 	mla	r7, r7, r6, r4
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8001460:	429d      	cmp	r5, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8001462:	bf88      	it	hi
 8001464:	1aed      	subhi	r5, r5, r3
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8001466:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 800146a:	bf86      	itte	hi
 800146c:	6045      	strhi	r5, [r0, #4]
 800146e:	461d      	movhi	r5, r3
  }
  else
  {  
    len=ep->xfer_len;
    ep->xfer_len =0;
 8001470:	6042      	strls	r2, [r0, #4]
 8001472:	b2ab      	uxth	r3, r5
 8001474:	f107 0228 	add.w	r2, r7, #40	; 0x28
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8001478:	b989      	cbnz	r1, 800149e <HAL_PCD_EP_Transmit+0x7a>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 800147a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800147c:	8892      	ldrh	r2, [r2, #4]
 800147e:	6820      	ldr	r0, [r4, #0]
 8001480:	f000 fb99 	bl	8001bb6 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8001484:	6821      	ldr	r1, [r4, #0]
 8001486:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800148a:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800148e:	b292      	uxth	r2, r2
 8001490:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001494:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001498:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 800149c:	e067      	b.n	800156e <HAL_PCD_EP_Transmit+0x14a>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800149e:	7852      	ldrb	r2, [r2, #1]
 80014a0:	6820      	ldr	r0, [r4, #0]
 80014a2:	bb1a      	cbnz	r2, 80014ec <HAL_PCD_EP_Transmit+0xc8>
 80014a4:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80014a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80014ac:	b289      	uxth	r1, r1
 80014ae:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80014b2:	2d3e      	cmp	r5, #62	; 0x3e
 80014b4:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 80014b8:	f101 0106 	add.w	r1, r1, #6
 80014bc:	d90b      	bls.n	80014d6 <HAL_PCD_EP_Transmit+0xb2>
 80014be:	f3c5 124f 	ubfx	r2, r5, #5, #16
 80014c2:	06ed      	lsls	r5, r5, #27
 80014c4:	bf04      	itt	eq
 80014c6:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80014ca:	b292      	uxtheq	r2, r2
 80014cc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80014d0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80014d4:	e006      	b.n	80014e4 <HAL_PCD_EP_Transmit+0xc0>
 80014d6:	f3c5 024f 	ubfx	r2, r5, #1, #16
 80014da:	07ed      	lsls	r5, r5, #31
 80014dc:	bf44      	itt	mi
 80014de:	3201      	addmi	r2, #1
 80014e0:	b292      	uxthmi	r2, r2
 80014e2:	0292      	lsls	r2, r2, #10
 80014e4:	b292      	uxth	r2, r2
 80014e6:	f847 2011 	str.w	r2, [r7, r1, lsl #1]
 80014ea:	e00d      	b.n	8001508 <HAL_PCD_EP_Transmit+0xe4>
 80014ec:	2a01      	cmp	r2, #1
 80014ee:	bf01      	itttt	eq
 80014f0:	f8b0 2050 	ldrheq.w	r2, [r0, #80]	; 0x50
 80014f4:	f897 1028 	ldrbeq.w	r1, [r7, #40]	; 0x28
 80014f8:	b292      	uxtheq	r2, r2
 80014fa:	eb02 02c1 	addeq.w	r2, r2, r1, lsl #3
 80014fe:	bf04      	itt	eq
 8001500:	eb00 0242 	addeq.w	r2, r0, r2, lsl #1
 8001504:	f8c2 540c 	streq.w	r5, [r2, #1036]	; 0x40c
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8001508:	251c      	movs	r5, #28
 800150a:	fb05 4206 	mla	r2, r5, r6, r4
 800150e:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8001512:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 8001516:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800151a:	fb05 4506 	mla	r5, r5, r6, r4
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 800151e:	067f      	lsls	r7, r7, #25
    {
      pmabuffer = ep->pmaaddr1;
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 8001520:	bf54      	ite	pl
 8001522:	88ca      	ldrhpl	r2, [r1, #6]
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
    {
      pmabuffer = ep->pmaaddr1;
 8001524:	8e12      	ldrhmi	r2, [r2, #48]	; 0x30
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8001526:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001528:	f000 fb45 	bl	8001bb6 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 800152c:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8001530:	6822      	ldr	r2, [r4, #0]
 8001532:	b963      	cbnz	r3, 800154e <HAL_PCD_EP_Transmit+0x12a>
 8001534:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8001538:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800153c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001540:	051b      	lsls	r3, r3, #20
 8001542:	0d1b      	lsrs	r3, r3, #20
 8001544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001548:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800154c:	e00d      	b.n	800156a <HAL_PCD_EP_Transmit+0x146>
 800154e:	2b01      	cmp	r3, #1
 8001550:	d10d      	bne.n	800156e <HAL_PCD_EP_Transmit+0x14a>
 8001552:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8001556:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800155a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800155e:	051b      	lsls	r3, r3, #20
 8001560:	0d1b      	lsrs	r3, r3, #20
 8001562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800156e:	231c      	movs	r3, #28
 8001570:	fb03 4606 	mla	r6, r3, r6, r4
 8001574:	6822      	ldr	r2, [r4, #0]
 8001576:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800157a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800157e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001586:	041b      	lsls	r3, r3, #16
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800158e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 8001596:	2000      	movs	r0, #0
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001598:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd);
 800159c:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
 80015a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
 80015a2:	2002      	movs	r0, #2
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
  
  __HAL_UNLOCK(hpcd);
     
  return HAL_OK;
}
 80015a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080015a6 <HAL_PCD_IRQHandler>:
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80015a6:	6803      	ldr	r3, [r0, #0]
 80015a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	2b00      	cmp	r3, #0
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015b2:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80015b4:	db11      	blt.n	80015da <HAL_PCD_IRQHandler+0x34>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80015bc:	0552      	lsls	r2, r2, #21
 80015be:	f140 81e7 	bpl.w	8001990 <HAL_PCD_IRQHandler+0x3ea>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015c2:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 80015c6:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80015cc:	f000 fe0a 	bl	80021e4 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 80015d0:	4620      	mov	r0, r4
 80015d2:	2100      	movs	r1, #0
 80015d4:	f7ff fcfa 	bl	8000fcc <HAL_PCD_SetAddress>
 80015d8:	e1da      	b.n	8001990 <HAL_PCD_IRQHandler+0x3ea>
{
  PCD_EPTypeDef *ep;
  uint16_t count=0;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80015e0:	6820      	ldr	r0, [r4, #0]
 80015e2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	0419      	lsls	r1, r3, #16
 80015ea:	f8ad 3004 	strh.w	r3, [sp, #4]
 80015ee:	d5e2      	bpl.n	80015b6 <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80015f0:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (EPindex == 0)
 80015f4:	f015 050f 	ands.w	r5, r5, #15
 80015f8:	f040 80b7 	bne.w	800176a <HAL_PCD_IRQHandler+0x1c4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80015fc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001600:	8803      	ldrh	r3, [r0, #0]
    if (EPindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001602:	f001 0110 	and.w	r1, r1, #16
 8001606:	b289      	uxth	r1, r1
 8001608:	bb59      	cbnz	r1, 8001662 <HAL_PCD_IRQHandler+0xbc>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800160a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800160e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001612:	041b      	lsls	r3, r3, #16
 8001614:	0c1b      	lsrs	r3, r3, #16
 8001616:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001618:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800161c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001620:	b29b      	uxth	r3, r3
 8001622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001626:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 800162a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800162c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 8001630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001634:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8001636:	4413      	add	r3, r2
 8001638:	63a3      	str	r3, [r4, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 800163a:	4620      	mov	r0, r4
 800163c:	f000 fdc6 	bl	80021cc <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8001640:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0cb      	beq.n	80015e0 <HAL_PCD_IRQHandler+0x3a>
 8001648:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800164a:	2a00      	cmp	r2, #0
 800164c:	d1c8      	bne.n	80015e0 <HAL_PCD_IRQHandler+0x3a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800164e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001652:	6821      	ldr	r1, [r4, #0]
 8001654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001658:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 800165c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001660:	e7be      	b.n	80015e0 <HAL_PCD_IRQHandler+0x3a>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001662:	b29b      	uxth	r3, r3
 8001664:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8001668:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800166c:	051f      	lsls	r7, r3, #20
 800166e:	d51f      	bpl.n	80016b0 <HAL_PCD_IRQHandler+0x10a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001670:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001674:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8001678:	b29b      	uxth	r3, r3
 800167a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800167e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001682:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001686:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800168a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800168e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001692:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 8001696:	f000 faa5 	bl	8001be4 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	8813      	ldrh	r3, [r2, #0]
 800169e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016a2:	051b      	lsls	r3, r3, #20
 80016a4:	0d1b      	lsrs	r3, r3, #20
 80016a6:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80016a8:	4620      	mov	r0, r4
 80016aa:	f000 fd7f 	bl	80021ac <HAL_PCD_SetupStageCallback>
 80016ae:	e797      	b.n	80015e0 <HAL_PCD_IRQHandler+0x3a>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 80016b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	da92      	bge.n	80015e0 <HAL_PCD_IRQHandler+0x3a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016ba:	8803      	ldrh	r3, [r0, #0]
 80016bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016c0:	051b      	lsls	r3, r3, #20
 80016c2:	0d1b      	lsrs	r3, r3, #20
 80016c4:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016c6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016ca:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80016d4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80016d8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80016dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016e0:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          
          if (ep->xfer_count != 0)
 80016e4:	b163      	cbz	r3, 8001700 <HAL_PCD_IRQHandler+0x15a>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80016e6:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 80016ea:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80016ee:	f000 fa79 	bl	8001be4 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80016f2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80016f6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80016fa:	4413      	add	r3, r2
 80016fc:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8001700:	4620      	mov	r0, r4
 8001702:	2100      	movs	r1, #0
 8001704:	f000 fd59 	bl	80021ba <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001708:	6822      	ldr	r2, [r4, #0]
 800170a:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 800170e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001712:	2d3e      	cmp	r5, #62	; 0x3e
 8001714:	b289      	uxth	r1, r1
 8001716:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800171a:	f101 0106 	add.w	r1, r1, #6
 800171e:	d90b      	bls.n	8001738 <HAL_PCD_IRQHandler+0x192>
 8001720:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8001724:	06ee      	lsls	r6, r5, #27
 8001726:	bf04      	itt	eq
 8001728:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800172c:	b29b      	uxtheq	r3, r3
 800172e:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8001732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001736:	e006      	b.n	8001746 <HAL_PCD_IRQHandler+0x1a0>
 8001738:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800173c:	07ed      	lsls	r5, r5, #31
 800173e:	bf44      	itt	mi
 8001740:	3301      	addmi	r3, #1
 8001742:	b29b      	uxthmi	r3, r3
 8001744:	029b      	lsls	r3, r3, #10
 8001746:	b29b      	uxth	r3, r3
 8001748:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800174c:	8813      	ldrh	r3, [r2, #0]
 800174e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001756:	041b      	lsls	r3, r3, #16
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800175e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001766:	8013      	strh	r3, [r2, #0]
 8001768:	e73a      	b.n	80015e0 <HAL_PCD_IRQHandler+0x3a>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 800176a:	b22f      	sxth	r7, r5
 800176c:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8001770:	b29b      	uxth	r3, r3
 8001772:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8001776:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800177a:	b21b      	sxth	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	f280 8084 	bge.w	800188a <HAL_PCD_IRQHandler+0x2e4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8001782:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8001786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800178a:	051b      	lsls	r3, r3, #20
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 800178c:	221c      	movs	r2, #28
 800178e:	fb02 4205 	mla	r2, r2, r5, r4
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8001792:	0d1b      	lsrs	r3, r3, #20
 8001794:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8001798:	f102 0cb8 	add.w	ip, r2, #184	; 0xb8
 800179c:	f89c 3006 	ldrb.w	r3, [ip, #6]
 80017a0:	f102 0eb0 	add.w	lr, r2, #176	; 0xb0
 80017a4:	b9b3      	cbnz	r3, 80017d4 <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017a6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80017aa:	f89e 1004 	ldrb.w	r1, [lr, #4]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80017b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80017b8:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 80017bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 80017c0:	2e00      	cmp	r6, #0
 80017c2:	d040      	beq.n	8001846 <HAL_PCD_IRQHandler+0x2a0>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017c4:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 80017c8:	f8be 2008 	ldrh.w	r2, [lr, #8]
 80017cc:	4633      	mov	r3, r6
 80017ce:	f000 fa09 	bl	8001be4 <PCD_ReadPMA>
 80017d2:	e038      	b.n	8001846 <HAL_PCD_IRQHandler+0x2a0>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80017d4:	f89e 6004 	ldrb.w	r6, [lr, #4]
 80017d8:	b233      	sxth	r3, r6
 80017da:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017de:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80017e2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017e6:	b289      	uxth	r1, r1
 80017e8:	f04f 0308 	mov.w	r3, #8
 80017ec:	fb13 1306 	smlabb	r3, r3, r6, r1
 80017f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80017f4:	d009      	beq.n	800180a <HAL_PCD_IRQHandler+0x264>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017f6:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 80017fa:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 80017fe:	b186      	cbz	r6, 8001822 <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001800:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8001804:	f8be 200a 	ldrh.w	r2, [lr, #10]
 8001808:	e008      	b.n	800181c <HAL_PCD_IRQHandler+0x276>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800180a:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 800180e:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8001812:	b136      	cbz	r6, 8001822 <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001814:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8001818:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800181c:	4633      	mov	r3, r6
 800181e:	f000 f9e1 	bl	8001be4 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8001822:	231c      	movs	r3, #28
 8001824:	fb03 4305 	mla	r3, r3, r5, r4
 8001828:	6822      	ldr	r2, [r4, #0]
 800182a:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800182e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001836:	051b      	lsls	r3, r3, #20
 8001838:	0d1b      	lsrs	r3, r3, #20
 800183a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001842:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001846:	211c      	movs	r1, #28
 8001848:	fb01 4105 	mla	r1, r1, r5, r4
 800184c:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 8001850:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001854:	4433      	add	r3, r6
 8001856:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800185a:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 800185e:	4432      	add	r2, r6
 8001860:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8001864:	b11b      	cbz	r3, 800186e <HAL_PCD_IRQHandler+0x2c8>
 8001866:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800186a:	4286      	cmp	r6, r0
 800186c:	d208      	bcs.n	8001880 <HAL_PCD_IRQHandler+0x2da>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800186e:	231c      	movs	r3, #28
 8001870:	fb03 4305 	mla	r3, r3, r5, r4
 8001874:	4620      	mov	r0, r4
 8001876:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800187a:	f000 fc9e 	bl	80021ba <HAL_PCD_DataOutStageCallback>
 800187e:	e004      	b.n	800188a <HAL_PCD_IRQHandler+0x2e4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001880:	4620      	mov	r0, r4
 8001882:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 8001886:	f7ff fd53 	bl	8001330 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 800188a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800188e:	0618      	lsls	r0, r3, #24
 8001890:	f57f aea6 	bpl.w	80015e0 <HAL_PCD_IRQHandler+0x3a>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8001894:	6820      	ldr	r0, [r4, #0]
 8001896:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 800189a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800189e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018a2:	041b      	lsls	r3, r3, #16
 80018a4:	0c1b      	lsrs	r3, r3, #16
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80018a6:	221c      	movs	r2, #28
 80018a8:	fb02 4205 	mla	r2, r2, r5, r4
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80018ac:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80018b0:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 80018b4:	f102 0628 	add.w	r6, r2, #40	; 0x28
 80018b8:	b9a3      	cbnz	r3, 80018e4 <HAL_PCD_IRQHandler+0x33e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018ba:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80018be:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80018c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80018cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80018d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d03a      	beq.n	8001950 <HAL_PCD_IRQHandler+0x3aa>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80018da:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80018dc:	88b2      	ldrh	r2, [r6, #4]
 80018de:	f000 f96a 	bl	8001bb6 <PCD_WritePMA>
 80018e2:	e035      	b.n	8001950 <HAL_PCD_IRQHandler+0x3aa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80018e4:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 80018e8:	b23b      	sxth	r3, r7
 80018ea:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018ee:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80018f2:	f013 0f40 	tst.w	r3, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018f6:	b289      	uxth	r1, r1
 80018f8:	f04f 0308 	mov.w	r3, #8
 80018fc:	fb13 1307 	smlabb	r3, r3, r7, r1
 8001900:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001904:	d008      	beq.n	8001918 <HAL_PCD_IRQHandler+0x372>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001906:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800190a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800190e:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8001910:	b163      	cbz	r3, 800192c <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001912:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001914:	88f2      	ldrh	r2, [r6, #6]
 8001916:	e007      	b.n	8001928 <HAL_PCD_IRQHandler+0x382>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001918:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800191c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8001922:	b11b      	cbz	r3, 800192c <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001924:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001926:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8001928:	f000 f945 	bl	8001bb6 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800192c:	231c      	movs	r3, #28
 800192e:	fb03 4305 	mla	r3, r3, r5, r4
 8001932:	6822      	ldr	r2, [r4, #0]
 8001934:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001938:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800193c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001940:	051b      	lsls	r3, r3, #20
 8001942:	0d1b      	lsrs	r3, r3, #20
 8001944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001950:	6821      	ldr	r1, [r4, #0]
 8001952:	231c      	movs	r3, #28
 8001954:	fb03 4505 	mla	r5, r3, r5, r4
 8001958:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800195c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8001960:	b292      	uxth	r2, r2
 8001962:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001966:	eb01 0343 	add.w	r3, r1, r3, lsl #1
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800196a:	4620      	mov	r0, r4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800196c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8001970:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001972:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001976:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800197a:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 800197c:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 800197e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 8001980:	63aa      	str	r2, [r5, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8001982:	b913      	cbnz	r3, 800198a <HAL_PCD_IRQHandler+0x3e4>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001984:	f000 fc22 	bl	80021cc <HAL_PCD_DataInStageCallback>
 8001988:	e62a      	b.n	80015e0 <HAL_PCD_IRQHandler+0x3a>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800198a:	f7ff fd4b 	bl	8001424 <HAL_PCD_EP_Transmit>
 800198e:	e627      	b.n	80015e0 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001996:	0452      	lsls	r2, r2, #17
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 8001998:	bf44      	itt	mi
 800199a:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 800199e:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80019a2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80019a6:	0497      	lsls	r7, r2, #18
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80019a8:	bf44      	itt	mi
 80019aa:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 80019ae:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80019b2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80019b6:	04d6      	lsls	r6, r2, #19
 80019b8:	d513      	bpl.n	80019e2 <HAL_PCD_IRQHandler+0x43c>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80019ba:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80019be:	f022 0204 	bic.w	r2, r2, #4
 80019c2:	0412      	lsls	r2, r2, #16
 80019c4:	0c12      	lsrs	r2, r2, #16
 80019c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 80019ca:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 80019ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 80019d2:	4620      	mov	r0, r4
 80019d4:	f000 fc14 	bl	8002200 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	f64e 72ff 	movw	r2, #61439	; 0xefff
 80019de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80019e8:	0515      	lsls	r5, r2, #20
 80019ea:	d518      	bpl.n	8001a1e <HAL_PCD_IRQHandler+0x478>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80019ec:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 80019f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80019f4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80019f8:	b292      	uxth	r2, r2
 80019fa:	f042 0208 	orr.w	r2, r2, #8
 80019fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001a02:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001a06:	b292      	uxth	r2, r2
 8001a08:	f042 0204 	orr.w	r2, r2, #4
 8001a0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8001a10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a14:	04d8      	lsls	r0, r3, #19
 8001a16:	d402      	bmi.n	8001a1e <HAL_PCD_IRQHandler+0x478>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f000 fbf0 	bl	80021fe <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001a24:	0591      	lsls	r1, r2, #22
 8001a26:	d506      	bpl.n	8001a36 <HAL_PCD_IRQHandler+0x490>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001a28:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8001a2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001a30:	4620      	mov	r0, r4
 8001a32:	f000 fbd3 	bl	80021dc <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001a3c:	05d2      	lsls	r2, r2, #23
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8001a3e:	bf44      	itt	mi
 8001a40:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8001a44:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
}
 8001a48:	b003      	add	sp, #12
 8001a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a4c <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8001a4c:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8001a50:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a52:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8001a54:	d049      	beq.n	8001aea <HAL_PCD_EP_SetStall+0x9e>
   
  if ((0x80 & ep_addr) == 0x80)
 8001a56:	b2cc      	uxtb	r4, r1
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8001a58:	2301      	movs	r3, #1
 8001a5a:	221c      	movs	r2, #28
 8001a5c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  if ((0x80 & ep_addr) == 0x80)
 8001a60:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001a64:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a68:	bf15      	itete	ne
 8001a6a:	fb02 0203 	mlane	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a6e:	fb02 0201 	mlaeq	r2, r2, r1, r0
   
  __HAL_LOCK(hpcd); 
   
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a72:	3228      	addne	r2, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a74:	32b4      	addeq	r2, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 8001a76:	2101      	movs	r1, #1
 8001a78:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7F;
 8001a7a:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a7c:	09e3      	lsrs	r3, r4, #7
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8001a7e:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a80:	7053      	strb	r3, [r2, #1]
 8001a82:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 8001a84:	b979      	cbnz	r1, 8001aa6 <HAL_PCD_EP_SetStall+0x5a>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001a86:	8813      	ldrh	r3, [r2, #0]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a96:	f083 0310 	eor.w	r3, r3, #16
 8001a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa2:	8013      	strh	r3, [r2, #0]
 8001aa4:	e01c      	b.n	8001ae0 <HAL_PCD_EP_SetStall+0x94>
 8001aa6:	b209      	sxth	r1, r1
  }
  else
  {
    if (ep->is_in)
 8001aa8:	b153      	cbz	r3, 8001ac0 <HAL_PCD_EP_SetStall+0x74>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8001aaa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ab6:	041b      	lsls	r3, r3, #16
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	f083 0310 	eor.w	r3, r3, #16
 8001abe:	e009      	b.n	8001ad4 <HAL_PCD_EP_SetStall+0x88>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 8001ac0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	0c1b      	lsrs	r3, r3, #16
 8001ad0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001adc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd10      	pop	{r4, pc}
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8001aea:	2002      	movs	r0, #2
    }
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8001aec:	bd10      	pop	{r4, pc}

08001aee <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8001aee:	b2cb      	uxtb	r3, r1
 8001af0:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af4:	b510      	push	{r4, lr}
 8001af6:	f04f 021c 	mov.w	r2, #28
 8001afa:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001afe:	bf15      	itete	ne
 8001b00:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b04:	fb02 0101 	mlaeq	r1, r2, r1, r0
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001b08:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b0a:	31b4      	addeq	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001b0c:	09db      	lsrs	r3, r3, #7
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 8001b0e:	2200      	movs	r2, #0
 8001b10:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001b12:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001b14:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8001b16:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d049      	beq.n	8001bb2 <HAL_PCD_EP_ClrStall+0xc4>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8001b24:	780c      	ldrb	r4, [r1, #0]
  
  if (ep->is_in)
 8001b26:	784b      	ldrb	r3, [r1, #1]
 8001b28:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8001b2a:	b224      	sxth	r4, r4
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
  
  if (ep->is_in)
 8001b2c:	b1db      	cbz	r3, 8001b66 <HAL_PCD_EP_ClrStall+0x78>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8001b2e:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8001b32:	065b      	lsls	r3, r3, #25
 8001b34:	d50b      	bpl.n	8001b4e <HAL_PCD_EP_ClrStall+0x60>
 8001b36:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8001b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b3e:	051b      	lsls	r3, r3, #20
 8001b40:	0d1b      	lsrs	r3, r3, #20
 8001b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b4a:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001b4e:	7809      	ldrb	r1, [r1, #0]
 8001b50:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b5c:	041b      	lsls	r3, r3, #16
 8001b5e:	0c1b      	lsrs	r3, r3, #16
 8001b60:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001b64:	e01a      	b.n	8001b9c <HAL_PCD_EP_ClrStall+0xae>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8001b66:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8001b6a:	045b      	lsls	r3, r3, #17
 8001b6c:	d50b      	bpl.n	8001b86 <HAL_PCD_EP_ClrStall+0x98>
 8001b6e:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8001b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b76:	051b      	lsls	r3, r3, #20
 8001b78:	0d1b      	lsrs	r3, r3, #20
 8001b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b82:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8001b86:	7809      	ldrb	r1, [r1, #0]
 8001b88:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b94:	041b      	lsls	r3, r3, #16
 8001b96:	0c1b      	lsrs	r3, r3, #16
 8001b98:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd10      	pop	{r4, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8001bb2:	2002      	movs	r0, #2
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  }
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8001bb4:	bd10      	pop	{r4, pc}

08001bb6 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001bbc:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001bbe:	105b      	asrs	r3, r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001bc0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8001bc4:	2400      	movs	r4, #0
 8001bc6:	429c      	cmp	r4, r3
 8001bc8:	f101 0102 	add.w	r1, r1, #2
 8001bcc:	d009      	beq.n	8001be2 <PCD_WritePMA+0x2c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8001bce:	f811 5c01 	ldrb.w	r5, [r1, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8001bd2:	f811 0c02 	ldrb.w	r0, [r1, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8001bd6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    *pdwVal++ = temp2;
 8001bda:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001bde:	3401      	adds	r4, #1
 8001be0:	e7f1      	b.n	8001bc6 <PCD_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001be2:	bd30      	pop	{r4, r5, pc}

08001be4 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8001be4:	3301      	adds	r3, #1
 8001be6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001bea:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8001bec:	105b      	asrs	r3, r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001bee:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8001bf2:	2400      	movs	r4, #0
 8001bf4:	429c      	cmp	r4, r3
 8001bf6:	d005      	beq.n	8001c04 <PCD_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001bf8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8001bfc:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8001c00:	3401      	adds	r4, #1
 8001c02:	e7f7      	b.n	8001bf4 <PCD_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8001c04:	bd10      	pop	{r4, pc}

08001c06 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001c06:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8001c08:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001c0c:	b90b      	cbnz	r3, 8001c12 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8001c0e:	2002      	movs	r0, #2
 8001c10:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4798      	blx	r3
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d1f9      	bne.n	8001c0e <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8001c1a:	bd08      	pop	{r3, pc}

08001c1c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001c1c:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8001c1e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4798      	blx	r3
  return USBD_OK;
}
 8001c26:	2000      	movs	r0, #0
 8001c28:	bd08      	pop	{r3, pc}

08001c2a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8001c2a:	b538      	push	{r3, r4, r5, lr}
 8001c2c:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001c2e:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8001c32:	4628      	mov	r0, r5
 8001c34:	f000 f8c8 	bl	8001dc8 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8001c38:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8001c3a:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8001c3e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8001c42:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8001c46:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8001c4a:	f001 031f 	and.w	r3, r1, #31
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d00c      	beq.n	8001c6c <USBD_LL_SetupStage+0x42>
 8001c52:	d306      	bcc.n	8001c62 <USBD_LL_SetupStage+0x38>
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10e      	bne.n	8001c76 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8001c58:	4620      	mov	r0, r4
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	f000 f9f8 	bl	8002050 <USBD_StdEPReq>
    break;
 8001c60:	e00e      	b.n	8001c80 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8001c62:	4620      	mov	r0, r4
 8001c64:	4629      	mov	r1, r5
 8001c66:	f000 f8cf 	bl	8001e08 <USBD_StdDevReq>
    break;
 8001c6a:	e009      	b.n	8001c80 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	4629      	mov	r1, r5
 8001c70:	f000 f9d6 	bl	8002020 <USBD_StdItfReq>
    break;
 8001c74:	e004      	b.n	8001c80 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8001c76:	4620      	mov	r0, r4
 8001c78:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001c7c:	f000 facb 	bl	8002216 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8001c80:	2000      	movs	r0, #0
 8001c82:	bd38      	pop	{r3, r4, r5, pc}

08001c84 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8001c84:	b510      	push	{r4, lr}
 8001c86:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8001c88:	bb09      	cbnz	r1, 8001cce <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8001c8a:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d126      	bne.n	8001ce0 <USBD_LL_DataOutStage+0x5c>
    {
      if(pep->rem_length > pep->maxpacket)
 8001c92:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8001c96:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8001c9a:	4299      	cmp	r1, r3
 8001c9c:	d90a      	bls.n	8001cb4 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 8001c9e:	1ac9      	subs	r1, r1, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8001ca0:	428b      	cmp	r3, r1
 8001ca2:	bf28      	it	cs
 8001ca4:	460b      	movcs	r3, r1
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8001ca6:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8001caa:	4611      	mov	r1, r2
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	f000 fa3f 	bl	8002130 <USBD_CtlContinueRx>
 8001cb2:	e015      	b.n	8001ce0 <USBD_LL_DataOutStage+0x5c>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8001cb4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	b123      	cbz	r3, 8001cc6 <USBD_LL_DataOutStage+0x42>
 8001cbc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001cc0:	2a03      	cmp	r2, #3
 8001cc2:	d100      	bne.n	8001cc6 <USBD_LL_DataOutStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8001cc4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f000 fa3b 	bl	8002142 <USBD_CtlSendStatus>
 8001ccc:	e008      	b.n	8001ce0 <USBD_LL_DataOutStage+0x5c>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8001cce:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	b123      	cbz	r3, 8001ce0 <USBD_LL_DataOutStage+0x5c>
 8001cd6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001cda:	2a03      	cmp	r2, #3
 8001cdc:	d100      	bne.n	8001ce0 <USBD_LL_DataOutStage+0x5c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8001cde:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	bd10      	pop	{r4, pc}

08001ce4 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8001ce4:	b538      	push	{r3, r4, r5, lr}
 8001ce6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8001ce8:	bba9      	cbnz	r1, 8001d56 <USBD_LL_DataInStage+0x72>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8001cea:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d129      	bne.n	8001d46 <USBD_LL_DataInStage+0x62>
    {
      if(pep->rem_length > pep->maxpacket)
 8001cf2:	69c5      	ldr	r5, [r0, #28]
 8001cf4:	6a03      	ldr	r3, [r0, #32]
 8001cf6:	429d      	cmp	r5, r3
 8001cf8:	d906      	bls.n	8001d08 <USBD_LL_DataInStage+0x24>
      {
        pep->rem_length -=  pep->maxpacket;
 8001cfa:	1aeb      	subs	r3, r5, r3
        
        USBD_CtlContinueSendData (pdev, 
 8001cfc:	4611      	mov	r1, r2
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8001cfe:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	f000 fa0c 	bl	800211e <USBD_CtlContinueSendData>
 8001d06:	e01e      	b.n	8001d46 <USBD_LL_DataInStage+0x62>
                                  pdata, 
                                  pep->rem_length);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8001d08:	6982      	ldr	r2, [r0, #24]
 8001d0a:	fbb2 f5f3 	udiv	r5, r2, r3
 8001d0e:	fb03 2515 	mls	r5, r3, r5, r2
 8001d12:	b95d      	cbnz	r5, 8001d2c <USBD_LL_DataInStage+0x48>
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d309      	bcc.n	8001d2c <USBD_LL_DataInStage+0x48>
           (pep->total_length >= pep->maxpacket) &&
 8001d18:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d205      	bcs.n	8001d2c <USBD_LL_DataInStage+0x48>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8001d20:	462a      	mov	r2, r5
 8001d22:	f000 f9fc 	bl	800211e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8001d26:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 8001d2a:	e00c      	b.n	8001d46 <USBD_LL_DataInStage+0x62>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8001d2c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	b12b      	cbz	r3, 8001d40 <USBD_LL_DataInStage+0x5c>
 8001d34:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8001d38:	2a03      	cmp	r2, #3
 8001d3a:	d101      	bne.n	8001d40 <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8001d40:	4620      	mov	r0, r4
 8001d42:	f000 fa09 	bl	8002158 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8001d46:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d10c      	bne.n	8001d68 <USBD_LL_DataInStage+0x84>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8001d54:	e008      	b.n	8001d68 <USBD_LL_DataInStage+0x84>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8001d56:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	b123      	cbz	r3, 8001d68 <USBD_LL_DataInStage+0x84>
 8001d5e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001d62:	2a03      	cmp	r2, #3
 8001d64:	d100      	bne.n	8001d68 <USBD_LL_DataInStage+0x84>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8001d66:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8001d68:	2000      	movs	r0, #0
 8001d6a:	bd38      	pop	{r3, r4, r5, pc}

08001d6c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8001d6c:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8001d6e:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8001d70:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8001d72:	460a      	mov	r2, r1
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001d74:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8001d76:	2340      	movs	r3, #64	; 0x40
 8001d78:	f000 fa43 	bl	8002202 <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8001d7c:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001d7e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8001d82:	4620      	mov	r0, r4
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	2200      	movs	r2, #0
 8001d88:	f000 fa3b 	bl	8002202 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8001d92:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8001d96:	6225      	str	r5, [r4, #32]
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8001d98:	b12b      	cbz	r3, 8001da6 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8001d9a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8001d9e:	7921      	ldrb	r1, [r4, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4620      	mov	r0, r4
 8001da4:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8001da6:	2000      	movs	r0, #0
 8001da8:	bd38      	pop	{r3, r4, r5, pc}

08001daa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8001daa:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8001dac:	2000      	movs	r0, #0
 8001dae:	4770      	bx	lr

08001db0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8001db0:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8001db2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001db6:	2a03      	cmp	r2, #3
 8001db8:	d104      	bne.n	8001dc4 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8001dba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	b103      	cbz	r3, 8001dc4 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8001dc2:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	bd08      	pop	{r3, pc}

08001dc8 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8001dc8:	780b      	ldrb	r3, [r1, #0]
 8001dca:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8001dcc:	784b      	ldrb	r3, [r1, #1]
 8001dce:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8001dd0:	78ca      	ldrb	r2, [r1, #3]
 8001dd2:	788b      	ldrb	r3, [r1, #2]
 8001dd4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001dd8:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8001dda:	794a      	ldrb	r2, [r1, #5]
 8001ddc:	790b      	ldrb	r3, [r1, #4]
 8001dde:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001de2:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8001de4:	79ca      	ldrb	r2, [r1, #7]
 8001de6:	798b      	ldrb	r3, [r1, #6]
 8001de8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001dec:	80c3      	strh	r3, [r0, #6]
 8001dee:	4770      	bx	lr

08001df0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8001df0:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8001df2:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8001df4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8001df6:	f000 fa0e 	bl	8002216 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	2100      	movs	r1, #0
}
 8001dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8001e02:	f000 ba08 	b.w	8002216 <USBD_LL_StallEP>
	...

08001e08 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8001e08:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8001e0a:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8001e10:	2b09      	cmp	r3, #9
 8001e12:	f200 80fc 	bhi.w	800200e <USBD_StdDevReq+0x206>
 8001e16:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001e1a:	00ce      	.short	0x00ce
 8001e1c:	00fa00e5 	.word	0x00fa00e5
 8001e20:	00fa00e1 	.word	0x00fa00e1
 8001e24:	000a0077 	.word	0x000a0077
 8001e28:	00bd00fa 	.word	0x00bd00fa
 8001e2c:	0093      	.short	0x0093
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8001e2e:	884b      	ldrh	r3, [r1, #2]
 8001e30:	0a1a      	lsrs	r2, r3, #8
 8001e32:	3a01      	subs	r2, #1
 8001e34:	2a06      	cmp	r2, #6
 8001e36:	f200 80ea 	bhi.w	800200e <USBD_StdDevReq+0x206>
 8001e3a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001e3e:	0007      	.short	0x0007
 8001e40:	0018000b 	.word	0x0018000b
 8001e44:	00e800e8 	.word	0x00e800e8
 8001e48:	0049003d 	.word	0x0049003d
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8001e4c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	e02c      	b.n	8001eae <USBD_StdDevReq+0xa6>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8001e54:	7c02      	ldrb	r2, [r0, #16]
 8001e56:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001e5a:	b90a      	cbnz	r2, 8001e60 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	e000      	b.n	8001e62 <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f10d 0006 	add.w	r0, sp, #6
 8001e66:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8001e68:	2302      	movs	r3, #2
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8001e6a:	4601      	mov	r1, r0
 8001e6c:	e03c      	b.n	8001ee8 <USBD_StdDevReq+0xe0>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b05      	cmp	r3, #5
 8001e72:	f200 80cc 	bhi.w	800200e <USBD_StdDevReq+0x206>
 8001e76:	e8df f003 	tbb	[pc, r3]
 8001e7a:	0703      	.short	0x0703
 8001e7c:	17130f0b 	.word	0x17130f0b
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8001e80:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	e012      	b.n	8001eae <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8001e88:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	e00e      	b.n	8001eae <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8001e90:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	e00a      	b.n	8001eae <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8001e98:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	e006      	b.n	8001eae <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8001ea0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	e002      	b.n	8001eae <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8001ea8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	7c20      	ldrb	r0, [r4, #16]
 8001eb0:	f10d 0106 	add.w	r1, sp, #6
 8001eb4:	4798      	blx	r3
 8001eb6:	e009      	b.n	8001ecc <USBD_StdDevReq+0xc4>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8001eb8:	7c03      	ldrb	r3, [r0, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f040 80a7 	bne.w	800200e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8001ec0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001ec4:	f10d 0006 	add.w	r0, sp, #6
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	4798      	blx	r3
 8001ecc:	4601      	mov	r1, r0
 8001ece:	e00c      	b.n	8001eea <USBD_StdDevReq+0xe2>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8001ed0:	7c03      	ldrb	r3, [r0, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 809b 	bne.w	800200e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8001ed8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001edc:	f10d 0006 	add.w	r0, sp, #6
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8001ee4:	2307      	movs	r3, #7
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8001ee6:	4601      	mov	r1, r0
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8001ee8:	704b      	strb	r3, [r1, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8001eea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8091 	beq.w	8002016 <USBD_StdDevReq+0x20e>
 8001ef4:	88ea      	ldrh	r2, [r5, #6]
 8001ef6:	2a00      	cmp	r2, #0
 8001ef8:	f000 808d 	beq.w	8002016 <USBD_StdDevReq+0x20e>
  {
    
    len = MIN(len , req->wLength);
 8001efc:	429a      	cmp	r2, r3
 8001efe:	bf28      	it	cs
 8001f00:	461a      	movcs	r2, r3
 8001f02:	f8ad 2006 	strh.w	r2, [sp, #6]
 8001f06:	e054      	b.n	8001fb2 <USBD_StdDevReq+0x1aa>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8001f08:	888b      	ldrh	r3, [r1, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d17f      	bne.n	800200e <USBD_StdDevReq+0x206>
 8001f0e:	88cb      	ldrh	r3, [r1, #6]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d17c      	bne.n	800200e <USBD_StdDevReq+0x206>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8001f14:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8001f18:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8001f1a:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8001f1c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8001f20:	d075      	beq.n	800200e <USBD_StdDevReq+0x206>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8001f22:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8001f26:	4631      	mov	r1, r6
 8001f28:	f000 f996 	bl	8002258 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f000 f908 	bl	8002142 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8001f32:	b10e      	cbz	r6, 8001f38 <USBD_StdDevReq+0x130>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8001f34:	2302      	movs	r3, #2
 8001f36:	e000      	b.n	8001f3a <USBD_StdDevReq+0x132>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8001f3e:	e06a      	b.n	8002016 <USBD_StdDevReq+0x20e>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8001f40:	7889      	ldrb	r1, [r1, #2]
 8001f42:	4e36      	ldr	r6, [pc, #216]	; (800201c <USBD_StdDevReq+0x214>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8001f44:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8001f46:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8001f48:	d861      	bhi.n	800200e <USBD_StdDevReq+0x206>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 8001f4a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d002      	beq.n	8001f58 <USBD_StdDevReq+0x150>
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d008      	beq.n	8001f68 <USBD_StdDevReq+0x160>
 8001f56:	e05a      	b.n	800200e <USBD_StdDevReq+0x206>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8001f58:	2900      	cmp	r1, #0
 8001f5a:	d054      	beq.n	8002006 <USBD_StdDevReq+0x1fe>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8001f5c:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8001f5e:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8001f60:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8001f62:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8001f66:	e00f      	b.n	8001f88 <USBD_StdDevReq+0x180>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8001f68:	b931      	cbnz	r1, 8001f78 <USBD_StdDevReq+0x170>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8001f70:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8001f72:	f7ff fe53 	bl	8001c1c <USBD_ClrClassConfig>
 8001f76:	e046      	b.n	8002006 <USBD_StdDevReq+0x1fe>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8001f78:	6841      	ldr	r1, [r0, #4]
 8001f7a:	2901      	cmp	r1, #1
 8001f7c:	d043      	beq.n	8002006 <USBD_StdDevReq+0x1fe>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8001f7e:	b2c9      	uxtb	r1, r1
 8001f80:	f7ff fe4c 	bl	8001c1c <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8001f84:	7831      	ldrb	r1, [r6, #0]
 8001f86:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff fe3c 	bl	8001c06 <USBD_SetClassConfig>
 8001f8e:	2802      	cmp	r0, #2
 8001f90:	d139      	bne.n	8002006 <USBD_StdDevReq+0x1fe>
 8001f92:	e03c      	b.n	800200e <USBD_StdDevReq+0x206>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8001f94:	88ca      	ldrh	r2, [r1, #6]
 8001f96:	2a01      	cmp	r2, #1
 8001f98:	d139      	bne.n	800200e <USBD_StdDevReq+0x206>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8001f9a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d003      	beq.n	8001faa <USBD_StdDevReq+0x1a2>
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d133      	bne.n	800200e <USBD_StdDevReq+0x206>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8001fa6:	1d01      	adds	r1, r0, #4
 8001fa8:	e015      	b.n	8001fd6 <USBD_StdDevReq+0x1ce>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8001faa:	4601      	mov	r1, r0
 8001fac:	2300      	movs	r3, #0
 8001fae:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	e00f      	b.n	8001fd6 <USBD_StdDevReq+0x1ce>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8001fb6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8001fba:	3b02      	subs	r3, #2
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d826      	bhi.n	800200e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8001fc4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8001fc8:	b10b      	cbz	r3, 8001fce <USBD_StdDevReq+0x1c6>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8001fca:	2303      	movs	r3, #3
 8001fcc:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f104 010c 	add.w	r1, r4, #12
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f000 f894 	bl	8002102 <USBD_CtlSendData>
 8001fda:	e01c      	b.n	8002016 <USBD_StdDevReq+0x20e>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8001fdc:	884b      	ldrh	r3, [r1, #2]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d119      	bne.n	8002016 <USBD_StdDevReq+0x20e>
 8001fe2:	e008      	b.n	8001ff6 <USBD_StdDevReq+0x1ee>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8001fe4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8001fe8:	3b02      	subs	r3, #2
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d80f      	bhi.n	800200e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8001fee:	884b      	ldrh	r3, [r1, #2]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d110      	bne.n	8002016 <USBD_StdDevReq+0x20e>
    {
      pdev->dev_remote_wakeup = 0; 
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8001ffa:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8001ffe:	4620      	mov	r0, r4
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4629      	mov	r1, r5
 8002004:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8002006:	4620      	mov	r0, r4
 8002008:	f000 f89b 	bl	8002142 <USBD_CtlSendStatus>
 800200c:	e003      	b.n	8002016 <USBD_StdDevReq+0x20e>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 800200e:	4620      	mov	r0, r4
 8002010:	4629      	mov	r1, r5
 8002012:	f7ff feed 	bl	8001df0 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8002016:	2000      	movs	r0, #0
 8002018:	b002      	add	sp, #8
 800201a:	bd70      	pop	{r4, r5, r6, pc}
 800201c:	200009a8 	.word	0x200009a8

08002020 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002020:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8002022:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002026:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002028:	4604      	mov	r4, r0
 800202a:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 800202c:	d10c      	bne.n	8002048 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800202e:	790b      	ldrb	r3, [r1, #4]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d809      	bhi.n	8002048 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8002034:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800203c:	88eb      	ldrh	r3, [r5, #6]
 800203e:	b92b      	cbnz	r3, 800204c <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 8002040:	4620      	mov	r0, r4
 8002042:	f000 f87e 	bl	8002142 <USBD_CtlSendStatus>
 8002046:	e001      	b.n	800204c <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8002048:	f7ff fed2 	bl	8001df0 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 800204c:	2000      	movs	r0, #0
 800204e:	bd38      	pop	{r3, r4, r5, pc}

08002050 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002050:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 8002052:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8002054:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 8002056:	2e01      	cmp	r6, #1
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002058:	4604      	mov	r4, r0
 800205a:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800205c:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 800205e:	d010      	beq.n	8002082 <USBD_StdEPReq+0x32>
 8002060:	d326      	bcc.n	80020b0 <USBD_StdEPReq+0x60>
 8002062:	2e03      	cmp	r6, #3
 8002064:	d14b      	bne.n	80020fe <USBD_StdEPReq+0xae>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8002066:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800206a:	2a02      	cmp	r2, #2
 800206c:	d027      	beq.n	80020be <USBD_StdEPReq+0x6e>
 800206e:	2a03      	cmp	r2, #3
 8002070:	d143      	bne.n	80020fa <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002072:	884a      	ldrh	r2, [r1, #2]
 8002074:	b992      	cbnz	r2, 800209c <USBD_StdEPReq+0x4c>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002076:	065e      	lsls	r6, r3, #25
 8002078:	d010      	beq.n	800209c <USBD_StdEPReq+0x4c>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 800207a:	4619      	mov	r1, r3
 800207c:	f000 f8cb 	bl	8002216 <USBD_LL_StallEP>
 8002080:	e00c      	b.n	800209c <USBD_StdEPReq+0x4c>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8002082:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002086:	2a02      	cmp	r2, #2
 8002088:	d019      	beq.n	80020be <USBD_StdEPReq+0x6e>
 800208a:	2a03      	cmp	r2, #3
 800208c:	d135      	bne.n	80020fa <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 800208e:	884a      	ldrh	r2, [r1, #2]
 8002090:	bbaa      	cbnz	r2, 80020fe <USBD_StdEPReq+0xae>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8002092:	0659      	lsls	r1, r3, #25
 8002094:	d008      	beq.n	80020a8 <USBD_StdEPReq+0x58>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002096:	4619      	mov	r1, r3
 8002098:	f000 f8c4 	bl	8002224 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800209c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80020a0:	4620      	mov	r0, r4
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4629      	mov	r1, r5
 80020a6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80020a8:	4620      	mov	r0, r4
 80020aa:	f000 f84a 	bl	8002142 <USBD_CtlSendStatus>
 80020ae:	e026      	b.n	80020fe <USBD_StdEPReq+0xae>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 80020b0:	f890 51fc 	ldrb.w	r5, [r0, #508]	; 0x1fc
 80020b4:	2d02      	cmp	r5, #2
 80020b6:	d002      	beq.n	80020be <USBD_StdEPReq+0x6e>
 80020b8:	2d03      	cmp	r5, #3
 80020ba:	d006      	beq.n	80020ca <USBD_StdEPReq+0x7a>
 80020bc:	e01d      	b.n	80020fa <USBD_StdEPReq+0xaa>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 80020be:	065a      	lsls	r2, r3, #25
 80020c0:	d01d      	beq.n	80020fe <USBD_StdEPReq+0xae>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 80020c2:	4619      	mov	r1, r3
 80020c4:	f000 f8a7 	bl	8002216 <USBD_LL_StallEP>
 80020c8:	e019      	b.n	80020fe <USBD_StdEPReq+0xae>
 80020ca:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80020ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80020d2:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80020d6:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80020d8:	bf14      	ite	ne
 80020da:	3514      	addne	r5, #20
 80020dc:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80020e0:	f000 f8a7 	bl	8002232 <USBD_LL_IsStallEP>
 80020e4:	b110      	cbz	r0, 80020ec <USBD_StdEPReq+0x9c>
      {
        pep->status = 0x0001;     
 80020e6:	2301      	movs	r3, #1
 80020e8:	602b      	str	r3, [r5, #0]
 80020ea:	e000      	b.n	80020ee <USBD_StdEPReq+0x9e>
      }
      else
      {
        pep->status = 0x0000;  
 80020ec:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 80020ee:	4620      	mov	r0, r4
 80020f0:	4629      	mov	r1, r5
 80020f2:	2202      	movs	r2, #2
 80020f4:	f000 f805 	bl	8002102 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 80020f8:	e001      	b.n	80020fe <USBD_StdEPReq+0xae>
      
    default:                         
      USBD_CtlError(pdev , req);
 80020fa:	f7ff fe79 	bl	8001df0 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 80020fe:	2000      	movs	r0, #0
 8002100:	bd70      	pop	{r4, r5, r6, pc}

08002102 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002102:	b538      	push	{r3, r4, r5, lr}
 8002104:	4613      	mov	r3, r2
 8002106:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002108:	2202      	movs	r2, #2
 800210a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800210e:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8002110:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002112:	2100      	movs	r1, #0
 8002114:	462a      	mov	r2, r5
 8002116:	f000 f8a6 	bl	8002266 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800211a:	2000      	movs	r0, #0
 800211c:	bd38      	pop	{r3, r4, r5, pc}

0800211e <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800211e:	b510      	push	{r4, lr}
 8002120:	460c      	mov	r4, r1
 8002122:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002124:	2100      	movs	r1, #0
 8002126:	4622      	mov	r2, r4
 8002128:	f000 f89d 	bl	8002266 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800212c:	2000      	movs	r0, #0
 800212e:	bd10      	pop	{r4, pc}

08002130 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002130:	b510      	push	{r4, lr}
 8002132:	460c      	mov	r4, r1
 8002134:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8002136:	2100      	movs	r1, #0
 8002138:	4622      	mov	r2, r4
 800213a:	f000 f89b 	bl	8002274 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800213e:	2000      	movs	r0, #0
 8002140:	bd10      	pop	{r4, pc}

08002142 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002142:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002144:	2100      	movs	r1, #0
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002146:	2304      	movs	r3, #4
 8002148:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800214c:	460a      	mov	r2, r1
 800214e:	460b      	mov	r3, r1
 8002150:	f000 f889 	bl	8002266 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002154:	2000      	movs	r0, #0
 8002156:	bd08      	pop	{r3, pc}

08002158 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002158:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800215a:	2100      	movs	r1, #0
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800215c:	2305      	movs	r3, #5
 800215e:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002162:	460a      	mov	r2, r1
 8002164:	460b      	mov	r3, r1
 8002166:	f000 f885 	bl	8002274 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800216a:	2000      	movs	r0, #0
 800216c:	bd08      	pop	{r3, pc}

0800216e <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800216e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002172:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 8002174:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002178:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 800217c:	4770      	bx	lr

0800217e <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800217e:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8002180:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8002184:	b175      	cbz	r5, 80021a4 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8002186:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800218a:	b96c      	cbnz	r4, 80021a8 <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800218c:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 8002190:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 8002194:	2181      	movs	r1, #129	; 0x81
 8002196:	f000 f866 	bl	8002266 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800219a:	2301      	movs	r3, #1
 800219c:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 80021a0:	4620      	mov	r0, r4
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 80021a4:	2002      	movs	r0, #2
 80021a6:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1;
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80021a8:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80021aa:	bd38      	pop	{r3, r4, r5, pc}

080021ac <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80021ac:	4601      	mov	r1, r0
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80021ae:	f501 71a2 	add.w	r1, r1, #324	; 0x144
 80021b2:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80021b6:	f7ff bd38 	b.w	8001c2a <USBD_LL_SetupStage>

080021ba <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80021ba:	231c      	movs	r3, #28
 80021bc:	fb03 0301 	mla	r3, r3, r1, r0
 80021c0:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80021c4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80021c8:	f7ff bd5c 	b.w	8001c84 <USBD_LL_DataOutStage>

080021cc <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80021cc:	231c      	movs	r3, #28
 80021ce:	fb03 0301 	mla	r3, r3, r1, r0
 80021d2:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80021d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021d8:	f7ff bd84 	b.w	8001ce4 <USBD_LL_DataInStage>

080021dc <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80021dc:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80021e0:	f7ff bde6 	b.w	8001db0 <USBD_LL_SOF>

080021e4 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 80021e4:	b510      	push	{r4, lr}
 80021e6:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80021e8:	2101      	movs	r1, #1
 80021ea:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80021ee:	f7ff fddc 	bl	8001daa <USBD_LL_SetSpeed>
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80021f2:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 80021f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80021fa:	f7ff bdb7 	b.w	8001d6c <USBD_LL_Reset>

080021fe <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80021fe:	4770      	bx	lr

08002200 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002200:	4770      	bx	lr

08002202 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8002202:	b510      	push	{r4, lr}
 8002204:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 8002206:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800220a:	461a      	mov	r2, r3
 800220c:	4623      	mov	r3, r4
 800220e:	f7fe fef3 	bl	8000ff8 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8002212:	2000      	movs	r0, #0
 8002214:	bd10      	pop	{r4, pc}

08002216 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002216:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002218:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800221c:	f7ff fc16 	bl	8001a4c <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8002220:	2000      	movs	r0, #0
 8002222:	bd08      	pop	{r3, pc}

08002224 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002224:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8002226:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800222a:	f7ff fc60 	bl	8001aee <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 800222e:	2000      	movs	r0, #0
 8002230:	bd08      	pop	{r3, pc}

08002232 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002232:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8002236:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800223a:	bf18      	it	ne
 800223c:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8002240:	f04f 001c 	mov.w	r0, #28
 8002244:	bf15      	itete	ne
 8002246:	fb00 2103 	mlane	r1, r0, r3, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800224a:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800224e:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002252:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
  }
}
 8002256:	4770      	bx	lr

08002258 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002258:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800225a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800225e:	f7fe feb5 	bl	8000fcc <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8002262:	2000      	movs	r0, #0
 8002264:	bd08      	pop	{r3, pc}

08002266 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8002266:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002268:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800226c:	f7ff f8da 	bl	8001424 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8002270:	2000      	movs	r0, #0
 8002272:	bd08      	pop	{r3, pc}

08002274 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8002274:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002276:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800227a:	f7ff f859 	bl	8001330 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 800227e:	2000      	movs	r0, #0
 8002280:	bd08      	pop	{r3, pc}

08002282 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002282:	f100 0308 	add.w	r3, r0, #8
 8002286:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800228c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800228e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002290:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002292:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002294:	6003      	str	r3, [r0, #0]
 8002296:	4770      	bx	lr

08002298 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002298:	2300      	movs	r3, #0
 800229a:	6103      	str	r3, [r0, #16]
 800229c:	4770      	bx	lr

0800229e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800229e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022a0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022aa:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80022ac:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022ae:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80022b0:	3301      	adds	r3, #1
 80022b2:	6003      	str	r3, [r0, #0]
 80022b4:	4770      	bx	lr

080022b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022b6:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022b8:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022ba:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022bc:	d101      	bne.n	80022c2 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022be:	6903      	ldr	r3, [r0, #16]
 80022c0:	e007      	b.n	80022d2 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c2:	f100 0308 	add.w	r3, r0, #8
 80022c6:	685c      	ldr	r4, [r3, #4]
 80022c8:	6825      	ldr	r5, [r4, #0]
 80022ca:	4295      	cmp	r5, r2
 80022cc:	d801      	bhi.n	80022d2 <vListInsert+0x1c>
 80022ce:	4623      	mov	r3, r4
 80022d0:	e7f9      	b.n	80022c6 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022d6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022d8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80022da:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80022dc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022de:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80022e0:	3301      	adds	r3, #1
 80022e2:	6003      	str	r3, [r0, #0]
 80022e4:	bd30      	pop	{r4, r5, pc}

080022e6 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022e6:	6841      	ldr	r1, [r0, #4]
 80022e8:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80022ea:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022ec:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022ee:	6882      	ldr	r2, [r0, #8]
 80022f0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022f6:	bf08      	it	eq
 80022f8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80022fa:	2200      	movs	r2, #0
 80022fc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	3801      	subs	r0, #1
 8002302:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002304:	4770      	bx	lr

08002306 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002306:	b570      	push	{r4, r5, r6, lr}
 8002308:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800230a:	6c02      	ldr	r2, [r0, #64]	; 0x40
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800230c:	6b86      	ldr	r6, [r0, #56]	; 0x38

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800230e:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002310:	b932      	cbnz	r2, 8002320 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002312:	6805      	ldr	r5, [r0, #0]
 8002314:	bb2d      	cbnz	r5, 8002362 <prvCopyDataToQueue+0x5c>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002316:	6840      	ldr	r0, [r0, #4]
 8002318:	f000 fe32 	bl	8002f80 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800231c:	6065      	str	r5, [r4, #4]
 800231e:	e027      	b.n	8002370 <prvCopyDataToQueue+0x6a>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002320:	b965      	cbnz	r5, 800233c <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002322:	6880      	ldr	r0, [r0, #8]
 8002324:	f7fd ff86 	bl	8000234 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002328:	68a2      	ldr	r2, [r4, #8]
 800232a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800232c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800232e:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002330:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002332:	4293      	cmp	r3, r2
 8002334:	d317      	bcc.n	8002366 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	60a3      	str	r3, [r4, #8]
 800233a:	e014      	b.n	8002366 <prvCopyDataToQueue+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800233c:	68c0      	ldr	r0, [r0, #12]
 800233e:	f7fd ff79 	bl	8000234 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002344:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002346:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002348:	425b      	negs	r3, r3
 800234a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800234c:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800234e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002350:	bf3e      	ittt	cc
 8002352:	6862      	ldrcc	r2, [r4, #4]
 8002354:	189b      	addcc	r3, r3, r2
 8002356:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002358:	2d02      	cmp	r5, #2
 800235a:	d106      	bne.n	800236a <prvCopyDataToQueue+0x64>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800235c:	b13e      	cbz	r6, 800236e <prvCopyDataToQueue+0x68>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800235e:	3e01      	subs	r6, #1
 8002360:	e003      	b.n	800236a <prvCopyDataToQueue+0x64>
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8002362:	4610      	mov	r0, r2
 8002364:	e004      	b.n	8002370 <prvCopyDataToQueue+0x6a>
 8002366:	4628      	mov	r0, r5
 8002368:	e002      	b.n	8002370 <prvCopyDataToQueue+0x6a>
 800236a:	2000      	movs	r0, #0
 800236c:	e000      	b.n	8002370 <prvCopyDataToQueue+0x6a>
 800236e:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002370:	3601      	adds	r6, #1
 8002372:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8002374:	bd70      	pop	{r4, r5, r6, pc}

08002376 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002376:	6c02      	ldr	r2, [r0, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002378:	b510      	push	{r4, lr}
 800237a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800237c:	b16a      	cbz	r2, 800239a <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800237e:	68c4      	ldr	r4, [r0, #12]
 8002380:	4414      	add	r4, r2
 8002382:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002384:	6840      	ldr	r0, [r0, #4]
 8002386:	4284      	cmp	r4, r0
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002388:	bf24      	itt	cs
 800238a:	6818      	ldrcs	r0, [r3, #0]
 800238c:	60d8      	strcs	r0, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 800238e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002392:	4608      	mov	r0, r1
 8002394:	68d9      	ldr	r1, [r3, #12]
 8002396:	f7fd bf4d 	b.w	8000234 <memcpy>
 800239a:	bd10      	pop	{r4, pc}

0800239c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 800239c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800239e:	6c84      	ldr	r4, [r0, #72]	; 0x48
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 80023a0:	9001      	str	r0, [sp, #4]
 80023a2:	460a      	mov	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 80023a4:	b944      	cbnz	r4, 80023b8 <prvNotifyQueueSetContainer+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80023aa:	f383 8811 	msr	BASEPRI, r3
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	e7fe      	b.n	80023b6 <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80023b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80023ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023bc:	4299      	cmp	r1, r3
 80023be:	d308      	bcc.n	80023d2 <prvNotifyQueueSetContainer+0x36>
 80023c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	e7fe      	b.n	80023d0 <prvNotifyQueueSetContainer+0x34>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80023d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80023d4:	4299      	cmp	r1, r3
 80023d6:	d218      	bcs.n	800240a <prvNotifyQueueSetContainer+0x6e>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80023d8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 80023dc:	4620      	mov	r0, r4
 80023de:	a901      	add	r1, sp, #4
 80023e0:	f7ff ff91 	bl	8002306 <prvCopyDataToQueue>
		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80023e4:	b2ed      	uxtb	r5, r5
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );

			if( cTxLock == queueUNLOCKED )
 80023e6:	2dff      	cmp	r5, #255	; 0xff
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 80023e8:	4606      	mov	r6, r0

			if( cTxLock == queueUNLOCKED )
 80023ea:	d109      	bne.n	8002400 <prvNotifyQueueSetContainer+0x64>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80023ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023ee:	b16b      	cbz	r3, 800240c <prvNotifyQueueSetContainer+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80023f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023f4:	f000 fce4 	bl	8002dc0 <xTaskRemoveFromEventList>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80023f8:	2800      	cmp	r0, #0
 80023fa:	bf18      	it	ne
 80023fc:	2601      	movne	r6, #1
 80023fe:	e005      	b.n	800240c <prvNotifyQueueSetContainer+0x70>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002400:	3501      	adds	r5, #1
 8002402:	b2ed      	uxtb	r5, r5
 8002404:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002408:	e000      	b.n	800240c <prvNotifyQueueSetContainer+0x70>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
 800240a:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800240c:	4630      	mov	r0, r6
 800240e:	b002      	add	sp, #8
 8002410:	bd70      	pop	{r4, r5, r6, pc}

08002412 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002412:	b538      	push	{r3, r4, r5, lr}
 8002414:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002416:	f000 fe45 	bl	80030a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800241a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800241e:	b2ed      	uxtb	r5, r5

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002420:	b26b      	sxtb	r3, r5
 8002422:	2b00      	cmp	r3, #0
 8002424:	dd12      	ble.n	800244c <prvUnlockQueue+0x3a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8002426:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002428:	b13b      	cbz	r3, 800243a <prvUnlockQueue+0x28>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800242a:	4620      	mov	r0, r4
 800242c:	2100      	movs	r1, #0
 800242e:	f7ff ffb5 	bl	800239c <prvNotifyQueueSetContainer>
 8002432:	b148      	cbz	r0, 8002448 <prvUnlockQueue+0x36>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8002434:	f000 fd56 	bl	8002ee4 <vTaskMissedYield>
 8002438:	e006      	b.n	8002448 <prvUnlockQueue+0x36>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800243a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800243c:	b133      	cbz	r3, 800244c <prvUnlockQueue+0x3a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800243e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002442:	f000 fcbd 	bl	8002dc0 <xTaskRemoveFromEventList>
 8002446:	e7f4      	b.n	8002432 <prvUnlockQueue+0x20>
 8002448:	3d01      	subs	r5, #1
 800244a:	e7e8      	b.n	800241e <prvUnlockQueue+0xc>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800244c:	23ff      	movs	r3, #255	; 0xff
 800244e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002452:	f000 fe49 	bl	80030e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002456:	f000 fe25 	bl	80030a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800245a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800245e:	b2ed      	uxtb	r5, r5

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002460:	b26b      	sxtb	r3, r5
 8002462:	2b00      	cmp	r3, #0
 8002464:	dd0a      	ble.n	800247c <prvUnlockQueue+0x6a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002466:	6923      	ldr	r3, [r4, #16]
 8002468:	b143      	cbz	r3, 800247c <prvUnlockQueue+0x6a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800246a:	f104 0010 	add.w	r0, r4, #16
 800246e:	f000 fca7 	bl	8002dc0 <xTaskRemoveFromEventList>
 8002472:	b108      	cbz	r0, 8002478 <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
 8002474:	f000 fd36 	bl	8002ee4 <vTaskMissedYield>
 8002478:	3d01      	subs	r5, #1
 800247a:	e7f0      	b.n	800245e <prvUnlockQueue+0x4c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800247c:	23ff      	movs	r3, #255	; 0xff
 800247e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8002482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8002486:	f000 be2f 	b.w	80030e8 <vPortExitCritical>
	...

0800248c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002490:	4604      	mov	r4, r0
 8002492:	b940      	cbnz	r0, 80024a6 <xQueueGenericReset+0x1a>
 8002494:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	e7fe      	b.n	80024a4 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80024a6:	f000 fdfd 	bl	80030a4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80024ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024ae:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024b0:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024b2:	4343      	muls	r3, r0
 80024b4:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80024b6:	1a1b      	subs	r3, r3, r0
 80024b8:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024ba:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80024bc:	60e3      	str	r3, [r4, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024be:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 80024c0:	23ff      	movs	r3, #255	; 0xff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024c2:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 80024c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80024c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80024cc:	b97d      	cbnz	r5, 80024ee <xQueueGenericReset+0x62>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024ce:	6923      	ldr	r3, [r4, #16]
 80024d0:	b1ab      	cbz	r3, 80024fe <xQueueGenericReset+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024d2:	f104 0010 	add.w	r0, r4, #16
 80024d6:	f000 fc73 	bl	8002dc0 <xTaskRemoveFromEventList>
 80024da:	b180      	cbz	r0, 80024fe <xQueueGenericReset+0x72>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <xQueueGenericReset+0x7c>)
 80024de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	e007      	b.n	80024fe <xQueueGenericReset+0x72>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024ee:	f104 0010 	add.w	r0, r4, #16
 80024f2:	f7ff fec6 	bl	8002282 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80024fa:	f7ff fec2 	bl	8002282 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80024fe:	f000 fdf3 	bl	80030e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8002502:	2001      	movs	r0, #1
 8002504:	bd38      	pop	{r3, r4, r5, pc}
 8002506:	bf00      	nop
 8002508:	e000ed04 	.word	0xe000ed04

0800250c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800250c:	b570      	push	{r4, r5, r6, lr}
 800250e:	460d      	mov	r5, r1
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002510:	4606      	mov	r6, r0
 8002512:	b940      	cbnz	r0, 8002526 <xQueueGenericCreate+0x1a>
 8002514:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	e7fe      	b.n	8002524 <xQueueGenericCreate+0x18>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002526:	b109      	cbz	r1, 800252c <xQueueGenericCreate+0x20>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002528:	4348      	muls	r0, r1
 800252a:	e000      	b.n	800252e <xQueueGenericCreate+0x22>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800252c:	4608      	mov	r0, r1
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800252e:	304c      	adds	r0, #76	; 0x4c
 8002530:	f000 fe5a 	bl	80031e8 <pvPortMalloc>

		if( pxNewQueue != NULL )
 8002534:	4604      	mov	r4, r0
 8002536:	b180      	cbz	r0, 800255a <xQueueGenericCreate+0x4e>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002538:	2300      	movs	r3, #0
 800253a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800253e:	b90d      	cbnz	r5, 8002544 <xQueueGenericCreate+0x38>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002540:	6020      	str	r0, [r4, #0]
 8002542:	e002      	b.n	800254a <xQueueGenericCreate+0x3e>

		if( pxNewQueue != NULL )
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002544:	f100 034c 	add.w	r3, r0, #76	; 0x4c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002548:	6003      	str	r3, [r0, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800254a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800254c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800254e:	4620      	mov	r0, r4
 8002550:	2101      	movs	r1, #1
 8002552:	f7ff ff9b 	bl	800248c <xQueueGenericReset>
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8002556:	2300      	movs	r3, #0
 8002558:	64a3      	str	r3, [r4, #72]	; 0x48

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
 800255a:	4620      	mov	r0, r4
 800255c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002560 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002560:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002564:	4688      	mov	r8, r1
 8002566:	9201      	str	r2, [sp, #4]
 8002568:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800256a:	4604      	mov	r4, r0
 800256c:	b940      	cbnz	r0, 8002580 <xQueueGenericSend+0x20>
 800256e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	e7fe      	b.n	800257e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002580:	b951      	cbnz	r1, 8002598 <xQueueGenericSend+0x38>
 8002582:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002584:	b143      	cbz	r3, 8002598 <xQueueGenericSend+0x38>
 8002586:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800258a:	f383 8811 	msr	BASEPRI, r3
 800258e:	f3bf 8f6f 	isb	sy
 8002592:	f3bf 8f4f 	dsb	sy
 8002596:	e7fe      	b.n	8002596 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002598:	2f02      	cmp	r7, #2
 800259a:	d10b      	bne.n	80025b4 <xQueueGenericSend+0x54>
 800259c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d008      	beq.n	80025b4 <xQueueGenericSend+0x54>
 80025a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	e7fe      	b.n	80025b2 <xQueueGenericSend+0x52>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025b4:	f000 fc9c 	bl	8002ef0 <xTaskGetSchedulerState>
 80025b8:	b910      	cbnz	r0, 80025c0 <xQueueGenericSend+0x60>
 80025ba:	9e01      	ldr	r6, [sp, #4]
 80025bc:	b10e      	cbz	r6, 80025c2 <xQueueGenericSend+0x62>
 80025be:	e076      	b.n	80026ae <xQueueGenericSend+0x14e>
 80025c0:	2600      	movs	r6, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025c2:	f000 fd6f 	bl	80030a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d301      	bcc.n	80025d2 <xQueueGenericSend+0x72>
 80025ce:	2f02      	cmp	r7, #2
 80025d0:	d11e      	bne.n	8002610 <xQueueGenericSend+0xb0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025d2:	4620      	mov	r0, r4
 80025d4:	4641      	mov	r1, r8
 80025d6:	463a      	mov	r2, r7
 80025d8:	f7ff fe95 	bl	8002306 <prvCopyDataToQueue>

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 80025dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80025de:	b123      	cbz	r3, 80025ea <xQueueGenericSend+0x8a>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 80025e0:	4620      	mov	r0, r4
 80025e2:	4639      	mov	r1, r7
 80025e4:	f7ff feda 	bl	800239c <prvNotifyQueueSetContainer>
 80025e8:	e005      	b.n	80025f6 <xQueueGenericSend+0x96>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025ec:	b11b      	cbz	r3, 80025f6 <xQueueGenericSend+0x96>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025f2:	f000 fbe5 	bl	8002dc0 <xTaskRemoveFromEventList>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 80025f6:	b138      	cbz	r0, 8002608 <xQueueGenericSend+0xa8>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 80025f8:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <xQueueGenericSend+0x168>)
 80025fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002608:	f000 fd6e 	bl	80030e8 <vPortExitCritical>
				return pdPASS;
 800260c:	2001      	movs	r0, #1
 800260e:	e057      	b.n	80026c0 <xQueueGenericSend+0x160>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002610:	9d01      	ldr	r5, [sp, #4]
 8002612:	b915      	cbnz	r5, 800261a <xQueueGenericSend+0xba>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002614:	f000 fd68 	bl	80030e8 <vPortExitCritical>
 8002618:	e047      	b.n	80026aa <xQueueGenericSend+0x14a>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
 800261a:	b916      	cbnz	r6, 8002622 <xQueueGenericSend+0xc2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800261c:	a802      	add	r0, sp, #8
 800261e:	f000 fc11 	bl	8002e44 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002622:	f000 fd61 	bl	80030e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002626:	f000 fa55 	bl	8002ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800262a:	f000 fd3b 	bl	80030a4 <vPortEnterCritical>
 800262e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002632:	2bff      	cmp	r3, #255	; 0xff
 8002634:	bf04      	itt	eq
 8002636:	2300      	moveq	r3, #0
 8002638:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800263c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002640:	2bff      	cmp	r3, #255	; 0xff
 8002642:	bf04      	itt	eq
 8002644:	2300      	moveq	r3, #0
 8002646:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800264a:	f000 fd4d 	bl	80030e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800264e:	a802      	add	r0, sp, #8
 8002650:	a901      	add	r1, sp, #4
 8002652:	f000 fc0d 	bl	8002e70 <xTaskCheckForTimeOut>
 8002656:	bb18      	cbnz	r0, 80026a0 <xQueueGenericSend+0x140>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002658:	f000 fd24 	bl	80030a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800265c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800265e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002660:	f000 fd42 	bl	80030e8 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002664:	42ae      	cmp	r6, r5
 8002666:	d115      	bne.n	8002694 <xQueueGenericSend+0x134>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002668:	f104 0010 	add.w	r0, r4, #16
 800266c:	9901      	ldr	r1, [sp, #4]
 800266e:	f000 fb8d 	bl	8002d8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002672:	4620      	mov	r0, r4
 8002674:	f7ff fecd 	bl	8002412 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002678:	f000 fac4 	bl	8002c04 <xTaskResumeAll>
 800267c:	b108      	cbz	r0, 8002682 <xQueueGenericSend+0x122>
 800267e:	2601      	movs	r6, #1
 8002680:	e79f      	b.n	80025c2 <xQueueGenericSend+0x62>
				{
					portYIELD_WITHIN_API();
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <xQueueGenericSend+0x168>)
 8002684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	e7f4      	b.n	800267e <xQueueGenericSend+0x11e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002694:	4620      	mov	r0, r4
 8002696:	f7ff febc 	bl	8002412 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800269a:	f000 fab3 	bl	8002c04 <xTaskResumeAll>
 800269e:	e7ee      	b.n	800267e <xQueueGenericSend+0x11e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7ff feb6 	bl	8002412 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026a6:	f000 faad 	bl	8002c04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026aa:	2000      	movs	r0, #0
 80026ac:	e008      	b.n	80026c0 <xQueueGenericSend+0x160>
 80026ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026be:	e7fe      	b.n	80026be <xQueueGenericSend+0x15e>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
 80026c0:	b004      	add	sp, #16
 80026c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026c6:	bf00      	nop
 80026c8:	e000ed04 	.word	0xe000ed04

080026cc <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80026cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80026d0:	460f      	mov	r7, r1
 80026d2:	9201      	str	r2, [sp, #4]
 80026d4:	4698      	mov	r8, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80026d6:	4604      	mov	r4, r0
 80026d8:	b940      	cbnz	r0, 80026ec <xQueueGenericReceive+0x20>
 80026da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	e7fe      	b.n	80026ea <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026ec:	b951      	cbnz	r1, 8002704 <xQueueGenericReceive+0x38>
 80026ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026f0:	b143      	cbz	r3, 8002704 <xQueueGenericReceive+0x38>
 80026f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	e7fe      	b.n	8002702 <xQueueGenericReceive+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002704:	f000 fbf4 	bl	8002ef0 <xTaskGetSchedulerState>
 8002708:	b910      	cbnz	r0, 8002710 <xQueueGenericReceive+0x44>
 800270a:	9e01      	ldr	r6, [sp, #4]
 800270c:	b10e      	cbz	r6, 8002712 <xQueueGenericReceive+0x46>
 800270e:	e089      	b.n	8002824 <xQueueGenericReceive+0x158>
 8002710:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002712:	f000 fcc7 	bl	80030a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002716:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002718:	b33d      	cbz	r5, 800276a <xQueueGenericReceive+0x9e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800271a:	4620      	mov	r0, r4
 800271c:	4639      	mov	r1, r7
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800271e:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002720:	f7ff fe29 	bl	8002376 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8002724:	f1b8 0f00 	cmp.w	r8, #0
 8002728:	d10b      	bne.n	8002742 <xQueueGenericReceive+0x76>
					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800272a:	6823      	ldr	r3, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800272c:	3d01      	subs	r5, #1
 800272e:	63a5      	str	r5, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002730:	b913      	cbnz	r3, 8002738 <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002732:	f000 fc67 	bl	8003004 <pvTaskIncrementMutexHeldCount>
 8002736:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002738:	6923      	ldr	r3, [r4, #16]
 800273a:	b193      	cbz	r3, 8002762 <xQueueGenericReceive+0x96>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800273c:	f104 0010 	add.w	r0, r4, #16
 8002740:	e004      	b.n	800274c <xQueueGenericReceive+0x80>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002742:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002744:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002746:	b163      	cbz	r3, 8002762 <xQueueGenericReceive+0x96>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002748:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800274c:	f000 fb38 	bl	8002dc0 <xTaskRemoveFromEventList>
 8002750:	b138      	cbz	r0, 8002762 <xQueueGenericReceive+0x96>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8002752:	4b3a      	ldr	r3, [pc, #232]	; (800283c <xQueueGenericReceive+0x170>)
 8002754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8002762:	f000 fcc1 	bl	80030e8 <vPortExitCritical>
				return pdPASS;
 8002766:	2001      	movs	r0, #1
 8002768:	e065      	b.n	8002836 <xQueueGenericReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800276a:	9d01      	ldr	r5, [sp, #4]
 800276c:	b915      	cbnz	r5, 8002774 <xQueueGenericReceive+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800276e:	f000 fcbb 	bl	80030e8 <vPortExitCritical>
 8002772:	e055      	b.n	8002820 <xQueueGenericReceive+0x154>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
 8002774:	b916      	cbnz	r6, 800277c <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002776:	a802      	add	r0, sp, #8
 8002778:	f000 fb64 	bl	8002e44 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800277c:	f000 fcb4 	bl	80030e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002780:	f000 f9a8 	bl	8002ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002784:	f000 fc8e 	bl	80030a4 <vPortEnterCritical>
 8002788:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800278c:	2bff      	cmp	r3, #255	; 0xff
 800278e:	bf04      	itt	eq
 8002790:	2300      	moveq	r3, #0
 8002792:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8002796:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800279a:	2bff      	cmp	r3, #255	; 0xff
 800279c:	bf04      	itt	eq
 800279e:	2300      	moveq	r3, #0
 80027a0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80027a4:	f000 fca0 	bl	80030e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027a8:	a802      	add	r0, sp, #8
 80027aa:	a901      	add	r1, sp, #4
 80027ac:	f000 fb60 	bl	8002e70 <xTaskCheckForTimeOut>
 80027b0:	bb50      	cbnz	r0, 8002808 <xQueueGenericReceive+0x13c>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027b2:	f000 fc77 	bl	80030a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80027b6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80027b8:	f000 fc96 	bl	80030e8 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027bc:	b9f5      	cbnz	r5, 80027fc <xQueueGenericReceive+0x130>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	b933      	cbnz	r3, 80027d0 <xQueueGenericReceive+0x104>
					{
						taskENTER_CRITICAL();
 80027c2:	f000 fc6f 	bl	80030a4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80027c6:	6860      	ldr	r0, [r4, #4]
 80027c8:	f000 fba2 	bl	8002f10 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80027cc:	f000 fc8c 	bl	80030e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027d4:	9901      	ldr	r1, [sp, #4]
 80027d6:	f000 fad9 	bl	8002d8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff fe19 	bl	8002412 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80027e0:	f000 fa10 	bl	8002c04 <xTaskResumeAll>
 80027e4:	b108      	cbz	r0, 80027ea <xQueueGenericReceive+0x11e>
 80027e6:	2601      	movs	r6, #1
 80027e8:	e793      	b.n	8002712 <xQueueGenericReceive+0x46>
				{
					portYIELD_WITHIN_API();
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <xQueueGenericReceive+0x170>)
 80027ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	e7f4      	b.n	80027e6 <xQueueGenericReceive+0x11a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027fc:	4620      	mov	r0, r4
 80027fe:	f7ff fe08 	bl	8002412 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002802:	f000 f9ff 	bl	8002c04 <xTaskResumeAll>
 8002806:	e7ee      	b.n	80027e6 <xQueueGenericReceive+0x11a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8002808:	4620      	mov	r0, r4
 800280a:	f7ff fe02 	bl	8002412 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800280e:	f000 f9f9 	bl	8002c04 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002812:	f000 fc47 	bl	80030a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002816:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002818:	f000 fc66 	bl	80030e8 <vPortExitCritical>
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800281c:	2d00      	cmp	r5, #0
 800281e:	d1e2      	bne.n	80027e6 <xQueueGenericReceive+0x11a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002820:	4628      	mov	r0, r5
 8002822:	e008      	b.n	8002836 <xQueueGenericReceive+0x16a>
 8002824:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002834:	e7fe      	b.n	8002834 <xQueueGenericReceive+0x168>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002836:	b004      	add	sp, #16
 8002838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800283c:	e000ed04 	.word	0xe000ed04

08002840 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002844:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002846:	f000 fc2d 	bl	80030a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <prvAddNewTaskToReadyList+0xbc>)
		if( pxCurrentTCB == NULL )
 800284c:	4c2c      	ldr	r4, [pc, #176]	; (8002900 <prvAddNewTaskToReadyList+0xc0>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4f2c      	ldr	r7, [pc, #176]	; (8002904 <prvAddNewTaskToReadyList+0xc4>)
 8002852:	3201      	adds	r2, #1
 8002854:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002856:	6825      	ldr	r5, [r4, #0]
 8002858:	bb0d      	cbnz	r5, 800289e <prvAddNewTaskToReadyList+0x5e>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800285a:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d126      	bne.n	80028b0 <prvAddNewTaskToReadyList+0x70>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002862:	1978      	adds	r0, r7, r5
 8002864:	3514      	adds	r5, #20
 8002866:	f7ff fd0c 	bl	8002282 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800286a:	2d64      	cmp	r5, #100	; 0x64
 800286c:	d1f9      	bne.n	8002862 <prvAddNewTaskToReadyList+0x22>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800286e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002930 <prvAddNewTaskToReadyList+0xf0>
	vListInitialise( &xDelayedTaskList2 );
 8002872:	4d25      	ldr	r5, [pc, #148]	; (8002908 <prvAddNewTaskToReadyList+0xc8>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002874:	4640      	mov	r0, r8
 8002876:	f7ff fd04 	bl	8002282 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800287a:	4628      	mov	r0, r5
 800287c:	f7ff fd01 	bl	8002282 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002880:	4822      	ldr	r0, [pc, #136]	; (800290c <prvAddNewTaskToReadyList+0xcc>)
 8002882:	f7ff fcfe 	bl	8002282 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002886:	4822      	ldr	r0, [pc, #136]	; (8002910 <prvAddNewTaskToReadyList+0xd0>)
 8002888:	f7ff fcfb 	bl	8002282 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800288c:	4821      	ldr	r0, [pc, #132]	; (8002914 <prvAddNewTaskToReadyList+0xd4>)
 800288e:	f7ff fcf8 	bl	8002282 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002892:	4b21      	ldr	r3, [pc, #132]	; (8002918 <prvAddNewTaskToReadyList+0xd8>)
 8002894:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002898:	4b20      	ldr	r3, [pc, #128]	; (800291c <prvAddNewTaskToReadyList+0xdc>)
 800289a:	601d      	str	r5, [r3, #0]
 800289c:	e008      	b.n	80028b0 <prvAddNewTaskToReadyList+0x70>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800289e:	4b20      	ldr	r3, [pc, #128]	; (8002920 <prvAddNewTaskToReadyList+0xe0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b92b      	cbnz	r3, 80028b0 <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80028aa:	429a      	cmp	r2, r3
				{
					pxCurrentTCB = pxNewTCB;
 80028ac:	bf98      	it	ls
 80028ae:	6026      	strls	r6, [r4, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028b0:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <prvAddNewTaskToReadyList+0xe4>)
 80028b2:	6813      	ldr	r3, [r2, #0]
 80028b4:	3301      	adds	r3, #1
 80028b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <prvAddNewTaskToReadyList+0xe8>)
 80028ba:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80028bc:	6811      	ldr	r1, [r2, #0]
 80028be:	2014      	movs	r0, #20
 80028c0:	428b      	cmp	r3, r1
 80028c2:	fb00 7003 	mla	r0, r0, r3, r7
 80028c6:	f106 0104 	add.w	r1, r6, #4
 80028ca:	bf88      	it	hi
 80028cc:	6013      	strhi	r3, [r2, #0]
 80028ce:	f7ff fce6 	bl	800229e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80028d2:	f000 fc09 	bl	80030e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80028d6:	4b12      	ldr	r3, [pc, #72]	; (8002920 <prvAddNewTaskToReadyList+0xe0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	b163      	cbz	r3, 80028f6 <prvAddNewTaskToReadyList+0xb6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d207      	bcs.n	80028f6 <prvAddNewTaskToReadyList+0xb6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <prvAddNewTaskToReadyList+0xec>)
 80028e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028fa:	bf00      	nop
 80028fc:	20000a9c 	.word	0x20000a9c
 8002900:	20000a4c 	.word	0x20000a4c
 8002904:	200009e4 	.word	0x200009e4
 8002908:	20000a88 	.word	0x20000a88
 800290c:	20000a50 	.word	0x20000a50
 8002910:	200009b8 	.word	0x200009b8
 8002914:	200009cc 	.word	0x200009cc
 8002918:	200009b0 	.word	0x200009b0
 800291c:	20000a6c 	.word	0x20000a6c
 8002920:	200009b4 	.word	0x200009b4
 8002924:	20000a70 	.word	0x20000a70
 8002928:	20000aa0 	.word	0x20000aa0
 800292c:	e000ed04 	.word	0xe000ed04
 8002930:	20000a74 	.word	0x20000a74

08002934 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002934:	4a06      	ldr	r2, [pc, #24]	; (8002950 <prvResetNextTaskUnblockTime+0x1c>)
 8002936:	6813      	ldr	r3, [r2, #0]
 8002938:	6819      	ldr	r1, [r3, #0]
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <prvResetNextTaskUnblockTime+0x20>)
 800293c:	b911      	cbnz	r1, 8002944 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800293e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002942:	e003      	b.n	800294c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002948:	68d2      	ldr	r2, [r2, #12]
 800294a:	6852      	ldr	r2, [r2, #4]
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	4770      	bx	lr
 8002950:	200009b0 	.word	0x200009b0
 8002954:	200009ac 	.word	0x200009ac

08002958 <prvInitialiseNewTask.isra.3>:
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800295c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800295e:	9e09      	ldr	r6, [sp, #36]	; 0x24

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002960:	0095      	lsls	r5, r2, #2
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002962:	468a      	mov	sl, r1

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002964:	462a      	mov	r2, r5
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002966:	4680      	mov	r8, r0

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002968:	21a5      	movs	r1, #165	; 0xa5
 800296a:	6b20      	ldr	r0, [r4, #48]	; 0x30
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800296c:	461f      	mov	r7, r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800296e:	f1a5 0904 	sub.w	r9, r5, #4

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002972:	f000 fd7d 	bl	8003470 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002976:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002978:	44a9      	add	r9, r5
 800297a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800297e:	f029 0907 	bic.w	r9, r9, #7
 8002982:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8002986:	f10a 0a09 	add.w	sl, sl, #9
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800298a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800298e:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002992:	7819      	ldrb	r1, [r3, #0]
 8002994:	b109      	cbz	r1, 800299a <prvInitialiseNewTask.isra.3+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002996:	4553      	cmp	r3, sl
 8002998:	d1f7      	bne.n	800298a <prvInitialiseNewTask.isra.3+0x32>
 800299a:	9d08      	ldr	r5, [sp, #32]
 800299c:	2d04      	cmp	r5, #4
 800299e:	bf28      	it	cs
 80029a0:	2504      	movcs	r5, #4
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029a2:	f04f 0a00 	mov.w	sl, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80029a6:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80029a8:	6425      	str	r5, [r4, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029aa:	1d20      	adds	r0, r4, #4
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029ac:	f884 a03d 	strb.w	sl, [r4, #61]	; 0x3d

	pxNewTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
 80029b0:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029b4:	f7ff fc70 	bl	8002298 <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029b8:	f1c5 0505 	rsb	r5, r5, #5
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029bc:	f104 0018 	add.w	r0, r4, #24
 80029c0:	f7ff fc6a 	bl	8002298 <vListInitialiseItem>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80029c4:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029c8:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029ca:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029cc:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029ce:	f884 a04c 	strb.w	sl, [r4, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029d2:	4648      	mov	r0, r9
 80029d4:	4641      	mov	r1, r8
 80029d6:	463a      	mov	r2, r7
 80029d8:	f000 fb38 	bl	800304c <pxPortInitialiseStack>
 80029dc:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80029de:	b106      	cbz	r6, 80029e2 <prvInitialiseNewTask.isra.3+0x8a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029e0:	6034      	str	r4, [r6, #0]
 80029e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080029e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80029ea:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <prvAddCurrentTaskToDelayedList+0x60>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029ec:	4d17      	ldr	r5, [pc, #92]	; (8002a4c <prvAddCurrentTaskToDelayedList+0x64>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80029ee:	681e      	ldr	r6, [r3, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80029f0:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029f2:	6828      	ldr	r0, [r5, #0]
 80029f4:	3004      	adds	r0, #4
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80029f6:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029f8:	f7ff fc75 	bl	80022e6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80029fc:	1c63      	adds	r3, r4, #1
 80029fe:	462a      	mov	r2, r5
 8002a00:	d107      	bne.n	8002a12 <prvAddCurrentTaskToDelayedList+0x2a>
 8002a02:	b137      	cbz	r7, 8002a12 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a04:	6829      	ldr	r1, [r5, #0]
 8002a06:	4812      	ldr	r0, [pc, #72]	; (8002a50 <prvAddCurrentTaskToDelayedList+0x68>)
 8002a08:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a0e:	f7ff bc46 	b.w	800229e <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a12:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <prvAddCurrentTaskToDelayedList+0x64>)
 8002a18:	6054      	str	r4, [r2, #4]

			if( xTimeToWake < xConstTickCount )
 8002a1a:	42b4      	cmp	r4, r6
 8002a1c:	d207      	bcs.n	8002a2e <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a1e:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <prvAddCurrentTaskToDelayedList+0x6c>)
 8002a20:	6810      	ldr	r0, [r2, #0]
 8002a22:	6819      	ldr	r1, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a28:	3104      	adds	r1, #4
 8002a2a:	f7ff bc44 	b.w	80022b6 <vListInsert>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <prvAddCurrentTaskToDelayedList+0x70>)
 8002a30:	6810      	ldr	r0, [r2, #0]
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	3104      	adds	r1, #4
 8002a36:	f7ff fc3e 	bl	80022b6 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <prvAddCurrentTaskToDelayedList+0x74>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002a40:	bf38      	it	cc
 8002a42:	601c      	strcc	r4, [r3, #0]
 8002a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000a68 	.word	0x20000a68
 8002a4c:	20000a4c 	.word	0x20000a4c
 8002a50:	200009cc 	.word	0x200009cc
 8002a54:	20000a6c 	.word	0x20000a6c
 8002a58:	200009b0 	.word	0x200009b0
 8002a5c:	200009ac 	.word	0x200009ac

08002a60 <xTaskCreateStatic.part.6>:
 8002a60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	e7fe      	b.n	8002a70 <xTaskCreateStatic.part.6+0x10>

08002a72 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a76:	4681      	mov	r9, r0
 8002a78:	b085      	sub	sp, #20
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a7a:	0090      	lsls	r0, r2, #2
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a7c:	4688      	mov	r8, r1
 8002a7e:	4616      	mov	r6, r2
 8002a80:	461f      	mov	r7, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a82:	f000 fbb1 	bl	80031e8 <pvPortMalloc>

			if( pxStack != NULL )
 8002a86:	4605      	mov	r5, r0
 8002a88:	b1d8      	cbz	r0, 8002ac2 <xTaskCreate+0x50>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002a8a:	2050      	movs	r0, #80	; 0x50
 8002a8c:	f000 fbac 	bl	80031e8 <pvPortMalloc>

				if( pxNewTCB != NULL )
 8002a90:	4604      	mov	r4, r0
 8002a92:	b198      	cbz	r0, 8002abc <xTaskCreate+0x4a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */

				if( pxNewTCB != NULL )
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a9c:	6305      	str	r5, [r0, #48]	; 0x30
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	9002      	str	r0, [sp, #8]
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	4648      	mov	r0, r9
 8002aaa:	4632      	mov	r2, r6
 8002aac:	463b      	mov	r3, r7
 8002aae:	f7ff ff53 	bl	8002958 <prvInitialiseNewTask.isra.3>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f7ff fec4 	bl	8002840 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ab8:	2001      	movs	r0, #1
 8002aba:	e004      	b.n	8002ac6 <xTaskCreate+0x54>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002abc:	4628      	mov	r0, r5
 8002abe:	f000 fc2b 	bl	8003318 <vPortFree>
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}

		return xReturn;
	}
 8002ac6:	b005      	add	sp, #20
 8002ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002acc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002acc:	b508      	push	{r3, lr}
 8002ace:	f7ff ffc7 	bl	8002a60 <xTaskCreateStatic.part.6>
	...

08002ad4 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ad4:	4a02      	ldr	r2, [pc, #8]	; (8002ae0 <vTaskSuspendAll+0xc>)
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000a48 	.word	0x20000a48

08002ae4 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ae4:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <xTaskIncrementTick+0xf4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d144      	bne.n	8002b7a <xTaskIncrementTick+0x96>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8002af0:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <xTaskIncrementTick+0xf8>)
 8002af2:	681d      	ldr	r5, [r3, #0]
 8002af4:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002af6:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8002af8:	b9bd      	cbnz	r5, 8002b2a <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 8002afa:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <xTaskIncrementTick+0xfc>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	b142      	cbz	r2, 8002b14 <xTaskIncrementTick+0x30>
 8002b02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002b06:	f383 8811 	msr	BASEPRI, r3
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	e7fe      	b.n	8002b12 <xTaskIncrementTick+0x2e>
 8002b14:	4a33      	ldr	r2, [pc, #204]	; (8002be4 <xTaskIncrementTick+0x100>)
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	6810      	ldr	r0, [r2, #0]
 8002b1a:	6018      	str	r0, [r3, #0]
 8002b1c:	6011      	str	r1, [r2, #0]
 8002b1e:	4a32      	ldr	r2, [pc, #200]	; (8002be8 <xTaskIncrementTick+0x104>)
 8002b20:	6813      	ldr	r3, [r2, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	f7ff ff05 	bl	8002934 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b2a:	4f30      	ldr	r7, [pc, #192]	; (8002bec <xTaskIncrementTick+0x108>)
 8002b2c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8002bfc <xTaskIncrementTick+0x118>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8002c00 <xTaskIncrementTick+0x11c>
 8002b36:	429d      	cmp	r5, r3
 8002b38:	f04f 0400 	mov.w	r4, #0
 8002b3c:	d30d      	bcc.n	8002b5a <xTaskIncrementTick+0x76>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b3e:	4b28      	ldr	r3, [pc, #160]	; (8002be0 <xTaskIncrementTick+0xfc>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	b912      	cbnz	r2, 8002b4c <xTaskIncrementTick+0x68>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b4a:	e005      	b.n	8002b58 <xTaskIncrementTick+0x74>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b52:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
 8002b54:	429d      	cmp	r5, r3
 8002b56:	d218      	bcs.n	8002b8a <xTaskIncrementTick+0xa6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b58:	603b      	str	r3, [r7, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b5a:	f8d9 3000 	ldr.w	r3, [r9]
 8002b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b60:	2314      	movs	r3, #20
 8002b62:	4353      	muls	r3, r2
 8002b64:	f858 3003 	ldr.w	r3, [r8, r3]
			{
				xSwitchRequired = pdTRUE;
 8002b68:	2b02      	cmp	r3, #2

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <xTaskIncrementTick+0x10c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
 8002b6e:	bf28      	it	cs
 8002b70:	2401      	movcs	r4, #1

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8002b72:	bb4b      	cbnz	r3, 8002bc8 <xTaskIncrementTick+0xe4>
			{
				vApplicationTickHook();
 8002b74:	f7fd fcc6 	bl	8000504 <vApplicationTickHook>
 8002b78:	e026      	b.n	8002bc8 <xTaskIncrementTick+0xe4>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002b7a:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <xTaskIncrementTick+0x10c>)
 8002b7c:	6813      	ldr	r3, [r2, #0]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b82:	2400      	movs	r4, #0

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8002b84:	f7fd fcbe 	bl	8000504 <vApplicationTickHook>
 8002b88:	e01e      	b.n	8002bc8 <xTaskIncrementTick+0xe4>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b8a:	f106 0a04 	add.w	sl, r6, #4
 8002b8e:	4650      	mov	r0, sl
 8002b90:	f7ff fba9 	bl	80022e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b94:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002b96:	b11b      	cbz	r3, 8002ba0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b98:	f106 0018 	add.w	r0, r6, #24
 8002b9c:	f7ff fba3 	bl	80022e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ba0:	4a14      	ldr	r2, [pc, #80]	; (8002bf4 <xTaskIncrementTick+0x110>)
 8002ba2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002ba4:	6811      	ldr	r1, [r2, #0]
 8002ba6:	2014      	movs	r0, #20
 8002ba8:	428b      	cmp	r3, r1
 8002baa:	fb00 8003 	mla	r0, r0, r3, r8
 8002bae:	4651      	mov	r1, sl
 8002bb0:	bf88      	it	hi
 8002bb2:	6013      	strhi	r3, [r2, #0]
 8002bb4:	f7ff fb73 	bl	800229e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bb8:	f8d9 3000 	ldr.w	r3, [r9]
 8002bbc:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	bf28      	it	cs
 8002bc4:	2401      	movcs	r4, #1
 8002bc6:	e7ba      	b.n	8002b3e <xTaskIncrementTick+0x5a>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <xTaskIncrementTick+0x114>)
 8002bca:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf18      	it	ne
 8002bd0:	2401      	movne	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd8:	20000a48 	.word	0x20000a48
 8002bdc:	20000a68 	.word	0x20000a68
 8002be0:	200009b0 	.word	0x200009b0
 8002be4:	20000a6c 	.word	0x20000a6c
 8002be8:	20000a64 	.word	0x20000a64
 8002bec:	200009ac 	.word	0x200009ac
 8002bf0:	200009e0 	.word	0x200009e0
 8002bf4:	20000aa0 	.word	0x20000aa0
 8002bf8:	20000aa4 	.word	0x20000aa4
 8002bfc:	200009e4 	.word	0x200009e4
 8002c00:	20000a4c 	.word	0x20000a4c

08002c04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c04:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c06:	4c2f      	ldr	r4, [pc, #188]	; (8002cc4 <xTaskResumeAll+0xc0>)
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	b943      	cbnz	r3, 8002c1e <xTaskResumeAll+0x1a>
 8002c0c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	e7fe      	b.n	8002c1c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c1e:	f000 fa41 	bl	80030a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c28:	6824      	ldr	r4, [r4, #0]
 8002c2a:	b10c      	cbz	r4, 8002c30 <xTaskResumeAll+0x2c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8002c2c:	2400      	movs	r4, #0
 8002c2e:	e044      	b.n	8002cba <xTaskResumeAll+0xb6>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c30:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <xTaskResumeAll+0xc4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f9      	beq.n	8002c2c <xTaskResumeAll+0x28>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c38:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <xTaskResumeAll+0xc8>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	b302      	cbz	r2, 8002c80 <xTaskResumeAll+0x7c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c42:	1d25      	adds	r5, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c44:	f104 0018 	add.w	r0, r4, #24
 8002c48:	f7ff fb4d 	bl	80022e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	f7ff fb4a 	bl	80022e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c52:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <xTaskResumeAll+0xcc>)
 8002c54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c56:	6811      	ldr	r1, [r2, #0]
 8002c58:	428b      	cmp	r3, r1
 8002c5a:	bf88      	it	hi
 8002c5c:	6013      	strhi	r3, [r2, #0]
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <xTaskResumeAll+0xd0>)
 8002c60:	2014      	movs	r0, #20
 8002c62:	fb00 2003 	mla	r0, r0, r3, r2
 8002c66:	4629      	mov	r1, r5
 8002c68:	f7ff fb19 	bl	800229e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <xTaskResumeAll+0xd4>)
 8002c6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 8002c76:	bf22      	ittt	cs
 8002c78:	4b18      	ldrcs	r3, [pc, #96]	; (8002cdc <xTaskResumeAll+0xd8>)
 8002c7a:	2201      	movcs	r2, #1
 8002c7c:	601a      	strcs	r2, [r3, #0]
 8002c7e:	e7db      	b.n	8002c38 <xTaskResumeAll+0x34>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c80:	b10c      	cbz	r4, 8002c86 <xTaskResumeAll+0x82>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c82:	f7ff fe57 	bl	8002934 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c86:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <xTaskResumeAll+0xdc>)
 8002c88:	681c      	ldr	r4, [r3, #0]
 8002c8a:	461d      	mov	r5, r3

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c8c:	b144      	cbz	r4, 8002ca0 <xTaskResumeAll+0x9c>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c8e:	f7ff ff29 	bl	8002ae4 <xTaskIncrementTick>
 8002c92:	b110      	cbz	r0, 8002c9a <xTaskResumeAll+0x96>
							{
								xYieldPending = pdTRUE;
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <xTaskResumeAll+0xd8>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c9a:	3c01      	subs	r4, #1
 8002c9c:	d1f7      	bne.n	8002c8e <xTaskResumeAll+0x8a>

						uxPendedTicks = 0;
 8002c9e:	602c      	str	r4, [r5, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <xTaskResumeAll+0xd8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0c1      	beq.n	8002c2c <xTaskResumeAll+0x28>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <xTaskResumeAll+0xe0>)
 8002caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002cb8:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002cba:	f000 fa15 	bl	80030e8 <vPortExitCritical>

	return xAlreadyYielded;
}
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	bd38      	pop	{r3, r4, r5, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000a48 	.word	0x20000a48
 8002cc8:	20000a9c 	.word	0x20000a9c
 8002ccc:	20000a50 	.word	0x20000a50
 8002cd0:	20000aa0 	.word	0x20000aa0
 8002cd4:	200009e4 	.word	0x200009e4
 8002cd8:	20000a4c 	.word	0x20000a4c
 8002cdc:	20000aa4 	.word	0x20000aa4
 8002ce0:	200009e0 	.word	0x200009e0
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ce8:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <vTaskSwitchContext+0x90>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <vTaskSwitchContext+0x94>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002cee:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002cf0:	b112      	cbz	r2, 8002cf8 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	bd70      	pop	{r4, r5, r6, pc}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 8002cf8:	4c21      	ldr	r4, [pc, #132]	; (8002d80 <vTaskSwitchContext+0x98>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8002cfa:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002d06:	d10b      	bne.n	8002d20 <vTaskSwitchContext+0x38>
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002d0e:	d107      	bne.n	8002d20 <vTaskSwitchContext+0x38>
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002d16:	d103      	bne.n	8002d20 <vTaskSwitchContext+0x38>
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8002d1e:	d004      	beq.n	8002d2a <vTaskSwitchContext+0x42>
 8002d20:	6820      	ldr	r0, [r4, #0]
 8002d22:	6821      	ldr	r1, [r4, #0]
 8002d24:	3134      	adds	r1, #52	; 0x34
 8002d26:	f7fd fbec 	bl	8000502 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <vTaskSwitchContext+0x9c>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	461e      	mov	r6, r3
 8002d30:	2314      	movs	r3, #20
 8002d32:	4915      	ldr	r1, [pc, #84]	; (8002d88 <vTaskSwitchContext+0xa0>)
 8002d34:	4353      	muls	r3, r2
 8002d36:	5858      	ldr	r0, [r3, r1]
 8002d38:	b958      	cbnz	r0, 8002d52 <vTaskSwitchContext+0x6a>
 8002d3a:	b942      	cbnz	r2, 8002d4e <vTaskSwitchContext+0x66>
 8002d3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	e7fe      	b.n	8002d4c <vTaskSwitchContext+0x64>
 8002d4e:	3a01      	subs	r2, #1
 8002d50:	e7ee      	b.n	8002d30 <vTaskSwitchContext+0x48>
 8002d52:	18c8      	adds	r0, r1, r3
 8002d54:	3308      	adds	r3, #8
 8002d56:	6845      	ldr	r5, [r0, #4]
 8002d58:	686d      	ldr	r5, [r5, #4]
 8002d5a:	6045      	str	r5, [r0, #4]
 8002d5c:	440b      	add	r3, r1
 8002d5e:	429d      	cmp	r5, r3
 8002d60:	bf04      	itt	eq
 8002d62:	686b      	ldreq	r3, [r5, #4]
 8002d64:	6043      	streq	r3, [r0, #4]
 8002d66:	2314      	movs	r3, #20
 8002d68:	fb03 1102 	mla	r1, r3, r2, r1
 8002d6c:	684b      	ldr	r3, [r1, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	6023      	str	r3, [r4, #0]
 8002d72:	6032      	str	r2, [r6, #0]
 8002d74:	bd70      	pop	{r4, r5, r6, pc}
 8002d76:	bf00      	nop
 8002d78:	20000a48 	.word	0x20000a48
 8002d7c:	20000aa4 	.word	0x20000aa4
 8002d80:	20000a4c 	.word	0x20000a4c
 8002d84:	20000aa0 	.word	0x20000aa0
 8002d88:	200009e4 	.word	0x200009e4

08002d8c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d8c:	b510      	push	{r4, lr}
 8002d8e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002d90:	b940      	cbnz	r0, 8002da4 <vTaskPlaceOnEventList+0x18>
 8002d92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	e7fe      	b.n	8002da2 <vTaskPlaceOnEventList+0x16>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <vTaskPlaceOnEventList+0x30>)
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	3118      	adds	r1, #24
 8002daa:	f7ff fa84 	bl	80022b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002dae:	4620      	mov	r0, r4
 8002db0:	2101      	movs	r1, #1
}
 8002db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002db6:	f7ff be17 	b.w	80029e8 <prvAddCurrentTaskToDelayedList>
 8002dba:	bf00      	nop
 8002dbc:	20000a4c 	.word	0x20000a4c

08002dc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002dc0:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002dc2:	68c3      	ldr	r3, [r0, #12]
 8002dc4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002dc6:	b944      	cbnz	r4, 8002dda <xTaskRemoveFromEventList+0x1a>
 8002dc8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	e7fe      	b.n	8002dd8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002dda:	f104 0518 	add.w	r5, r4, #24
 8002dde:	4628      	mov	r0, r5
 8002de0:	f7ff fa81 	bl	80022e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <xTaskRemoveFromEventList+0x6c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	b973      	cbnz	r3, 8002e08 <xTaskRemoveFromEventList+0x48>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002dea:	1d25      	adds	r5, r4, #4
 8002dec:	4628      	mov	r0, r5
 8002dee:	f7ff fa7a 	bl	80022e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002df2:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <xTaskRemoveFromEventList+0x70>)
 8002df4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002df6:	6811      	ldr	r1, [r2, #0]
 8002df8:	428b      	cmp	r3, r1
 8002dfa:	bf88      	it	hi
 8002dfc:	6013      	strhi	r3, [r2, #0]
 8002dfe:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <xTaskRemoveFromEventList+0x74>)
 8002e00:	2014      	movs	r0, #20
 8002e02:	fb00 2003 	mla	r0, r0, r3, r2
 8002e06:	e000      	b.n	8002e0a <xTaskRemoveFromEventList+0x4a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e08:	480b      	ldr	r0, [pc, #44]	; (8002e38 <xTaskRemoveFromEventList+0x78>)
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	f7ff fa47 	bl	800229e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <xTaskRemoveFromEventList+0x7c>)
 8002e12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e1a:	bf85      	ittet	hi
 8002e1c:	4b08      	ldrhi	r3, [pc, #32]	; (8002e40 <xTaskRemoveFromEventList+0x80>)
 8002e1e:	2401      	movhi	r4, #1
	}
	else
	{
		xReturn = pdFALSE;
 8002e20:	2400      	movls	r4, #0
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e22:	601c      	strhi	r4, [r3, #0]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 8002e24:	f7ff fd86 	bl	8002934 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
}
 8002e28:	4620      	mov	r0, r4
 8002e2a:	bd38      	pop	{r3, r4, r5, pc}
 8002e2c:	20000a48 	.word	0x20000a48
 8002e30:	20000aa0 	.word	0x20000aa0
 8002e34:	200009e4 	.word	0x200009e4
 8002e38:	20000a50 	.word	0x20000a50
 8002e3c:	20000a4c 	.word	0x20000a4c
 8002e40:	20000aa4 	.word	0x20000aa4

08002e44 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
 8002e44:	b940      	cbnz	r0, 8002e58 <vTaskSetTimeOutState+0x14>
 8002e46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	e7fe      	b.n	8002e56 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <vTaskSetTimeOutState+0x24>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e5e:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <vTaskSetTimeOutState+0x28>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6043      	str	r3, [r0, #4]
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000a64 	.word	0x20000a64
 8002e6c:	20000a68 	.word	0x20000a68

08002e70 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002e70:	b538      	push	{r3, r4, r5, lr}
 8002e72:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002e74:	4604      	mov	r4, r0
 8002e76:	b940      	cbnz	r0, 8002e8a <xTaskCheckForTimeOut+0x1a>
 8002e78:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	e7fe      	b.n	8002e88 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8002e8a:	b941      	cbnz	r1, 8002e9e <xTaskCheckForTimeOut+0x2e>
 8002e8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	e7fe      	b.n	8002e9c <xTaskCheckForTimeOut+0x2c>

	taskENTER_CRITICAL();
 8002e9e:	f000 f901 	bl	80030a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <xTaskCheckForTimeOut+0x6c>)
 8002ea4:	6819      	ldr	r1, [r3, #0]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002ea6:	682b      	ldr	r3, [r5, #0]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	d010      	beq.n	8002ece <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002eac:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <xTaskCheckForTimeOut+0x70>)
 8002eae:	6810      	ldr	r0, [r2, #0]
 8002eb0:	6822      	ldr	r2, [r4, #0]
 8002eb2:	4290      	cmp	r0, r2
 8002eb4:	6862      	ldr	r2, [r4, #4]
 8002eb6:	d001      	beq.n	8002ebc <xTaskCheckForTimeOut+0x4c>
 8002eb8:	4291      	cmp	r1, r2
 8002eba:	d20a      	bcs.n	8002ed2 <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002ebc:	1a88      	subs	r0, r1, r2
 8002ebe:	4298      	cmp	r0, r3
 8002ec0:	d207      	bcs.n	8002ed2 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002ec2:	1a52      	subs	r2, r2, r1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f7ff ffbb 	bl	8002e44 <vTaskSetTimeOutState>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002ece:	2400      	movs	r4, #0
 8002ed0:	e000      	b.n	8002ed4 <xTaskCheckForTimeOut+0x64>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002ed2:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002ed4:	f000 f908 	bl	80030e8 <vPortExitCritical>

	return xReturn;
}
 8002ed8:	4620      	mov	r0, r4
 8002eda:	bd38      	pop	{r3, r4, r5, pc}
 8002edc:	20000a68 	.word	0x20000a68
 8002ee0:	20000a64 	.word	0x20000a64

08002ee4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8002ee4:	4b01      	ldr	r3, [pc, #4]	; (8002eec <vTaskMissedYield+0x8>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	4770      	bx	lr
 8002eec:	20000aa4 	.word	0x20000aa4

08002ef0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <xTaskGetSchedulerState+0x18>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b133      	cbz	r3, 8002f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <xTaskGetSchedulerState+0x1c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002efc:	bf0c      	ite	eq
 8002efe:	2002      	moveq	r0, #2
 8002f00:	2000      	movne	r0, #0
 8002f02:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002f04:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8002f06:	4770      	bx	lr
 8002f08:	200009b4 	.word	0x200009b4
 8002f0c:	20000a48 	.word	0x20000a48

08002f10 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002f12:	4604      	mov	r4, r0
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d02c      	beq.n	8002f72 <vTaskPriorityInherit+0x62>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002f18:	4d16      	ldr	r5, [pc, #88]	; (8002f74 <vTaskPriorityInherit+0x64>)
 8002f1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002f1c:	682a      	ldr	r2, [r5, #0]
 8002f1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d226      	bcs.n	8002f72 <vTaskPriorityInherit+0x62>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002f24:	6982      	ldr	r2, [r0, #24]
 8002f26:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f28:	bfa1      	itttt	ge
 8002f2a:	682a      	ldrge	r2, [r5, #0]
 8002f2c:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8002f2e:	f1c2 0205 	rsbge	r2, r2, #5
 8002f32:	6182      	strge	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002f34:	4810      	ldr	r0, [pc, #64]	; (8002f78 <vTaskPriorityInherit+0x68>)
 8002f36:	2214      	movs	r2, #20
 8002f38:	fb02 0303 	mla	r3, r2, r3, r0
 8002f3c:	6962      	ldr	r2, [r4, #20]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	4606      	mov	r6, r0
 8002f42:	d113      	bne.n	8002f6c <vTaskPriorityInherit+0x5c>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f44:	1d27      	adds	r7, r4, #4
 8002f46:	4638      	mov	r0, r7
 8002f48:	f7ff f9cd 	bl	80022e6 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002f4c:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8002f4e:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <vTaskPriorityInherit+0x6c>)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002f52:	6811      	ldr	r1, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002f54:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002f56:	428b      	cmp	r3, r1
 8002f58:	d900      	bls.n	8002f5c <vTaskPriorityInherit+0x4c>
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	2014      	movs	r0, #20
 8002f5e:	fb00 6003 	mla	r0, r0, r3, r6
 8002f62:	4639      	mov	r1, r7
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8002f68:	f7ff b999 	b.w	800229e <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002f6c:	682b      	ldr	r3, [r5, #0]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f74:	20000a4c 	.word	0x20000a4c
 8002f78:	200009e4 	.word	0x200009e4
 8002f7c:	20000aa0 	.word	0x20000aa0

08002f80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002f80:	b538      	push	{r3, r4, r5, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8002f82:	4604      	mov	r4, r0
 8002f84:	b908      	cbnz	r0, 8002f8a <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8002f86:	2000      	movs	r0, #0
 8002f88:	bd38      	pop	{r3, r4, r5, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <xTaskPriorityDisinherit+0x78>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4298      	cmp	r0, r3
 8002f90:	d008      	beq.n	8002fa4 <xTaskPriorityDisinherit+0x24>
 8002f92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	e7fe      	b.n	8002fa2 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
 8002fa4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002fa6:	b943      	cbnz	r3, 8002fba <xTaskPriorityDisinherit+0x3a>
 8002fa8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	e7fe      	b.n	8002fb8 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002fba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002fbc:	6c02      	ldr	r2, [r0, #64]	; 0x40
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8002fbe:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002fc0:	4291      	cmp	r1, r2
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8002fc2:	6443      	str	r3, [r0, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002fc4:	d0df      	beq.n	8002f86 <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1dd      	bne.n	8002f86 <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fca:	1d05      	adds	r5, r0, #4
 8002fcc:	4628      	mov	r0, r5
 8002fce:	f7ff f98a 	bl	80022e6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fd4:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fd6:	f1c3 0205 	rsb	r2, r3, #5
 8002fda:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002fdc:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <xTaskPriorityDisinherit+0x7c>)
 8002fde:	6811      	ldr	r1, [r2, #0]
 8002fe0:	428b      	cmp	r3, r1
 8002fe2:	bf88      	it	hi
 8002fe4:	6013      	strhi	r3, [r2, #0]
 8002fe6:	4a06      	ldr	r2, [pc, #24]	; (8003000 <xTaskPriorityDisinherit+0x80>)
 8002fe8:	2014      	movs	r0, #20
 8002fea:	fb00 2003 	mla	r0, r0, r3, r2
 8002fee:	4629      	mov	r1, r5
 8002ff0:	f7ff f955 	bl	800229e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002ff4:	2001      	movs	r0, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8002ff6:	bd38      	pop	{r3, r4, r5, pc}
 8002ff8:	20000a4c 	.word	0x20000a4c
 8002ffc:	20000aa0 	.word	0x20000aa0
 8003000:	200009e4 	.word	0x200009e4

08003004 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <pvTaskIncrementMutexHeldCount+0x14>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	b11a      	cbz	r2, 8003012 <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800300a:	6819      	ldr	r1, [r3, #0]
 800300c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800300e:	3201      	adds	r2, #1
 8003010:	644a      	str	r2, [r1, #68]	; 0x44
		}

		return pxCurrentTCB;
 8003012:	6818      	ldr	r0, [r3, #0]
	}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000a4c 	.word	0x20000a4c

0800301c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <prvTaskExitError+0x2c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3301      	adds	r3, #1
 8003022:	d008      	beq.n	8003036 <prvTaskExitError+0x1a>
 8003024:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	e7fe      	b.n	8003034 <prvTaskExitError+0x18>
 8003036:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	for( ;; );
 8003046:	e7fe      	b.n	8003046 <prvTaskExitError+0x2a>
 8003048:	20000018 	.word	0x20000018

0800304c <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800304c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003050:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003054:	4b07      	ldr	r3, [pc, #28]	; (8003074 <pxPortInitialiseStack+0x28>)
 8003056:	f840 3c0c 	str.w	r3, [r0, #-12]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800305a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800305e:	f06f 0302 	mvn.w	r3, #2
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003062:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003066:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800306a:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 800306e:	3844      	subs	r0, #68	; 0x44
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	0800301d 	.word	0x0800301d
	...

08003080 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <pxCurrentTCBConst2>)
 8003082:	6819      	ldr	r1, [r3, #0]
 8003084:	6808      	ldr	r0, [r1, #0]
 8003086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800308a:	f380 8809 	msr	PSP, r0
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f04f 0000 	mov.w	r0, #0
 8003096:	f380 8811 	msr	BASEPRI, r0
 800309a:	4770      	bx	lr
 800309c:	f3af 8000 	nop.w

080030a0 <pxCurrentTCBConst2>:
 80030a0:	20000a4c 	.word	0x20000a4c

080030a4 <vPortEnterCritical>:
 80030a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80030b4:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <vPortEnterCritical+0x3c>)
 80030b6:	6813      	ldr	r3, [r2, #0]
 80030b8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80030ba:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80030bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80030be:	d10d      	bne.n	80030dc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <vPortEnterCritical+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80030c8:	d008      	beq.n	80030dc <vPortEnterCritical+0x38>
 80030ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	e7fe      	b.n	80030da <vPortEnterCritical+0x36>
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000018 	.word	0x20000018
 80030e4:	e000ed04 	.word	0xe000ed04

080030e8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80030e8:	4a08      	ldr	r2, [pc, #32]	; (800310c <vPortExitCritical+0x24>)
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	b943      	cbnz	r3, 8003100 <vPortExitCritical+0x18>
 80030ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	e7fe      	b.n	80030fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003100:	3b01      	subs	r3, #1
 8003102:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003104:	b90b      	cbnz	r3, 800310a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	4770      	bx	lr
 800310c:	20000018 	.word	0x20000018

08003110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003110:	f3ef 8009 	mrs	r0, PSP
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	4b15      	ldr	r3, [pc, #84]	; (8003170 <pxCurrentTCBConst>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	f01e 0f10 	tst.w	lr, #16
 8003120:	bf08      	it	eq
 8003122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800312a:	6010      	str	r0, [r2, #0]
 800312c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003130:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8003134:	f380 8811 	msr	BASEPRI, r0
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f7ff fdd2 	bl	8002ce8 <vTaskSwitchContext>
 8003144:	f04f 0000 	mov.w	r0, #0
 8003148:	f380 8811 	msr	BASEPRI, r0
 800314c:	bc08      	pop	{r3}
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	6808      	ldr	r0, [r1, #0]
 8003152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003156:	f01e 0f10 	tst.w	lr, #16
 800315a:	bf08      	it	eq
 800315c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003160:	f380 8809 	msr	PSP, r0
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	f3af 8000 	nop.w

08003170 <pxCurrentTCBConst>:
 8003170:	20000a4c 	.word	0x20000a4c

08003174 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003174:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003176:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003186:	f7ff fcad 	bl	8002ae4 <xTaskIncrementTick>
 800318a:	b118      	cbz	r0, 8003194 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <SysTick_Handler+0x28>)
 800318e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003192:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003194:	2300      	movs	r3, #0
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	bd08      	pop	{r3, pc}
 800319c:	e000ed04 	.word	0xe000ed04

080031a0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80031a0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <prvInsertBlockIntoFreeList+0x40>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4282      	cmp	r2, r0
 80031a8:	d201      	bcs.n	80031ae <prvInsertBlockIntoFreeList+0xe>
 80031aa:	4613      	mov	r3, r2
 80031ac:	e7fa      	b.n	80031a4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	185c      	adds	r4, r3, r1
 80031b2:	4284      	cmp	r4, r0
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80031b4:	bf01      	itttt	eq
 80031b6:	6840      	ldreq	r0, [r0, #4]
 80031b8:	1809      	addeq	r1, r1, r0
 80031ba:	4618      	moveq	r0, r3
 80031bc:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80031be:	6841      	ldr	r1, [r0, #4]
 80031c0:	1844      	adds	r4, r0, r1
 80031c2:	4294      	cmp	r4, r2
 80031c4:	d107      	bne.n	80031d6 <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80031c6:	4c07      	ldr	r4, [pc, #28]	; (80031e4 <prvInsertBlockIntoFreeList+0x44>)
 80031c8:	6824      	ldr	r4, [r4, #0]
 80031ca:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031cc:	bf1f      	itttt	ne
 80031ce:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80031d0:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031d2:	1909      	addne	r1, r1, r4
 80031d4:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80031d6:	4283      	cmp	r3, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80031d8:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80031da:	bf18      	it	ne
 80031dc:	6018      	strne	r0, [r3, #0]
 80031de:	bd10      	pop	{r4, pc}
 80031e0:	20000ab0 	.word	0x20000ab0
 80031e4:	20000aac 	.word	0x20000aac

080031e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80031e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	vTaskSuspendAll();
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80031ec:	4f44      	ldr	r7, [pc, #272]	; (8003300 <pvPortMalloc+0x118>)
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80031ee:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80031f0:	f7ff fc70 	bl	8002ad4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4843      	ldr	r0, [pc, #268]	; (8003304 <pvPortMalloc+0x11c>)
 80031f8:	bb0b      	cbnz	r3, 800323e <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80031fa:	4a43      	ldr	r2, [pc, #268]	; (8003308 <pvPortMalloc+0x120>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80031fc:	0755      	lsls	r5, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80031fe:	bf1f      	itttt	ne
 8003200:	1dd1      	addne	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003202:	f021 0107 	bicne.w	r1, r1, #7
 8003206:	f502 43d0 	addne.w	r3, r2, #26624	; 0x6800
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800320a:	1a5b      	subne	r3, r3, r1
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800320c:	bf14      	ite	ne
 800320e:	460a      	movne	r2, r1
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003210:	f44f 43d0 	moveq.w	r3, #26624	; 0x6800
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003214:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8003216:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003218:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800321c:	4d3b      	ldr	r5, [pc, #236]	; (800330c <pvPortMalloc+0x124>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 800321e:	603b      	str	r3, [r7, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8003220:	2100      	movs	r1, #0
 8003222:	6069      	str	r1, [r5, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003224:	602a      	str	r2, [r5, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8003226:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003228:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800322a:	1a99      	subs	r1, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800322c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800322e:	4b38      	ldr	r3, [pc, #224]	; (8003310 <pvPortMalloc+0x128>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003230:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003232:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003234:	4b37      	ldr	r3, [pc, #220]	; (8003314 <pvPortMalloc+0x12c>)
 8003236:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003238:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800323c:	6003      	str	r3, [r0, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800323e:	f8d0 8000 	ldr.w	r8, [r0]
 8003242:	ea14 0f08 	tst.w	r4, r8
 8003246:	d147      	bne.n	80032d8 <pvPortMalloc+0xf0>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003248:	2c00      	cmp	r4, #0
 800324a:	d046      	beq.n	80032da <pvPortMalloc+0xf2>
			{
				xWantedSize += xHeapStructSize;
 800324c:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003250:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003252:	bf1c      	itt	ne
 8003254:	f023 0307 	bicne.w	r3, r3, #7
 8003258:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800325a:	2b00      	cmp	r3, #0
 800325c:	d03a      	beq.n	80032d4 <pvPortMalloc+0xec>
 800325e:	4a2d      	ldr	r2, [pc, #180]	; (8003314 <pvPortMalloc+0x12c>)
 8003260:	6816      	ldr	r6, [r2, #0]
 8003262:	42b3      	cmp	r3, r6
 8003264:	4691      	mov	r9, r2
 8003266:	d837      	bhi.n	80032d8 <pvPortMalloc+0xf0>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8003268:	4a28      	ldr	r2, [pc, #160]	; (800330c <pvPortMalloc+0x124>)
 800326a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800326c:	6869      	ldr	r1, [r5, #4]
 800326e:	4299      	cmp	r1, r3
 8003270:	d303      	bcc.n	800327a <pvPortMalloc+0x92>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003272:	6838      	ldr	r0, [r7, #0]
 8003274:	4285      	cmp	r5, r0
 8003276:	d106      	bne.n	8003286 <pvPortMalloc+0x9e>
 8003278:	e02e      	b.n	80032d8 <pvPortMalloc+0xf0>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800327a:	6828      	ldr	r0, [r5, #0]
 800327c:	2800      	cmp	r0, #0
 800327e:	d0f8      	beq.n	8003272 <pvPortMalloc+0x8a>
 8003280:	462a      	mov	r2, r5
 8003282:	4605      	mov	r5, r0
 8003284:	e7f2      	b.n	800326c <pvPortMalloc+0x84>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003286:	6828      	ldr	r0, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003288:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800328a:	6010      	str	r0, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800328c:	1aca      	subs	r2, r1, r3
 800328e:	2a10      	cmp	r2, #16
 8003290:	d90f      	bls.n	80032b2 <pvPortMalloc+0xca>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003292:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003294:	0741      	lsls	r1, r0, #29
 8003296:	d008      	beq.n	80032aa <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003298:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	e7fe      	b.n	80032a8 <pvPortMalloc+0xc0>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032aa:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80032ac:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80032ae:	f7ff ff77 	bl	80031a0 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032b2:	4917      	ldr	r1, [pc, #92]	; (8003310 <pvPortMalloc+0x128>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032b4:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032b6:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032b8:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80032ba:	ea43 0308 	orr.w	r3, r3, r8
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032be:	4282      	cmp	r2, r0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80032c0:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80032c2:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032c6:	f8c9 2000 	str.w	r2, [r9]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80032ca:	bf38      	it	cc
 80032cc:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032ce:	3408      	adds	r4, #8
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 80032d0:	602b      	str	r3, [r5, #0]
 80032d2:	e002      	b.n	80032da <pvPortMalloc+0xf2>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80032d4:	461c      	mov	r4, r3
 80032d6:	e000      	b.n	80032da <pvPortMalloc+0xf2>
 80032d8:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80032da:	f7ff fc93 	bl	8002c04 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80032de:	b90c      	cbnz	r4, 80032e4 <pvPortMalloc+0xfc>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80032e0:	f7fd f90e 	bl	8000500 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80032e4:	0763      	lsls	r3, r4, #29
 80032e6:	d008      	beq.n	80032fa <pvPortMalloc+0x112>
 80032e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	e7fe      	b.n	80032f8 <pvPortMalloc+0x110>
	return pvReturn;
}
 80032fa:	4620      	mov	r0, r4
 80032fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003300:	20000aac 	.word	0x20000aac
 8003304:	200072b8 	.word	0x200072b8
 8003308:	20000ab8 	.word	0x20000ab8
 800330c:	20000ab0 	.word	0x20000ab0
 8003310:	200072bc 	.word	0x200072bc
 8003314:	20000aa8 	.word	0x20000aa8

08003318 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003318:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 800331a:	4604      	mov	r4, r0
 800331c:	b370      	cbz	r0, 800337c <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800331e:	4a18      	ldr	r2, [pc, #96]	; (8003380 <vPortFree+0x68>)
 8003320:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	421a      	tst	r2, r3
 8003328:	d108      	bne.n	800333c <vPortFree+0x24>
 800332a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	e7fe      	b.n	800333a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800333c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003340:	b141      	cbz	r1, 8003354 <vPortFree+0x3c>
 8003342:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	e7fe      	b.n	8003352 <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003354:	ea23 0302 	bic.w	r3, r3, r2
 8003358:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 800335c:	f7ff fbba 	bl	8002ad4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003360:	4a08      	ldr	r2, [pc, #32]	; (8003384 <vPortFree+0x6c>)
 8003362:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8003366:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003368:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800336c:	440b      	add	r3, r1
 800336e:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003370:	f7ff ff16 	bl	80031a0 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8003378:	f7ff bc44 	b.w	8002c04 <xTaskResumeAll>
 800337c:	bd10      	pop	{r4, pc}
 800337e:	bf00      	nop
 8003380:	200072b8 	.word	0x200072b8
 8003384:	20000aa8 	.word	0x20000aa8

08003388 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800338c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800338e:	e003      	b.n	8003398 <LoopCopyDataInit>

08003390 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003392:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003394:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003396:	3104      	adds	r1, #4

08003398 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003398:	480b      	ldr	r0, [pc, #44]	; (80033c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <LoopForever+0xe>)
	adds	r2, r0, r1
 800339c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800339e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80033a0:	d3f6      	bcc.n	8003390 <CopyDataInit>
	ldr	r2, =_sbss
 80033a2:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80033a4:	e002      	b.n	80033ac <LoopFillZerobss>

080033a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80033a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80033a8:	f842 3b04 	str.w	r3, [r2], #4

080033ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <LoopForever+0x16>)
	cmp	r2, r3
 80033ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80033b0:	d3f9      	bcc.n	80033a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033b2:	f7fd fda3 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033b6:	f000 f833 	bl	8003420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033ba:	f7fd f855 	bl	8000468 <main>

080033be <LoopForever>:

LoopForever:
    b LoopForever
 80033be:	e7fe      	b.n	80033be <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033c0:	20007fff 	.word	0x20007fff
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80033c4:	080153a0 	.word	0x080153a0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80033c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80033cc:	2000085c 	.word	0x2000085c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80033d0:	2000085c 	.word	0x2000085c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80033d4:	20007694 	.word	0x20007694

080033d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033d8:	e7fe      	b.n	80033d8 <ADC1_2_IRQHandler>
	...

080033dc <atexit>:
 80033dc:	4601      	mov	r1, r0
 80033de:	2000      	movs	r0, #0
 80033e0:	4602      	mov	r2, r0
 80033e2:	4603      	mov	r3, r0
 80033e4:	f000 ba00 	b.w	80037e8 <__register_exitproc>

080033e8 <__errno>:
 80033e8:	4b01      	ldr	r3, [pc, #4]	; (80033f0 <__errno+0x8>)
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000448 	.word	0x20000448

080033f4 <__libc_fini_array>:
 80033f4:	b538      	push	{r3, r4, r5, lr}
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <__libc_fini_array+0x24>)
 80033f8:	4d08      	ldr	r5, [pc, #32]	; (800341c <__libc_fini_array+0x28>)
 80033fa:	1aed      	subs	r5, r5, r3
 80033fc:	10ac      	asrs	r4, r5, #2
 80033fe:	bf18      	it	ne
 8003400:	18ed      	addne	r5, r5, r3
 8003402:	d005      	beq.n	8003410 <__libc_fini_array+0x1c>
 8003404:	3c01      	subs	r4, #1
 8003406:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800340a:	4798      	blx	r3
 800340c:	2c00      	cmp	r4, #0
 800340e:	d1f9      	bne.n	8003404 <__libc_fini_array+0x10>
 8003410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003414:	f001 bd86 	b.w	8004f24 <_fini>
 8003418:	0801539c 	.word	0x0801539c
 800341c:	080153a0 	.word	0x080153a0

08003420 <__libc_init_array>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	4e0f      	ldr	r6, [pc, #60]	; (8003460 <__libc_init_array+0x40>)
 8003424:	4d0f      	ldr	r5, [pc, #60]	; (8003464 <__libc_init_array+0x44>)
 8003426:	1b76      	subs	r6, r6, r5
 8003428:	10b6      	asrs	r6, r6, #2
 800342a:	bf18      	it	ne
 800342c:	2400      	movne	r4, #0
 800342e:	d005      	beq.n	800343c <__libc_init_array+0x1c>
 8003430:	3401      	adds	r4, #1
 8003432:	f855 3b04 	ldr.w	r3, [r5], #4
 8003436:	4798      	blx	r3
 8003438:	42a6      	cmp	r6, r4
 800343a:	d1f9      	bne.n	8003430 <__libc_init_array+0x10>
 800343c:	4e0a      	ldr	r6, [pc, #40]	; (8003468 <__libc_init_array+0x48>)
 800343e:	4d0b      	ldr	r5, [pc, #44]	; (800346c <__libc_init_array+0x4c>)
 8003440:	1b76      	subs	r6, r6, r5
 8003442:	f001 fd69 	bl	8004f18 <_init>
 8003446:	10b6      	asrs	r6, r6, #2
 8003448:	bf18      	it	ne
 800344a:	2400      	movne	r4, #0
 800344c:	d006      	beq.n	800345c <__libc_init_array+0x3c>
 800344e:	3401      	adds	r4, #1
 8003450:	f855 3b04 	ldr.w	r3, [r5], #4
 8003454:	4798      	blx	r3
 8003456:	42a6      	cmp	r6, r4
 8003458:	d1f9      	bne.n	800344e <__libc_init_array+0x2e>
 800345a:	bd70      	pop	{r4, r5, r6, pc}
 800345c:	bd70      	pop	{r4, r5, r6, pc}
 800345e:	bf00      	nop
 8003460:	08015394 	.word	0x08015394
 8003464:	08015394 	.word	0x08015394
 8003468:	0801539c 	.word	0x0801539c
 800346c:	08015394 	.word	0x08015394

08003470 <memset>:
 8003470:	b470      	push	{r4, r5, r6}
 8003472:	0784      	lsls	r4, r0, #30
 8003474:	d046      	beq.n	8003504 <memset+0x94>
 8003476:	1e54      	subs	r4, r2, #1
 8003478:	2a00      	cmp	r2, #0
 800347a:	d041      	beq.n	8003500 <memset+0x90>
 800347c:	b2cd      	uxtb	r5, r1
 800347e:	4603      	mov	r3, r0
 8003480:	e002      	b.n	8003488 <memset+0x18>
 8003482:	1e62      	subs	r2, r4, #1
 8003484:	b3e4      	cbz	r4, 8003500 <memset+0x90>
 8003486:	4614      	mov	r4, r2
 8003488:	f803 5b01 	strb.w	r5, [r3], #1
 800348c:	079a      	lsls	r2, r3, #30
 800348e:	d1f8      	bne.n	8003482 <memset+0x12>
 8003490:	2c03      	cmp	r4, #3
 8003492:	d92e      	bls.n	80034f2 <memset+0x82>
 8003494:	b2cd      	uxtb	r5, r1
 8003496:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800349a:	2c0f      	cmp	r4, #15
 800349c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80034a0:	d919      	bls.n	80034d6 <memset+0x66>
 80034a2:	f103 0210 	add.w	r2, r3, #16
 80034a6:	4626      	mov	r6, r4
 80034a8:	3e10      	subs	r6, #16
 80034aa:	2e0f      	cmp	r6, #15
 80034ac:	f842 5c10 	str.w	r5, [r2, #-16]
 80034b0:	f842 5c0c 	str.w	r5, [r2, #-12]
 80034b4:	f842 5c08 	str.w	r5, [r2, #-8]
 80034b8:	f842 5c04 	str.w	r5, [r2, #-4]
 80034bc:	f102 0210 	add.w	r2, r2, #16
 80034c0:	d8f2      	bhi.n	80034a8 <memset+0x38>
 80034c2:	f1a4 0210 	sub.w	r2, r4, #16
 80034c6:	f022 020f 	bic.w	r2, r2, #15
 80034ca:	f004 040f 	and.w	r4, r4, #15
 80034ce:	3210      	adds	r2, #16
 80034d0:	2c03      	cmp	r4, #3
 80034d2:	4413      	add	r3, r2
 80034d4:	d90d      	bls.n	80034f2 <memset+0x82>
 80034d6:	461e      	mov	r6, r3
 80034d8:	4622      	mov	r2, r4
 80034da:	3a04      	subs	r2, #4
 80034dc:	2a03      	cmp	r2, #3
 80034de:	f846 5b04 	str.w	r5, [r6], #4
 80034e2:	d8fa      	bhi.n	80034da <memset+0x6a>
 80034e4:	1f22      	subs	r2, r4, #4
 80034e6:	f022 0203 	bic.w	r2, r2, #3
 80034ea:	3204      	adds	r2, #4
 80034ec:	4413      	add	r3, r2
 80034ee:	f004 0403 	and.w	r4, r4, #3
 80034f2:	b12c      	cbz	r4, 8003500 <memset+0x90>
 80034f4:	b2c9      	uxtb	r1, r1
 80034f6:	441c      	add	r4, r3
 80034f8:	f803 1b01 	strb.w	r1, [r3], #1
 80034fc:	42a3      	cmp	r3, r4
 80034fe:	d1fb      	bne.n	80034f8 <memset+0x88>
 8003500:	bc70      	pop	{r4, r5, r6}
 8003502:	4770      	bx	lr
 8003504:	4614      	mov	r4, r2
 8003506:	4603      	mov	r3, r0
 8003508:	e7c2      	b.n	8003490 <memset+0x20>
 800350a:	bf00      	nop

0800350c <putchar>:
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <putchar+0x10>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4601      	mov	r1, r0
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	4618      	mov	r0, r3
 8003516:	f001 b933 	b.w	8004780 <_putc_r>
 800351a:	bf00      	nop
 800351c:	20000448 	.word	0x20000448

08003520 <_puts_r>:
 8003520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003522:	4605      	mov	r5, r0
 8003524:	b089      	sub	sp, #36	; 0x24
 8003526:	4608      	mov	r0, r1
 8003528:	460c      	mov	r4, r1
 800352a:	f000 f855 	bl	80035d8 <strlen>
 800352e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003530:	4f13      	ldr	r7, [pc, #76]	; (8003580 <_puts_r+0x60>)
 8003532:	9404      	str	r4, [sp, #16]
 8003534:	2601      	movs	r6, #1
 8003536:	1c44      	adds	r4, r0, #1
 8003538:	a904      	add	r1, sp, #16
 800353a:	2202      	movs	r2, #2
 800353c:	9403      	str	r4, [sp, #12]
 800353e:	9005      	str	r0, [sp, #20]
 8003540:	68ac      	ldr	r4, [r5, #8]
 8003542:	9706      	str	r7, [sp, #24]
 8003544:	9607      	str	r6, [sp, #28]
 8003546:	9101      	str	r1, [sp, #4]
 8003548:	9202      	str	r2, [sp, #8]
 800354a:	b1ab      	cbz	r3, 8003578 <_puts_r+0x58>
 800354c:	89a3      	ldrh	r3, [r4, #12]
 800354e:	049a      	lsls	r2, r3, #18
 8003550:	d406      	bmi.n	8003560 <_puts_r+0x40>
 8003552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003554:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003558:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800355c:	81a3      	strh	r3, [r4, #12]
 800355e:	6662      	str	r2, [r4, #100]	; 0x64
 8003560:	4628      	mov	r0, r5
 8003562:	4621      	mov	r1, r4
 8003564:	aa01      	add	r2, sp, #4
 8003566:	f000 fc09 	bl	8003d7c <__sfvwrite_r>
 800356a:	2800      	cmp	r0, #0
 800356c:	bf14      	ite	ne
 800356e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003572:	200a      	moveq	r0, #10
 8003574:	b009      	add	sp, #36	; 0x24
 8003576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003578:	4628      	mov	r0, r5
 800357a:	f000 facf 	bl	8003b1c <__sinit>
 800357e:	e7e5      	b.n	800354c <_puts_r+0x2c>
 8003580:	08015390 	.word	0x08015390

08003584 <puts>:
 8003584:	4b02      	ldr	r3, [pc, #8]	; (8003590 <puts+0xc>)
 8003586:	4601      	mov	r1, r0
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	f7ff bfc9 	b.w	8003520 <_puts_r>
 800358e:	bf00      	nop
 8003590:	20000448 	.word	0x20000448

08003594 <strcasecmp>:
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <strcasecmp+0x40>)
 8003596:	b430      	push	{r4, r5}
 8003598:	681d      	ldr	r5, [r3, #0]
 800359a:	e002      	b.n	80035a2 <strcasecmp+0xe>
 800359c:	1ad2      	subs	r2, r2, r3
 800359e:	d116      	bne.n	80035ce <strcasecmp+0x3a>
 80035a0:	b1ab      	cbz	r3, 80035ce <strcasecmp+0x3a>
 80035a2:	f810 4b01 	ldrb.w	r4, [r0], #1
 80035a6:	192b      	adds	r3, r5, r4
 80035a8:	4622      	mov	r2, r4
 80035aa:	785b      	ldrb	r3, [r3, #1]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035b6:	bf08      	it	eq
 80035b8:	f104 0220 	addeq.w	r2, r4, #32
 80035bc:	18ec      	adds	r4, r5, r3
 80035be:	7864      	ldrb	r4, [r4, #1]
 80035c0:	f004 0403 	and.w	r4, r4, #3
 80035c4:	2c01      	cmp	r4, #1
 80035c6:	d1e9      	bne.n	800359c <strcasecmp+0x8>
 80035c8:	3320      	adds	r3, #32
 80035ca:	1ad2      	subs	r2, r2, r3
 80035cc:	d0e9      	beq.n	80035a2 <strcasecmp+0xe>
 80035ce:	4610      	mov	r0, r2
 80035d0:	bc30      	pop	{r4, r5}
 80035d2:	4770      	bx	lr
 80035d4:	2000001c 	.word	0x2000001c

080035d8 <strlen>:
 80035d8:	f020 0103 	bic.w	r1, r0, #3
 80035dc:	f010 0003 	ands.w	r0, r0, #3
 80035e0:	f1c0 0000 	rsb	r0, r0, #0
 80035e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80035e8:	f100 0c04 	add.w	ip, r0, #4
 80035ec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80035f0:	f06f 0200 	mvn.w	r2, #0
 80035f4:	bf1c      	itt	ne
 80035f6:	fa22 f20c 	lsrne.w	r2, r2, ip
 80035fa:	4313      	orrne	r3, r2
 80035fc:	f04f 0c01 	mov.w	ip, #1
 8003600:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8003604:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8003608:	eba3 020c 	sub.w	r2, r3, ip
 800360c:	ea22 0203 	bic.w	r2, r2, r3
 8003610:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8003614:	bf04      	itt	eq
 8003616:	f851 3b04 	ldreq.w	r3, [r1], #4
 800361a:	3004      	addeq	r0, #4
 800361c:	d0f4      	beq.n	8003608 <strlen+0x30>
 800361e:	f1c2 0100 	rsb	r1, r2, #0
 8003622:	ea02 0201 	and.w	r2, r2, r1
 8003626:	fab2 f282 	clz	r2, r2
 800362a:	f1c2 021f 	rsb	r2, r2, #31
 800362e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8003632:	4770      	bx	lr

08003634 <strtok>:
 8003634:	4b02      	ldr	r3, [pc, #8]	; (8003640 <strtok+0xc>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	2301      	movs	r3, #1
 800363a:	325c      	adds	r2, #92	; 0x5c
 800363c:	f000 b802 	b.w	8003644 <__strtok_r>
 8003640:	20000448 	.word	0x20000448

08003644 <__strtok_r>:
 8003644:	b4f0      	push	{r4, r5, r6, r7}
 8003646:	b320      	cbz	r0, 8003692 <__strtok_r+0x4e>
 8003648:	4607      	mov	r7, r0
 800364a:	460d      	mov	r5, r1
 800364c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003650:	e001      	b.n	8003656 <__strtok_r+0x12>
 8003652:	42a6      	cmp	r6, r4
 8003654:	d016      	beq.n	8003684 <__strtok_r+0x40>
 8003656:	f815 4b01 	ldrb.w	r4, [r5], #1
 800365a:	2c00      	cmp	r4, #0
 800365c:	d1f9      	bne.n	8003652 <__strtok_r+0xe>
 800365e:	b1ee      	cbz	r6, 800369c <__strtok_r+0x58>
 8003660:	463e      	mov	r6, r7
 8003662:	460c      	mov	r4, r1
 8003664:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003668:	e000      	b.n	800366c <__strtok_r+0x28>
 800366a:	b173      	cbz	r3, 800368a <__strtok_r+0x46>
 800366c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003670:	42ab      	cmp	r3, r5
 8003672:	d1fa      	bne.n	800366a <__strtok_r+0x26>
 8003674:	b15d      	cbz	r5, 800368e <__strtok_r+0x4a>
 8003676:	2300      	movs	r3, #0
 8003678:	703b      	strb	r3, [r7, #0]
 800367a:	6016      	str	r6, [r2, #0]
 800367c:	4606      	mov	r6, r0
 800367e:	4630      	mov	r0, r6
 8003680:	bcf0      	pop	{r4, r5, r6, r7}
 8003682:	4770      	bx	lr
 8003684:	b163      	cbz	r3, 80036a0 <__strtok_r+0x5c>
 8003686:	4638      	mov	r0, r7
 8003688:	e7de      	b.n	8003648 <__strtok_r+0x4>
 800368a:	4637      	mov	r7, r6
 800368c:	e7e8      	b.n	8003660 <__strtok_r+0x1c>
 800368e:	462e      	mov	r6, r5
 8003690:	e7f3      	b.n	800367a <__strtok_r+0x36>
 8003692:	6810      	ldr	r0, [r2, #0]
 8003694:	2800      	cmp	r0, #0
 8003696:	d1d7      	bne.n	8003648 <__strtok_r+0x4>
 8003698:	4606      	mov	r6, r0
 800369a:	e7f0      	b.n	800367e <__strtok_r+0x3a>
 800369c:	6016      	str	r6, [r2, #0]
 800369e:	e7ee      	b.n	800367e <__strtok_r+0x3a>
 80036a0:	6017      	str	r7, [r2, #0]
 80036a2:	4606      	mov	r6, r0
 80036a4:	7003      	strb	r3, [r0, #0]
 80036a6:	e7ea      	b.n	800367e <__strtok_r+0x3a>

080036a8 <_strtoul_r>:
 80036a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ac:	4c46      	ldr	r4, [pc, #280]	; (80037c8 <_strtoul_r+0x120>)
 80036ae:	460f      	mov	r7, r1
 80036b0:	f8d4 e000 	ldr.w	lr, [r4]
 80036b4:	e000      	b.n	80036b8 <_strtoul_r+0x10>
 80036b6:	4627      	mov	r7, r4
 80036b8:	463c      	mov	r4, r7
 80036ba:	f814 5b01 	ldrb.w	r5, [r4], #1
 80036be:	eb0e 0605 	add.w	r6, lr, r5
 80036c2:	7876      	ldrb	r6, [r6, #1]
 80036c4:	f006 0608 	and.w	r6, r6, #8
 80036c8:	f006 08ff 	and.w	r8, r6, #255	; 0xff
 80036cc:	2e00      	cmp	r6, #0
 80036ce:	d1f2      	bne.n	80036b6 <_strtoul_r+0xe>
 80036d0:	2d2d      	cmp	r5, #45	; 0x2d
 80036d2:	d051      	beq.n	8003778 <_strtoul_r+0xd0>
 80036d4:	2d2b      	cmp	r5, #43	; 0x2b
 80036d6:	bf04      	itt	eq
 80036d8:	787d      	ldrbeq	r5, [r7, #1]
 80036da:	1cbc      	addeq	r4, r7, #2
 80036dc:	b15b      	cbz	r3, 80036f6 <_strtoul_r+0x4e>
 80036de:	2b10      	cmp	r3, #16
 80036e0:	d05b      	beq.n	800379a <_strtoul_r+0xf2>
 80036e2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80036e6:	fbb9 f9f3 	udiv	r9, r9, r3
 80036ea:	fb03 fb09 	mul.w	fp, r3, r9
 80036ee:	ea6f 0b0b 	mvn.w	fp, fp
 80036f2:	469a      	mov	sl, r3
 80036f4:	e007      	b.n	8003706 <_strtoul_r+0x5e>
 80036f6:	2d30      	cmp	r5, #48	; 0x30
 80036f8:	d043      	beq.n	8003782 <_strtoul_r+0xda>
 80036fa:	230a      	movs	r3, #10
 80036fc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80037cc <_strtoul_r+0x124>
 8003700:	469a      	mov	sl, r3
 8003702:	f04f 0b05 	mov.w	fp, #5
 8003706:	2700      	movs	r7, #0
 8003708:	46bc      	mov	ip, r7
 800370a:	e00c      	b.n	8003726 <_strtoul_r+0x7e>
 800370c:	3d30      	subs	r5, #48	; 0x30
 800370e:	42ab      	cmp	r3, r5
 8003710:	dd19      	ble.n	8003746 <_strtoul_r+0x9e>
 8003712:	1c7e      	adds	r6, r7, #1
 8003714:	d005      	beq.n	8003722 <_strtoul_r+0x7a>
 8003716:	45cc      	cmp	ip, r9
 8003718:	d824      	bhi.n	8003764 <_strtoul_r+0xbc>
 800371a:	d021      	beq.n	8003760 <_strtoul_r+0xb8>
 800371c:	fb0a 5c0c 	mla	ip, sl, ip, r5
 8003720:	2701      	movs	r7, #1
 8003722:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003726:	eb0e 0605 	add.w	r6, lr, r5
 800372a:	7876      	ldrb	r6, [r6, #1]
 800372c:	f016 0f04 	tst.w	r6, #4
 8003730:	d1ec      	bne.n	800370c <_strtoul_r+0x64>
 8003732:	f016 0603 	ands.w	r6, r6, #3
 8003736:	d006      	beq.n	8003746 <_strtoul_r+0x9e>
 8003738:	2e01      	cmp	r6, #1
 800373a:	bf0c      	ite	eq
 800373c:	2637      	moveq	r6, #55	; 0x37
 800373e:	2657      	movne	r6, #87	; 0x57
 8003740:	1bad      	subs	r5, r5, r6
 8003742:	42ab      	cmp	r3, r5
 8003744:	dce5      	bgt.n	8003712 <_strtoul_r+0x6a>
 8003746:	2f00      	cmp	r7, #0
 8003748:	db11      	blt.n	800376e <_strtoul_r+0xc6>
 800374a:	f1c8 0000 	rsb	r0, r8, #0
 800374e:	ea8c 0000 	eor.w	r0, ip, r0
 8003752:	4440      	add	r0, r8
 8003754:	b14a      	cbz	r2, 800376a <_strtoul_r+0xc2>
 8003756:	b107      	cbz	r7, 800375a <_strtoul_r+0xb2>
 8003758:	1e61      	subs	r1, r4, #1
 800375a:	6011      	str	r1, [r2, #0]
 800375c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003760:	455d      	cmp	r5, fp
 8003762:	dddb      	ble.n	800371c <_strtoul_r+0x74>
 8003764:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003768:	e7db      	b.n	8003722 <_strtoul_r+0x7a>
 800376a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800376e:	2322      	movs	r3, #34	; 0x22
 8003770:	6003      	str	r3, [r0, #0]
 8003772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003776:	e7ed      	b.n	8003754 <_strtoul_r+0xac>
 8003778:	1cbc      	adds	r4, r7, #2
 800377a:	787d      	ldrb	r5, [r7, #1]
 800377c:	f04f 0801 	mov.w	r8, #1
 8003780:	e7ac      	b.n	80036dc <_strtoul_r+0x34>
 8003782:	7823      	ldrb	r3, [r4, #0]
 8003784:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003788:	2b58      	cmp	r3, #88	; 0x58
 800378a:	d013      	beq.n	80037b4 <_strtoul_r+0x10c>
 800378c:	2308      	movs	r3, #8
 800378e:	469a      	mov	sl, r3
 8003790:	f04f 0b07 	mov.w	fp, #7
 8003794:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 8003798:	e7b5      	b.n	8003706 <_strtoul_r+0x5e>
 800379a:	2d30      	cmp	r5, #48	; 0x30
 800379c:	d005      	beq.n	80037aa <_strtoul_r+0x102>
 800379e:	f04f 0b0f 	mov.w	fp, #15
 80037a2:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 80037a6:	469a      	mov	sl, r3
 80037a8:	e7ad      	b.n	8003706 <_strtoul_r+0x5e>
 80037aa:	7826      	ldrb	r6, [r4, #0]
 80037ac:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 80037b0:	2e58      	cmp	r6, #88	; 0x58
 80037b2:	d1f4      	bne.n	800379e <_strtoul_r+0xf6>
 80037b4:	f04f 0a10 	mov.w	sl, #16
 80037b8:	7865      	ldrb	r5, [r4, #1]
 80037ba:	4653      	mov	r3, sl
 80037bc:	f04f 0b0f 	mov.w	fp, #15
 80037c0:	3402      	adds	r4, #2
 80037c2:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 80037c6:	e79e      	b.n	8003706 <_strtoul_r+0x5e>
 80037c8:	2000001c 	.word	0x2000001c
 80037cc:	19999999 	.word	0x19999999

080037d0 <strtoul>:
 80037d0:	b430      	push	{r4, r5}
 80037d2:	4c04      	ldr	r4, [pc, #16]	; (80037e4 <strtoul+0x14>)
 80037d4:	460d      	mov	r5, r1
 80037d6:	4613      	mov	r3, r2
 80037d8:	4601      	mov	r1, r0
 80037da:	462a      	mov	r2, r5
 80037dc:	6820      	ldr	r0, [r4, #0]
 80037de:	bc30      	pop	{r4, r5}
 80037e0:	f7ff bf62 	b.w	80036a8 <_strtoul_r>
 80037e4:	20000448 	.word	0x20000448

080037e8 <__register_exitproc>:
 80037e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037ec:	4c25      	ldr	r4, [pc, #148]	; (8003884 <__register_exitproc+0x9c>)
 80037ee:	6825      	ldr	r5, [r4, #0]
 80037f0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80037f4:	4606      	mov	r6, r0
 80037f6:	4688      	mov	r8, r1
 80037f8:	4692      	mov	sl, r2
 80037fa:	4699      	mov	r9, r3
 80037fc:	b3cc      	cbz	r4, 8003872 <__register_exitproc+0x8a>
 80037fe:	6860      	ldr	r0, [r4, #4]
 8003800:	281f      	cmp	r0, #31
 8003802:	dc18      	bgt.n	8003836 <__register_exitproc+0x4e>
 8003804:	1c43      	adds	r3, r0, #1
 8003806:	b17e      	cbz	r6, 8003828 <__register_exitproc+0x40>
 8003808:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800380c:	2101      	movs	r1, #1
 800380e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8003812:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 8003816:	fa01 f200 	lsl.w	r2, r1, r0
 800381a:	4317      	orrs	r7, r2
 800381c:	2e02      	cmp	r6, #2
 800381e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8003822:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8003826:	d01e      	beq.n	8003866 <__register_exitproc+0x7e>
 8003828:	3002      	adds	r0, #2
 800382a:	6063      	str	r3, [r4, #4]
 800382c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8003830:	2000      	movs	r0, #0
 8003832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <__register_exitproc+0xa0>)
 8003838:	b303      	cbz	r3, 800387c <__register_exitproc+0x94>
 800383a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800383e:	f000 fc53 	bl	80040e8 <malloc>
 8003842:	4604      	mov	r4, r0
 8003844:	b1d0      	cbz	r0, 800387c <__register_exitproc+0x94>
 8003846:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800384a:	2700      	movs	r7, #0
 800384c:	e880 0088 	stmia.w	r0, {r3, r7}
 8003850:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8003854:	4638      	mov	r0, r7
 8003856:	2301      	movs	r3, #1
 8003858:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800385c:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8003860:	2e00      	cmp	r6, #0
 8003862:	d0e1      	beq.n	8003828 <__register_exitproc+0x40>
 8003864:	e7d0      	b.n	8003808 <__register_exitproc+0x20>
 8003866:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800386a:	430a      	orrs	r2, r1
 800386c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8003870:	e7da      	b.n	8003828 <__register_exitproc+0x40>
 8003872:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8003876:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800387a:	e7c0      	b.n	80037fe <__register_exitproc+0x16>
 800387c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003884:	0801538c 	.word	0x0801538c
 8003888:	080040e9 	.word	0x080040e9

0800388c <register_fini>:
 800388c:	4b02      	ldr	r3, [pc, #8]	; (8003898 <register_fini+0xc>)
 800388e:	b113      	cbz	r3, 8003896 <register_fini+0xa>
 8003890:	4802      	ldr	r0, [pc, #8]	; (800389c <register_fini+0x10>)
 8003892:	f7ff bda3 	b.w	80033dc <atexit>
 8003896:	4770      	bx	lr
 8003898:	00000000 	.word	0x00000000
 800389c:	080033f5 	.word	0x080033f5

080038a0 <__sflush_r>:
 80038a0:	898b      	ldrh	r3, [r1, #12]
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a8:	460d      	mov	r5, r1
 80038aa:	0711      	lsls	r1, r2, #28
 80038ac:	4680      	mov	r8, r0
 80038ae:	d43c      	bmi.n	800392a <__sflush_r+0x8a>
 80038b0:	686a      	ldr	r2, [r5, #4]
 80038b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038b6:	2a00      	cmp	r2, #0
 80038b8:	81ab      	strh	r3, [r5, #12]
 80038ba:	dd65      	ble.n	8003988 <__sflush_r+0xe8>
 80038bc:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80038be:	2e00      	cmp	r6, #0
 80038c0:	d04b      	beq.n	800395a <__sflush_r+0xba>
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038c8:	2100      	movs	r1, #0
 80038ca:	b292      	uxth	r2, r2
 80038cc:	f8d8 4000 	ldr.w	r4, [r8]
 80038d0:	f8c8 1000 	str.w	r1, [r8]
 80038d4:	2a00      	cmp	r2, #0
 80038d6:	d05b      	beq.n	8003990 <__sflush_r+0xf0>
 80038d8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80038da:	075f      	lsls	r7, r3, #29
 80038dc:	d505      	bpl.n	80038ea <__sflush_r+0x4a>
 80038de:	6869      	ldr	r1, [r5, #4]
 80038e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80038e2:	1a52      	subs	r2, r2, r1
 80038e4:	b10b      	cbz	r3, 80038ea <__sflush_r+0x4a>
 80038e6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80038e8:	1ad2      	subs	r2, r2, r3
 80038ea:	4640      	mov	r0, r8
 80038ec:	69e9      	ldr	r1, [r5, #28]
 80038ee:	2300      	movs	r3, #0
 80038f0:	47b0      	blx	r6
 80038f2:	1c46      	adds	r6, r0, #1
 80038f4:	d056      	beq.n	80039a4 <__sflush_r+0x104>
 80038f6:	89ab      	ldrh	r3, [r5, #12]
 80038f8:	692a      	ldr	r2, [r5, #16]
 80038fa:	602a      	str	r2, [r5, #0]
 80038fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003900:	b29b      	uxth	r3, r3
 8003902:	2200      	movs	r2, #0
 8003904:	606a      	str	r2, [r5, #4]
 8003906:	04da      	lsls	r2, r3, #19
 8003908:	81ab      	strh	r3, [r5, #12]
 800390a:	d43b      	bmi.n	8003984 <__sflush_r+0xe4>
 800390c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800390e:	f8c8 4000 	str.w	r4, [r8]
 8003912:	b311      	cbz	r1, 800395a <__sflush_r+0xba>
 8003914:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8003918:	4299      	cmp	r1, r3
 800391a:	d002      	beq.n	8003922 <__sflush_r+0x82>
 800391c:	4640      	mov	r0, r8
 800391e:	f000 f955 	bl	8003bcc <_free_r>
 8003922:	2000      	movs	r0, #0
 8003924:	6328      	str	r0, [r5, #48]	; 0x30
 8003926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800392a:	692e      	ldr	r6, [r5, #16]
 800392c:	b1ae      	cbz	r6, 800395a <__sflush_r+0xba>
 800392e:	682c      	ldr	r4, [r5, #0]
 8003930:	602e      	str	r6, [r5, #0]
 8003932:	0791      	lsls	r1, r2, #30
 8003934:	bf0c      	ite	eq
 8003936:	696b      	ldreq	r3, [r5, #20]
 8003938:	2300      	movne	r3, #0
 800393a:	1ba4      	subs	r4, r4, r6
 800393c:	60ab      	str	r3, [r5, #8]
 800393e:	e00a      	b.n	8003956 <__sflush_r+0xb6>
 8003940:	4632      	mov	r2, r6
 8003942:	4623      	mov	r3, r4
 8003944:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8003946:	69e9      	ldr	r1, [r5, #28]
 8003948:	4640      	mov	r0, r8
 800394a:	47b8      	blx	r7
 800394c:	2800      	cmp	r0, #0
 800394e:	eba4 0400 	sub.w	r4, r4, r0
 8003952:	4406      	add	r6, r0
 8003954:	dd04      	ble.n	8003960 <__sflush_r+0xc0>
 8003956:	2c00      	cmp	r4, #0
 8003958:	dcf2      	bgt.n	8003940 <__sflush_r+0xa0>
 800395a:	2000      	movs	r0, #0
 800395c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003960:	89ab      	ldrh	r3, [r5, #12]
 8003962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003966:	81ab      	strh	r3, [r5, #12]
 8003968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800396c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003970:	89ab      	ldrh	r3, [r5, #12]
 8003972:	692a      	ldr	r2, [r5, #16]
 8003974:	6069      	str	r1, [r5, #4]
 8003976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800397a:	b29b      	uxth	r3, r3
 800397c:	81ab      	strh	r3, [r5, #12]
 800397e:	04db      	lsls	r3, r3, #19
 8003980:	602a      	str	r2, [r5, #0]
 8003982:	d5c3      	bpl.n	800390c <__sflush_r+0x6c>
 8003984:	6528      	str	r0, [r5, #80]	; 0x50
 8003986:	e7c1      	b.n	800390c <__sflush_r+0x6c>
 8003988:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800398a:	2a00      	cmp	r2, #0
 800398c:	dc96      	bgt.n	80038bc <__sflush_r+0x1c>
 800398e:	e7e4      	b.n	800395a <__sflush_r+0xba>
 8003990:	2301      	movs	r3, #1
 8003992:	4640      	mov	r0, r8
 8003994:	69e9      	ldr	r1, [r5, #28]
 8003996:	47b0      	blx	r6
 8003998:	1c43      	adds	r3, r0, #1
 800399a:	4602      	mov	r2, r0
 800399c:	d019      	beq.n	80039d2 <__sflush_r+0x132>
 800399e:	89ab      	ldrh	r3, [r5, #12]
 80039a0:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80039a2:	e79a      	b.n	80038da <__sflush_r+0x3a>
 80039a4:	f8d8 1000 	ldr.w	r1, [r8]
 80039a8:	2900      	cmp	r1, #0
 80039aa:	d0e1      	beq.n	8003970 <__sflush_r+0xd0>
 80039ac:	291d      	cmp	r1, #29
 80039ae:	d007      	beq.n	80039c0 <__sflush_r+0x120>
 80039b0:	2916      	cmp	r1, #22
 80039b2:	d005      	beq.n	80039c0 <__sflush_r+0x120>
 80039b4:	89ab      	ldrh	r3, [r5, #12]
 80039b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ba:	81ab      	strh	r3, [r5, #12]
 80039bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039c0:	89ab      	ldrh	r3, [r5, #12]
 80039c2:	692a      	ldr	r2, [r5, #16]
 80039c4:	602a      	str	r2, [r5, #0]
 80039c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ca:	2200      	movs	r2, #0
 80039cc:	81ab      	strh	r3, [r5, #12]
 80039ce:	606a      	str	r2, [r5, #4]
 80039d0:	e79c      	b.n	800390c <__sflush_r+0x6c>
 80039d2:	f8d8 3000 	ldr.w	r3, [r8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0e1      	beq.n	800399e <__sflush_r+0xfe>
 80039da:	2b1d      	cmp	r3, #29
 80039dc:	d007      	beq.n	80039ee <__sflush_r+0x14e>
 80039de:	2b16      	cmp	r3, #22
 80039e0:	d005      	beq.n	80039ee <__sflush_r+0x14e>
 80039e2:	89ab      	ldrh	r3, [r5, #12]
 80039e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e8:	81ab      	strh	r3, [r5, #12]
 80039ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ee:	f8c8 4000 	str.w	r4, [r8]
 80039f2:	e7b2      	b.n	800395a <__sflush_r+0xba>

080039f4 <_fflush_r>:
 80039f4:	b510      	push	{r4, lr}
 80039f6:	4604      	mov	r4, r0
 80039f8:	b082      	sub	sp, #8
 80039fa:	b108      	cbz	r0, 8003a00 <_fflush_r+0xc>
 80039fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039fe:	b153      	cbz	r3, 8003a16 <_fflush_r+0x22>
 8003a00:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8003a04:	b908      	cbnz	r0, 8003a0a <_fflush_r+0x16>
 8003a06:	b002      	add	sp, #8
 8003a08:	bd10      	pop	{r4, pc}
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	b002      	add	sp, #8
 8003a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a12:	f7ff bf45 	b.w	80038a0 <__sflush_r>
 8003a16:	9101      	str	r1, [sp, #4]
 8003a18:	f000 f880 	bl	8003b1c <__sinit>
 8003a1c:	9901      	ldr	r1, [sp, #4]
 8003a1e:	e7ef      	b.n	8003a00 <_fflush_r+0xc>

08003a20 <_cleanup_r>:
 8003a20:	4901      	ldr	r1, [pc, #4]	; (8003a28 <_cleanup_r+0x8>)
 8003a22:	f000 bb37 	b.w	8004094 <_fwalk_reent>
 8003a26:	bf00      	nop
 8003a28:	08004db5 	.word	0x08004db5

08003a2c <__sinit.part.1>:
 8003a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a30:	4b35      	ldr	r3, [pc, #212]	; (8003b08 <__sinit.part.1+0xdc>)
 8003a32:	6845      	ldr	r5, [r0, #4]
 8003a34:	63c3      	str	r3, [r0, #60]	; 0x3c
 8003a36:	2400      	movs	r4, #0
 8003a38:	4607      	mov	r7, r0
 8003a3a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8003a3e:	2304      	movs	r3, #4
 8003a40:	2103      	movs	r1, #3
 8003a42:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8003a46:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8003a4a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8003a4e:	b083      	sub	sp, #12
 8003a50:	602c      	str	r4, [r5, #0]
 8003a52:	606c      	str	r4, [r5, #4]
 8003a54:	60ac      	str	r4, [r5, #8]
 8003a56:	666c      	str	r4, [r5, #100]	; 0x64
 8003a58:	81ec      	strh	r4, [r5, #14]
 8003a5a:	612c      	str	r4, [r5, #16]
 8003a5c:	616c      	str	r4, [r5, #20]
 8003a5e:	61ac      	str	r4, [r5, #24]
 8003a60:	81ab      	strh	r3, [r5, #12]
 8003a62:	4621      	mov	r1, r4
 8003a64:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003a68:	2208      	movs	r2, #8
 8003a6a:	f7ff fd01 	bl	8003470 <memset>
 8003a6e:	68be      	ldr	r6, [r7, #8]
 8003a70:	f8df b098 	ldr.w	fp, [pc, #152]	; 8003b0c <__sinit.part.1+0xe0>
 8003a74:	f8df a098 	ldr.w	sl, [pc, #152]	; 8003b10 <__sinit.part.1+0xe4>
 8003a78:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8003b14 <__sinit.part.1+0xe8>
 8003a7c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003b18 <__sinit.part.1+0xec>
 8003a80:	f8c5 b020 	str.w	fp, [r5, #32]
 8003a84:	2301      	movs	r3, #1
 8003a86:	2209      	movs	r2, #9
 8003a88:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8003a8c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8003a90:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8003a94:	61ed      	str	r5, [r5, #28]
 8003a96:	4621      	mov	r1, r4
 8003a98:	81f3      	strh	r3, [r6, #14]
 8003a9a:	81b2      	strh	r2, [r6, #12]
 8003a9c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8003aa0:	6034      	str	r4, [r6, #0]
 8003aa2:	6074      	str	r4, [r6, #4]
 8003aa4:	60b4      	str	r4, [r6, #8]
 8003aa6:	6674      	str	r4, [r6, #100]	; 0x64
 8003aa8:	6134      	str	r4, [r6, #16]
 8003aaa:	6174      	str	r4, [r6, #20]
 8003aac:	61b4      	str	r4, [r6, #24]
 8003aae:	2208      	movs	r2, #8
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	f7ff fcdd 	bl	8003470 <memset>
 8003ab6:	68fd      	ldr	r5, [r7, #12]
 8003ab8:	61f6      	str	r6, [r6, #28]
 8003aba:	2012      	movs	r0, #18
 8003abc:	2202      	movs	r2, #2
 8003abe:	f8c6 b020 	str.w	fp, [r6, #32]
 8003ac2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8003ac6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8003aca:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8003ace:	4621      	mov	r1, r4
 8003ad0:	81a8      	strh	r0, [r5, #12]
 8003ad2:	81ea      	strh	r2, [r5, #14]
 8003ad4:	602c      	str	r4, [r5, #0]
 8003ad6:	606c      	str	r4, [r5, #4]
 8003ad8:	60ac      	str	r4, [r5, #8]
 8003ada:	666c      	str	r4, [r5, #100]	; 0x64
 8003adc:	612c      	str	r4, [r5, #16]
 8003ade:	616c      	str	r4, [r5, #20]
 8003ae0:	61ac      	str	r4, [r5, #24]
 8003ae2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	f7ff fcc2 	bl	8003470 <memset>
 8003aec:	9b01      	ldr	r3, [sp, #4]
 8003aee:	61ed      	str	r5, [r5, #28]
 8003af0:	f8c5 b020 	str.w	fp, [r5, #32]
 8003af4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8003af8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8003afc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8003b00:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b02:	b003      	add	sp, #12
 8003b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b08:	08003a21 	.word	0x08003a21
 8003b0c:	08004bc5 	.word	0x08004bc5
 8003b10:	08004be9 	.word	0x08004be9
 8003b14:	08004c21 	.word	0x08004c21
 8003b18:	08004c41 	.word	0x08004c41

08003b1c <__sinit>:
 8003b1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b1e:	b103      	cbz	r3, 8003b22 <__sinit+0x6>
 8003b20:	4770      	bx	lr
 8003b22:	f7ff bf83 	b.w	8003a2c <__sinit.part.1>
 8003b26:	bf00      	nop

08003b28 <__sfp_lock_acquire>:
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop

08003b2c <__sfp_lock_release>:
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop

08003b30 <_malloc_trim_r>:
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	4f23      	ldr	r7, [pc, #140]	; (8003bc0 <_malloc_trim_r+0x90>)
 8003b34:	460c      	mov	r4, r1
 8003b36:	4606      	mov	r6, r0
 8003b38:	f000 fe1e 	bl	8004778 <__malloc_lock>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	685d      	ldr	r5, [r3, #4]
 8003b40:	f025 0503 	bic.w	r5, r5, #3
 8003b44:	1b29      	subs	r1, r5, r4
 8003b46:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8003b4a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8003b4e:	f021 010f 	bic.w	r1, r1, #15
 8003b52:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8003b56:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003b5a:	db07      	blt.n	8003b6c <_malloc_trim_r+0x3c>
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	2100      	movs	r1, #0
 8003b60:	f7fc fee0 	bl	8000924 <_sbrk_r>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	442b      	add	r3, r5
 8003b68:	4298      	cmp	r0, r3
 8003b6a:	d004      	beq.n	8003b76 <_malloc_trim_r+0x46>
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f000 fe05 	bl	800477c <__malloc_unlock>
 8003b72:	2000      	movs	r0, #0
 8003b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b76:	4630      	mov	r0, r6
 8003b78:	4261      	negs	r1, r4
 8003b7a:	f7fc fed3 	bl	8000924 <_sbrk_r>
 8003b7e:	3001      	adds	r0, #1
 8003b80:	d00d      	beq.n	8003b9e <_malloc_trim_r+0x6e>
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <_malloc_trim_r+0x94>)
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	6819      	ldr	r1, [r3, #0]
 8003b88:	1b2d      	subs	r5, r5, r4
 8003b8a:	f045 0501 	orr.w	r5, r5, #1
 8003b8e:	4630      	mov	r0, r6
 8003b90:	1b09      	subs	r1, r1, r4
 8003b92:	6055      	str	r5, [r2, #4]
 8003b94:	6019      	str	r1, [r3, #0]
 8003b96:	f000 fdf1 	bl	800477c <__malloc_unlock>
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	f7fc febf 	bl	8000924 <_sbrk_r>
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	1a83      	subs	r3, r0, r2
 8003baa:	2b0f      	cmp	r3, #15
 8003bac:	ddde      	ble.n	8003b6c <_malloc_trim_r+0x3c>
 8003bae:	4c06      	ldr	r4, [pc, #24]	; (8003bc8 <_malloc_trim_r+0x98>)
 8003bb0:	4904      	ldr	r1, [pc, #16]	; (8003bc4 <_malloc_trim_r+0x94>)
 8003bb2:	6824      	ldr	r4, [r4, #0]
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	1b00      	subs	r0, r0, r4
 8003bba:	6053      	str	r3, [r2, #4]
 8003bbc:	6008      	str	r0, [r1, #0]
 8003bbe:	e7d5      	b.n	8003b6c <_malloc_trim_r+0x3c>
 8003bc0:	2000044c 	.word	0x2000044c
 8003bc4:	200072cc 	.word	0x200072cc
 8003bc8:	20000858 	.word	0x20000858

08003bcc <_free_r>:
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	d04e      	beq.n	8003c6e <_free_r+0xa2>
 8003bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	4680      	mov	r8, r0
 8003bd8:	f000 fdce 	bl	8004778 <__malloc_lock>
 8003bdc:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8003be0:	4962      	ldr	r1, [pc, #392]	; (8003d6c <_free_r+0x1a0>)
 8003be2:	f027 0201 	bic.w	r2, r7, #1
 8003be6:	f1a4 0508 	sub.w	r5, r4, #8
 8003bea:	18ab      	adds	r3, r5, r2
 8003bec:	688e      	ldr	r6, [r1, #8]
 8003bee:	6858      	ldr	r0, [r3, #4]
 8003bf0:	429e      	cmp	r6, r3
 8003bf2:	f020 0003 	bic.w	r0, r0, #3
 8003bf6:	d05a      	beq.n	8003cae <_free_r+0xe2>
 8003bf8:	07fe      	lsls	r6, r7, #31
 8003bfa:	6058      	str	r0, [r3, #4]
 8003bfc:	d40b      	bmi.n	8003c16 <_free_r+0x4a>
 8003bfe:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8003c02:	1bed      	subs	r5, r5, r7
 8003c04:	f101 0e08 	add.w	lr, r1, #8
 8003c08:	68ac      	ldr	r4, [r5, #8]
 8003c0a:	4574      	cmp	r4, lr
 8003c0c:	443a      	add	r2, r7
 8003c0e:	d067      	beq.n	8003ce0 <_free_r+0x114>
 8003c10:	68ef      	ldr	r7, [r5, #12]
 8003c12:	60e7      	str	r7, [r4, #12]
 8003c14:	60bc      	str	r4, [r7, #8]
 8003c16:	181c      	adds	r4, r3, r0
 8003c18:	6864      	ldr	r4, [r4, #4]
 8003c1a:	07e4      	lsls	r4, r4, #31
 8003c1c:	d40c      	bmi.n	8003c38 <_free_r+0x6c>
 8003c1e:	4f54      	ldr	r7, [pc, #336]	; (8003d70 <_free_r+0x1a4>)
 8003c20:	689c      	ldr	r4, [r3, #8]
 8003c22:	42bc      	cmp	r4, r7
 8003c24:	4402      	add	r2, r0
 8003c26:	d07c      	beq.n	8003d22 <_free_r+0x156>
 8003c28:	68d8      	ldr	r0, [r3, #12]
 8003c2a:	60e0      	str	r0, [r4, #12]
 8003c2c:	f042 0301 	orr.w	r3, r2, #1
 8003c30:	6084      	str	r4, [r0, #8]
 8003c32:	606b      	str	r3, [r5, #4]
 8003c34:	50aa      	str	r2, [r5, r2]
 8003c36:	e003      	b.n	8003c40 <_free_r+0x74>
 8003c38:	f042 0301 	orr.w	r3, r2, #1
 8003c3c:	606b      	str	r3, [r5, #4]
 8003c3e:	50aa      	str	r2, [r5, r2]
 8003c40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003c44:	d214      	bcs.n	8003c70 <_free_r+0xa4>
 8003c46:	08d2      	lsrs	r2, r2, #3
 8003c48:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8003c4c:	6848      	ldr	r0, [r1, #4]
 8003c4e:	689f      	ldr	r7, [r3, #8]
 8003c50:	60af      	str	r7, [r5, #8]
 8003c52:	1092      	asrs	r2, r2, #2
 8003c54:	2401      	movs	r4, #1
 8003c56:	fa04 f202 	lsl.w	r2, r4, r2
 8003c5a:	4310      	orrs	r0, r2
 8003c5c:	60eb      	str	r3, [r5, #12]
 8003c5e:	6048      	str	r0, [r1, #4]
 8003c60:	609d      	str	r5, [r3, #8]
 8003c62:	60fd      	str	r5, [r7, #12]
 8003c64:	4640      	mov	r0, r8
 8003c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c6a:	f000 bd87 	b.w	800477c <__malloc_unlock>
 8003c6e:	4770      	bx	lr
 8003c70:	0a53      	lsrs	r3, r2, #9
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d847      	bhi.n	8003d06 <_free_r+0x13a>
 8003c76:	0993      	lsrs	r3, r2, #6
 8003c78:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8003c7c:	0060      	lsls	r0, r4, #1
 8003c7e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8003c82:	493a      	ldr	r1, [pc, #232]	; (8003d6c <_free_r+0x1a0>)
 8003c84:	6883      	ldr	r3, [r0, #8]
 8003c86:	4283      	cmp	r3, r0
 8003c88:	d043      	beq.n	8003d12 <_free_r+0x146>
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	f021 0103 	bic.w	r1, r1, #3
 8003c90:	4291      	cmp	r1, r2
 8003c92:	d902      	bls.n	8003c9a <_free_r+0xce>
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	4298      	cmp	r0, r3
 8003c98:	d1f7      	bne.n	8003c8a <_free_r+0xbe>
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	60ea      	str	r2, [r5, #12]
 8003c9e:	60ab      	str	r3, [r5, #8]
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	6095      	str	r5, [r2, #8]
 8003ca4:	60dd      	str	r5, [r3, #12]
 8003ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003caa:	f000 bd67 	b.w	800477c <__malloc_unlock>
 8003cae:	07ff      	lsls	r7, r7, #31
 8003cb0:	4402      	add	r2, r0
 8003cb2:	d407      	bmi.n	8003cc4 <_free_r+0xf8>
 8003cb4:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8003cb8:	1aed      	subs	r5, r5, r3
 8003cba:	441a      	add	r2, r3
 8003cbc:	68a8      	ldr	r0, [r5, #8]
 8003cbe:	68eb      	ldr	r3, [r5, #12]
 8003cc0:	60c3      	str	r3, [r0, #12]
 8003cc2:	6098      	str	r0, [r3, #8]
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <_free_r+0x1a8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0001 	orr.w	r0, r2, #1
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	6068      	str	r0, [r5, #4]
 8003cd0:	608d      	str	r5, [r1, #8]
 8003cd2:	d3c7      	bcc.n	8003c64 <_free_r+0x98>
 8003cd4:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <_free_r+0x1ac>)
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	6819      	ldr	r1, [r3, #0]
 8003cda:	f7ff ff29 	bl	8003b30 <_malloc_trim_r>
 8003cde:	e7c1      	b.n	8003c64 <_free_r+0x98>
 8003ce0:	1819      	adds	r1, r3, r0
 8003ce2:	6849      	ldr	r1, [r1, #4]
 8003ce4:	07c9      	lsls	r1, r1, #31
 8003ce6:	d409      	bmi.n	8003cfc <_free_r+0x130>
 8003ce8:	68d9      	ldr	r1, [r3, #12]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4402      	add	r2, r0
 8003cee:	f042 0001 	orr.w	r0, r2, #1
 8003cf2:	60d9      	str	r1, [r3, #12]
 8003cf4:	608b      	str	r3, [r1, #8]
 8003cf6:	6068      	str	r0, [r5, #4]
 8003cf8:	50aa      	str	r2, [r5, r2]
 8003cfa:	e7b3      	b.n	8003c64 <_free_r+0x98>
 8003cfc:	f042 0301 	orr.w	r3, r2, #1
 8003d00:	606b      	str	r3, [r5, #4]
 8003d02:	50aa      	str	r2, [r5, r2]
 8003d04:	e7ae      	b.n	8003c64 <_free_r+0x98>
 8003d06:	2b14      	cmp	r3, #20
 8003d08:	d814      	bhi.n	8003d34 <_free_r+0x168>
 8003d0a:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8003d0e:	0060      	lsls	r0, r4, #1
 8003d10:	e7b5      	b.n	8003c7e <_free_r+0xb2>
 8003d12:	684a      	ldr	r2, [r1, #4]
 8003d14:	10a4      	asrs	r4, r4, #2
 8003d16:	2001      	movs	r0, #1
 8003d18:	40a0      	lsls	r0, r4
 8003d1a:	4302      	orrs	r2, r0
 8003d1c:	604a      	str	r2, [r1, #4]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	e7bc      	b.n	8003c9c <_free_r+0xd0>
 8003d22:	f042 0301 	orr.w	r3, r2, #1
 8003d26:	614d      	str	r5, [r1, #20]
 8003d28:	610d      	str	r5, [r1, #16]
 8003d2a:	60ec      	str	r4, [r5, #12]
 8003d2c:	60ac      	str	r4, [r5, #8]
 8003d2e:	606b      	str	r3, [r5, #4]
 8003d30:	50aa      	str	r2, [r5, r2]
 8003d32:	e797      	b.n	8003c64 <_free_r+0x98>
 8003d34:	2b54      	cmp	r3, #84	; 0x54
 8003d36:	d804      	bhi.n	8003d42 <_free_r+0x176>
 8003d38:	0b13      	lsrs	r3, r2, #12
 8003d3a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8003d3e:	0060      	lsls	r0, r4, #1
 8003d40:	e79d      	b.n	8003c7e <_free_r+0xb2>
 8003d42:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003d46:	d804      	bhi.n	8003d52 <_free_r+0x186>
 8003d48:	0bd3      	lsrs	r3, r2, #15
 8003d4a:	f103 0477 	add.w	r4, r3, #119	; 0x77
 8003d4e:	0060      	lsls	r0, r4, #1
 8003d50:	e795      	b.n	8003c7e <_free_r+0xb2>
 8003d52:	f240 5054 	movw	r0, #1364	; 0x554
 8003d56:	4283      	cmp	r3, r0
 8003d58:	d804      	bhi.n	8003d64 <_free_r+0x198>
 8003d5a:	0c93      	lsrs	r3, r2, #18
 8003d5c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8003d60:	0060      	lsls	r0, r4, #1
 8003d62:	e78c      	b.n	8003c7e <_free_r+0xb2>
 8003d64:	20fc      	movs	r0, #252	; 0xfc
 8003d66:	247e      	movs	r4, #126	; 0x7e
 8003d68:	e789      	b.n	8003c7e <_free_r+0xb2>
 8003d6a:	bf00      	nop
 8003d6c:	2000044c 	.word	0x2000044c
 8003d70:	20000454 	.word	0x20000454
 8003d74:	20000854 	.word	0x20000854
 8003d78:	200072c8 	.word	0x200072c8

08003d7c <__sfvwrite_r>:
 8003d7c:	6893      	ldr	r3, [r2, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d07a      	beq.n	8003e78 <__sfvwrite_r+0xfc>
 8003d82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d86:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8003d8a:	f01e 0f08 	tst.w	lr, #8
 8003d8e:	b083      	sub	sp, #12
 8003d90:	460c      	mov	r4, r1
 8003d92:	4681      	mov	r9, r0
 8003d94:	4616      	mov	r6, r2
 8003d96:	d026      	beq.n	8003de6 <__sfvwrite_r+0x6a>
 8003d98:	690b      	ldr	r3, [r1, #16]
 8003d9a:	b323      	cbz	r3, 8003de6 <__sfvwrite_r+0x6a>
 8003d9c:	f00e 0802 	and.w	r8, lr, #2
 8003da0:	fa1f f088 	uxth.w	r0, r8
 8003da4:	6835      	ldr	r5, [r6, #0]
 8003da6:	b370      	cbz	r0, 8003e06 <__sfvwrite_r+0x8a>
 8003da8:	f04f 0a00 	mov.w	sl, #0
 8003dac:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8004090 <__sfvwrite_r+0x314>
 8003db0:	46d0      	mov	r8, sl
 8003db2:	45d8      	cmp	r8, fp
 8003db4:	4643      	mov	r3, r8
 8003db6:	4652      	mov	r2, sl
 8003db8:	bf28      	it	cs
 8003dba:	465b      	movcs	r3, fp
 8003dbc:	4648      	mov	r0, r9
 8003dbe:	f1b8 0f00 	cmp.w	r8, #0
 8003dc2:	d053      	beq.n	8003e6c <__sfvwrite_r+0xf0>
 8003dc4:	69e1      	ldr	r1, [r4, #28]
 8003dc6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003dc8:	47b8      	blx	r7
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	dd73      	ble.n	8003eb6 <__sfvwrite_r+0x13a>
 8003dce:	68b3      	ldr	r3, [r6, #8]
 8003dd0:	1a1b      	subs	r3, r3, r0
 8003dd2:	4482      	add	sl, r0
 8003dd4:	ebc0 0808 	rsb	r8, r0, r8
 8003dd8:	60b3      	str	r3, [r6, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e9      	bne.n	8003db2 <__sfvwrite_r+0x36>
 8003dde:	2000      	movs	r0, #0
 8003de0:	b003      	add	sp, #12
 8003de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de6:	4648      	mov	r0, r9
 8003de8:	4621      	mov	r1, r4
 8003dea:	f000 ff81 	bl	8004cf0 <__swsetup_r>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	f040 8145 	bne.w	800407e <__sfvwrite_r+0x302>
 8003df4:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8003df8:	6835      	ldr	r5, [r6, #0]
 8003dfa:	f00e 0802 	and.w	r8, lr, #2
 8003dfe:	fa1f f088 	uxth.w	r0, r8
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d1d0      	bne.n	8003da8 <__sfvwrite_r+0x2c>
 8003e06:	f01e 0b01 	ands.w	fp, lr, #1
 8003e0a:	d15d      	bne.n	8003ec8 <__sfvwrite_r+0x14c>
 8003e0c:	46d8      	mov	r8, fp
 8003e0e:	f1b8 0f00 	cmp.w	r8, #0
 8003e12:	d025      	beq.n	8003e60 <__sfvwrite_r+0xe4>
 8003e14:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8003e18:	68a7      	ldr	r7, [r4, #8]
 8003e1a:	d02f      	beq.n	8003e7c <__sfvwrite_r+0x100>
 8003e1c:	45b8      	cmp	r8, r7
 8003e1e:	46ba      	mov	sl, r7
 8003e20:	f0c0 80a9 	bcc.w	8003f76 <__sfvwrite_r+0x1fa>
 8003e24:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8003e28:	f040 80b6 	bne.w	8003f98 <__sfvwrite_r+0x21c>
 8003e2c:	6820      	ldr	r0, [r4, #0]
 8003e2e:	4652      	mov	r2, sl
 8003e30:	4659      	mov	r1, fp
 8003e32:	f000 fc3d 	bl	80046b0 <memmove>
 8003e36:	68a0      	ldr	r0, [r4, #8]
 8003e38:	6822      	ldr	r2, [r4, #0]
 8003e3a:	1bc0      	subs	r0, r0, r7
 8003e3c:	eb02 030a 	add.w	r3, r2, sl
 8003e40:	60a0      	str	r0, [r4, #8]
 8003e42:	6023      	str	r3, [r4, #0]
 8003e44:	4640      	mov	r0, r8
 8003e46:	68b3      	ldr	r3, [r6, #8]
 8003e48:	1a1b      	subs	r3, r3, r0
 8003e4a:	4483      	add	fp, r0
 8003e4c:	ebc0 0808 	rsb	r8, r0, r8
 8003e50:	60b3      	str	r3, [r6, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0c3      	beq.n	8003dde <__sfvwrite_r+0x62>
 8003e56:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8003e5a:	f1b8 0f00 	cmp.w	r8, #0
 8003e5e:	d1d9      	bne.n	8003e14 <__sfvwrite_r+0x98>
 8003e60:	f8d5 b000 	ldr.w	fp, [r5]
 8003e64:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8003e68:	3508      	adds	r5, #8
 8003e6a:	e7d0      	b.n	8003e0e <__sfvwrite_r+0x92>
 8003e6c:	f8d5 a000 	ldr.w	sl, [r5]
 8003e70:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8003e74:	3508      	adds	r5, #8
 8003e76:	e79c      	b.n	8003db2 <__sfvwrite_r+0x36>
 8003e78:	2000      	movs	r0, #0
 8003e7a:	4770      	bx	lr
 8003e7c:	6820      	ldr	r0, [r4, #0]
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	4298      	cmp	r0, r3
 8003e82:	d803      	bhi.n	8003e8c <__sfvwrite_r+0x110>
 8003e84:	6962      	ldr	r2, [r4, #20]
 8003e86:	4590      	cmp	r8, r2
 8003e88:	f080 80b9 	bcs.w	8003ffe <__sfvwrite_r+0x282>
 8003e8c:	4547      	cmp	r7, r8
 8003e8e:	bf28      	it	cs
 8003e90:	4647      	movcs	r7, r8
 8003e92:	463a      	mov	r2, r7
 8003e94:	4659      	mov	r1, fp
 8003e96:	f000 fc0b 	bl	80046b0 <memmove>
 8003e9a:	68a3      	ldr	r3, [r4, #8]
 8003e9c:	6822      	ldr	r2, [r4, #0]
 8003e9e:	1bdb      	subs	r3, r3, r7
 8003ea0:	443a      	add	r2, r7
 8003ea2:	60a3      	str	r3, [r4, #8]
 8003ea4:	6022      	str	r2, [r4, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d14a      	bne.n	8003f40 <__sfvwrite_r+0x1c4>
 8003eaa:	4648      	mov	r0, r9
 8003eac:	4621      	mov	r1, r4
 8003eae:	f7ff fda1 	bl	80039f4 <_fflush_r>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d044      	beq.n	8003f40 <__sfvwrite_r+0x1c4>
 8003eb6:	89a3      	ldrh	r3, [r4, #12]
 8003eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ec0:	81a3      	strh	r3, [r4, #12]
 8003ec2:	b003      	add	sp, #12
 8003ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec8:	4680      	mov	r8, r0
 8003eca:	9000      	str	r0, [sp, #0]
 8003ecc:	4683      	mov	fp, r0
 8003ece:	4682      	mov	sl, r0
 8003ed0:	f1ba 0f00 	cmp.w	sl, #0
 8003ed4:	d02c      	beq.n	8003f30 <__sfvwrite_r+0x1b4>
 8003ed6:	9b00      	ldr	r3, [sp, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d050      	beq.n	8003f7e <__sfvwrite_r+0x202>
 8003edc:	6820      	ldr	r0, [r4, #0]
 8003ede:	6921      	ldr	r1, [r4, #16]
 8003ee0:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8003ee4:	6962      	ldr	r2, [r4, #20]
 8003ee6:	45d0      	cmp	r8, sl
 8003ee8:	4643      	mov	r3, r8
 8003eea:	bf28      	it	cs
 8003eec:	4653      	movcs	r3, sl
 8003eee:	4288      	cmp	r0, r1
 8003ef0:	461f      	mov	r7, r3
 8003ef2:	d904      	bls.n	8003efe <__sfvwrite_r+0x182>
 8003ef4:	eb0e 0c02 	add.w	ip, lr, r2
 8003ef8:	4563      	cmp	r3, ip
 8003efa:	f300 8092 	bgt.w	8004022 <__sfvwrite_r+0x2a6>
 8003efe:	4293      	cmp	r3, r2
 8003f00:	db20      	blt.n	8003f44 <__sfvwrite_r+0x1c8>
 8003f02:	4613      	mov	r3, r2
 8003f04:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003f06:	69e1      	ldr	r1, [r4, #28]
 8003f08:	4648      	mov	r0, r9
 8003f0a:	465a      	mov	r2, fp
 8003f0c:	47b8      	blx	r7
 8003f0e:	1e07      	subs	r7, r0, #0
 8003f10:	ddd1      	ble.n	8003eb6 <__sfvwrite_r+0x13a>
 8003f12:	ebb8 0807 	subs.w	r8, r8, r7
 8003f16:	d025      	beq.n	8003f64 <__sfvwrite_r+0x1e8>
 8003f18:	68b3      	ldr	r3, [r6, #8]
 8003f1a:	1bdb      	subs	r3, r3, r7
 8003f1c:	44bb      	add	fp, r7
 8003f1e:	ebc7 0a0a 	rsb	sl, r7, sl
 8003f22:	60b3      	str	r3, [r6, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f43f af5a 	beq.w	8003dde <__sfvwrite_r+0x62>
 8003f2a:	f1ba 0f00 	cmp.w	sl, #0
 8003f2e:	d1d2      	bne.n	8003ed6 <__sfvwrite_r+0x15a>
 8003f30:	2300      	movs	r3, #0
 8003f32:	f8d5 b000 	ldr.w	fp, [r5]
 8003f36:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	3508      	adds	r5, #8
 8003f3e:	e7c7      	b.n	8003ed0 <__sfvwrite_r+0x154>
 8003f40:	4638      	mov	r0, r7
 8003f42:	e780      	b.n	8003e46 <__sfvwrite_r+0xca>
 8003f44:	461a      	mov	r2, r3
 8003f46:	4659      	mov	r1, fp
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	f000 fbb1 	bl	80046b0 <memmove>
 8003f4e:	68a2      	ldr	r2, [r4, #8]
 8003f50:	6821      	ldr	r1, [r4, #0]
 8003f52:	9b01      	ldr	r3, [sp, #4]
 8003f54:	ebb8 0807 	subs.w	r8, r8, r7
 8003f58:	eba2 0203 	sub.w	r2, r2, r3
 8003f5c:	440b      	add	r3, r1
 8003f5e:	60a2      	str	r2, [r4, #8]
 8003f60:	6023      	str	r3, [r4, #0]
 8003f62:	d1d9      	bne.n	8003f18 <__sfvwrite_r+0x19c>
 8003f64:	4648      	mov	r0, r9
 8003f66:	4621      	mov	r1, r4
 8003f68:	f7ff fd44 	bl	80039f4 <_fflush_r>
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	d1a2      	bne.n	8003eb6 <__sfvwrite_r+0x13a>
 8003f70:	f8cd 8000 	str.w	r8, [sp]
 8003f74:	e7d0      	b.n	8003f18 <__sfvwrite_r+0x19c>
 8003f76:	6820      	ldr	r0, [r4, #0]
 8003f78:	4647      	mov	r7, r8
 8003f7a:	46c2      	mov	sl, r8
 8003f7c:	e757      	b.n	8003e2e <__sfvwrite_r+0xb2>
 8003f7e:	4658      	mov	r0, fp
 8003f80:	210a      	movs	r1, #10
 8003f82:	4652      	mov	r2, sl
 8003f84:	f000 fb4a 	bl	800461c <memchr>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d073      	beq.n	8004074 <__sfvwrite_r+0x2f8>
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	2301      	movs	r3, #1
 8003f90:	ebcb 0800 	rsb	r8, fp, r0
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	e7a1      	b.n	8003edc <__sfvwrite_r+0x160>
 8003f98:	6967      	ldr	r7, [r4, #20]
 8003f9a:	6921      	ldr	r1, [r4, #16]
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8003fa2:	1a5b      	subs	r3, r3, r1
 8003fa4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8003fa8:	1c58      	adds	r0, r3, #1
 8003faa:	107f      	asrs	r7, r7, #1
 8003fac:	4440      	add	r0, r8
 8003fae:	4287      	cmp	r7, r0
 8003fb0:	463a      	mov	r2, r7
 8003fb2:	bf3c      	itt	cc
 8003fb4:	4607      	movcc	r7, r0
 8003fb6:	463a      	movcc	r2, r7
 8003fb8:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	d046      	beq.n	800404e <__sfvwrite_r+0x2d2>
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4648      	mov	r0, r9
 8003fc4:	f000 f898 	bl	80040f8 <_malloc_r>
 8003fc8:	9b00      	ldr	r3, [sp, #0]
 8003fca:	4682      	mov	sl, r0
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d059      	beq.n	8004084 <__sfvwrite_r+0x308>
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6921      	ldr	r1, [r4, #16]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	f7fc f92d 	bl	8000234 <memcpy>
 8003fda:	89a2      	ldrh	r2, [r4, #12]
 8003fdc:	9b00      	ldr	r3, [sp, #0]
 8003fde:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8003fe2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fe6:	81a2      	strh	r2, [r4, #12]
 8003fe8:	eb0a 0003 	add.w	r0, sl, r3
 8003fec:	1afb      	subs	r3, r7, r3
 8003fee:	f8c4 a010 	str.w	sl, [r4, #16]
 8003ff2:	6167      	str	r7, [r4, #20]
 8003ff4:	6020      	str	r0, [r4, #0]
 8003ff6:	60a3      	str	r3, [r4, #8]
 8003ff8:	4647      	mov	r7, r8
 8003ffa:	46c2      	mov	sl, r8
 8003ffc:	e717      	b.n	8003e2e <__sfvwrite_r+0xb2>
 8003ffe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004002:	4543      	cmp	r3, r8
 8004004:	bf28      	it	cs
 8004006:	4643      	movcs	r3, r8
 8004008:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800400a:	fb93 f3f2 	sdiv	r3, r3, r2
 800400e:	4648      	mov	r0, r9
 8004010:	fb03 f302 	mul.w	r3, r3, r2
 8004014:	69e1      	ldr	r1, [r4, #28]
 8004016:	465a      	mov	r2, fp
 8004018:	47b8      	blx	r7
 800401a:	2800      	cmp	r0, #0
 800401c:	f73f af13 	bgt.w	8003e46 <__sfvwrite_r+0xca>
 8004020:	e749      	b.n	8003eb6 <__sfvwrite_r+0x13a>
 8004022:	4662      	mov	r2, ip
 8004024:	4659      	mov	r1, fp
 8004026:	f8cd c004 	str.w	ip, [sp, #4]
 800402a:	f000 fb41 	bl	80046b0 <memmove>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004034:	4463      	add	r3, ip
 8004036:	6023      	str	r3, [r4, #0]
 8004038:	4648      	mov	r0, r9
 800403a:	4621      	mov	r1, r4
 800403c:	f7ff fcda 	bl	80039f4 <_fflush_r>
 8004040:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004044:	2800      	cmp	r0, #0
 8004046:	f47f af36 	bne.w	8003eb6 <__sfvwrite_r+0x13a>
 800404a:	4667      	mov	r7, ip
 800404c:	e761      	b.n	8003f12 <__sfvwrite_r+0x196>
 800404e:	4648      	mov	r0, r9
 8004050:	f000 fbc2 	bl	80047d8 <_realloc_r>
 8004054:	9b00      	ldr	r3, [sp, #0]
 8004056:	4682      	mov	sl, r0
 8004058:	2800      	cmp	r0, #0
 800405a:	d1c5      	bne.n	8003fe8 <__sfvwrite_r+0x26c>
 800405c:	4648      	mov	r0, r9
 800405e:	6921      	ldr	r1, [r4, #16]
 8004060:	f7ff fdb4 	bl	8003bcc <_free_r>
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	220c      	movs	r2, #12
 8004068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406c:	b29b      	uxth	r3, r3
 800406e:	f8c9 2000 	str.w	r2, [r9]
 8004072:	e721      	b.n	8003eb8 <__sfvwrite_r+0x13c>
 8004074:	2301      	movs	r3, #1
 8004076:	f10a 0801 	add.w	r8, sl, #1
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	e72e      	b.n	8003edc <__sfvwrite_r+0x160>
 800407e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004082:	e6ad      	b.n	8003de0 <__sfvwrite_r+0x64>
 8004084:	230c      	movs	r3, #12
 8004086:	f8c9 3000 	str.w	r3, [r9]
 800408a:	89a3      	ldrh	r3, [r4, #12]
 800408c:	e714      	b.n	8003eb8 <__sfvwrite_r+0x13c>
 800408e:	bf00      	nop
 8004090:	7ffffc00 	.word	0x7ffffc00

08004094 <_fwalk_reent>:
 8004094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004098:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800409c:	d01f      	beq.n	80040de <_fwalk_reent+0x4a>
 800409e:	4688      	mov	r8, r1
 80040a0:	4606      	mov	r6, r0
 80040a2:	f04f 0900 	mov.w	r9, #0
 80040a6:	687d      	ldr	r5, [r7, #4]
 80040a8:	68bc      	ldr	r4, [r7, #8]
 80040aa:	3d01      	subs	r5, #1
 80040ac:	d411      	bmi.n	80040d2 <_fwalk_reent+0x3e>
 80040ae:	89a3      	ldrh	r3, [r4, #12]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80040b6:	d908      	bls.n	80040ca <_fwalk_reent+0x36>
 80040b8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80040bc:	3301      	adds	r3, #1
 80040be:	4621      	mov	r1, r4
 80040c0:	4630      	mov	r0, r6
 80040c2:	d002      	beq.n	80040ca <_fwalk_reent+0x36>
 80040c4:	47c0      	blx	r8
 80040c6:	ea49 0900 	orr.w	r9, r9, r0
 80040ca:	1c6b      	adds	r3, r5, #1
 80040cc:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80040d0:	d1ed      	bne.n	80040ae <_fwalk_reent+0x1a>
 80040d2:	683f      	ldr	r7, [r7, #0]
 80040d4:	2f00      	cmp	r7, #0
 80040d6:	d1e6      	bne.n	80040a6 <_fwalk_reent+0x12>
 80040d8:	4648      	mov	r0, r9
 80040da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040de:	46b9      	mov	r9, r7
 80040e0:	4648      	mov	r0, r9
 80040e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040e6:	bf00      	nop

080040e8 <malloc>:
 80040e8:	4b02      	ldr	r3, [pc, #8]	; (80040f4 <malloc+0xc>)
 80040ea:	4601      	mov	r1, r0
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	f000 b803 	b.w	80040f8 <_malloc_r>
 80040f2:	bf00      	nop
 80040f4:	20000448 	.word	0x20000448

080040f8 <_malloc_r>:
 80040f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fc:	f101 050b 	add.w	r5, r1, #11
 8004100:	2d16      	cmp	r5, #22
 8004102:	b083      	sub	sp, #12
 8004104:	4606      	mov	r6, r0
 8004106:	d927      	bls.n	8004158 <_malloc_r+0x60>
 8004108:	f035 0507 	bics.w	r5, r5, #7
 800410c:	f100 80b6 	bmi.w	800427c <_malloc_r+0x184>
 8004110:	42a9      	cmp	r1, r5
 8004112:	f200 80b3 	bhi.w	800427c <_malloc_r+0x184>
 8004116:	f000 fb2f 	bl	8004778 <__malloc_lock>
 800411a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800411e:	d222      	bcs.n	8004166 <_malloc_r+0x6e>
 8004120:	4fc2      	ldr	r7, [pc, #776]	; (800442c <_malloc_r+0x334>)
 8004122:	08e8      	lsrs	r0, r5, #3
 8004124:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8004128:	68dc      	ldr	r4, [r3, #12]
 800412a:	429c      	cmp	r4, r3
 800412c:	f000 81c8 	beq.w	80044c0 <_malloc_r+0x3c8>
 8004130:	6863      	ldr	r3, [r4, #4]
 8004132:	68e1      	ldr	r1, [r4, #12]
 8004134:	68a5      	ldr	r5, [r4, #8]
 8004136:	f023 0303 	bic.w	r3, r3, #3
 800413a:	4423      	add	r3, r4
 800413c:	4630      	mov	r0, r6
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	60e9      	str	r1, [r5, #12]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	608d      	str	r5, [r1, #8]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	f000 fb17 	bl	800477c <__malloc_unlock>
 800414e:	3408      	adds	r4, #8
 8004150:	4620      	mov	r0, r4
 8004152:	b003      	add	sp, #12
 8004154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004158:	2910      	cmp	r1, #16
 800415a:	f200 808f 	bhi.w	800427c <_malloc_r+0x184>
 800415e:	f000 fb0b 	bl	8004778 <__malloc_lock>
 8004162:	2510      	movs	r5, #16
 8004164:	e7dc      	b.n	8004120 <_malloc_r+0x28>
 8004166:	0a68      	lsrs	r0, r5, #9
 8004168:	f000 808f 	beq.w	800428a <_malloc_r+0x192>
 800416c:	2804      	cmp	r0, #4
 800416e:	f200 8154 	bhi.w	800441a <_malloc_r+0x322>
 8004172:	09a8      	lsrs	r0, r5, #6
 8004174:	3038      	adds	r0, #56	; 0x38
 8004176:	0041      	lsls	r1, r0, #1
 8004178:	4fac      	ldr	r7, [pc, #688]	; (800442c <_malloc_r+0x334>)
 800417a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800417e:	68cc      	ldr	r4, [r1, #12]
 8004180:	42a1      	cmp	r1, r4
 8004182:	d106      	bne.n	8004192 <_malloc_r+0x9a>
 8004184:	e00c      	b.n	80041a0 <_malloc_r+0xa8>
 8004186:	2a00      	cmp	r2, #0
 8004188:	f280 8082 	bge.w	8004290 <_malloc_r+0x198>
 800418c:	68e4      	ldr	r4, [r4, #12]
 800418e:	42a1      	cmp	r1, r4
 8004190:	d006      	beq.n	80041a0 <_malloc_r+0xa8>
 8004192:	6863      	ldr	r3, [r4, #4]
 8004194:	f023 0303 	bic.w	r3, r3, #3
 8004198:	1b5a      	subs	r2, r3, r5
 800419a:	2a0f      	cmp	r2, #15
 800419c:	ddf3      	ble.n	8004186 <_malloc_r+0x8e>
 800419e:	3801      	subs	r0, #1
 80041a0:	3001      	adds	r0, #1
 80041a2:	49a2      	ldr	r1, [pc, #648]	; (800442c <_malloc_r+0x334>)
 80041a4:	693c      	ldr	r4, [r7, #16]
 80041a6:	f101 0e08 	add.w	lr, r1, #8
 80041aa:	4574      	cmp	r4, lr
 80041ac:	f000 817d 	beq.w	80044aa <_malloc_r+0x3b2>
 80041b0:	6863      	ldr	r3, [r4, #4]
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	1b5a      	subs	r2, r3, r5
 80041b8:	2a0f      	cmp	r2, #15
 80041ba:	f300 8163 	bgt.w	8004484 <_malloc_r+0x38c>
 80041be:	2a00      	cmp	r2, #0
 80041c0:	f8c1 e014 	str.w	lr, [r1, #20]
 80041c4:	f8c1 e010 	str.w	lr, [r1, #16]
 80041c8:	da73      	bge.n	80042b2 <_malloc_r+0x1ba>
 80041ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ce:	f080 8139 	bcs.w	8004444 <_malloc_r+0x34c>
 80041d2:	08db      	lsrs	r3, r3, #3
 80041d4:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 80041d8:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 80041dc:	684a      	ldr	r2, [r1, #4]
 80041de:	f8d8 9008 	ldr.w	r9, [r8, #8]
 80041e2:	f8c4 9008 	str.w	r9, [r4, #8]
 80041e6:	2301      	movs	r3, #1
 80041e8:	fa03 f30c 	lsl.w	r3, r3, ip
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c4 800c 	str.w	r8, [r4, #12]
 80041f2:	604b      	str	r3, [r1, #4]
 80041f4:	f8c8 4008 	str.w	r4, [r8, #8]
 80041f8:	f8c9 400c 	str.w	r4, [r9, #12]
 80041fc:	1082      	asrs	r2, r0, #2
 80041fe:	2401      	movs	r4, #1
 8004200:	4094      	lsls	r4, r2
 8004202:	429c      	cmp	r4, r3
 8004204:	d862      	bhi.n	80042cc <_malloc_r+0x1d4>
 8004206:	4223      	tst	r3, r4
 8004208:	d106      	bne.n	8004218 <_malloc_r+0x120>
 800420a:	f020 0003 	bic.w	r0, r0, #3
 800420e:	0064      	lsls	r4, r4, #1
 8004210:	4223      	tst	r3, r4
 8004212:	f100 0004 	add.w	r0, r0, #4
 8004216:	d0fa      	beq.n	800420e <_malloc_r+0x116>
 8004218:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 800421c:	46c4      	mov	ip, r8
 800421e:	4681      	mov	r9, r0
 8004220:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8004224:	459c      	cmp	ip, r3
 8004226:	d107      	bne.n	8004238 <_malloc_r+0x140>
 8004228:	e141      	b.n	80044ae <_malloc_r+0x3b6>
 800422a:	2900      	cmp	r1, #0
 800422c:	f280 8151 	bge.w	80044d2 <_malloc_r+0x3da>
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	459c      	cmp	ip, r3
 8004234:	f000 813b 	beq.w	80044ae <_malloc_r+0x3b6>
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	f022 0203 	bic.w	r2, r2, #3
 800423e:	1b51      	subs	r1, r2, r5
 8004240:	290f      	cmp	r1, #15
 8004242:	ddf2      	ble.n	800422a <_malloc_r+0x132>
 8004244:	461c      	mov	r4, r3
 8004246:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800424a:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800424e:	195a      	adds	r2, r3, r5
 8004250:	f045 0901 	orr.w	r9, r5, #1
 8004254:	f041 0501 	orr.w	r5, r1, #1
 8004258:	f8c3 9004 	str.w	r9, [r3, #4]
 800425c:	4630      	mov	r0, r6
 800425e:	f8c8 c00c 	str.w	ip, [r8, #12]
 8004262:	f8cc 8008 	str.w	r8, [ip, #8]
 8004266:	617a      	str	r2, [r7, #20]
 8004268:	613a      	str	r2, [r7, #16]
 800426a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800426e:	f8c2 e008 	str.w	lr, [r2, #8]
 8004272:	6055      	str	r5, [r2, #4]
 8004274:	5051      	str	r1, [r2, r1]
 8004276:	f000 fa81 	bl	800477c <__malloc_unlock>
 800427a:	e769      	b.n	8004150 <_malloc_r+0x58>
 800427c:	2400      	movs	r4, #0
 800427e:	230c      	movs	r3, #12
 8004280:	4620      	mov	r0, r4
 8004282:	6033      	str	r3, [r6, #0]
 8004284:	b003      	add	sp, #12
 8004286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428a:	217e      	movs	r1, #126	; 0x7e
 800428c:	203f      	movs	r0, #63	; 0x3f
 800428e:	e773      	b.n	8004178 <_malloc_r+0x80>
 8004290:	4423      	add	r3, r4
 8004292:	68e1      	ldr	r1, [r4, #12]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	68a5      	ldr	r5, [r4, #8]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	60e9      	str	r1, [r5, #12]
 800429e:	4630      	mov	r0, r6
 80042a0:	608d      	str	r5, [r1, #8]
 80042a2:	605a      	str	r2, [r3, #4]
 80042a4:	f000 fa6a 	bl	800477c <__malloc_unlock>
 80042a8:	3408      	adds	r4, #8
 80042aa:	4620      	mov	r0, r4
 80042ac:	b003      	add	sp, #12
 80042ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b2:	4423      	add	r3, r4
 80042b4:	4630      	mov	r0, r6
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	f042 0201 	orr.w	r2, r2, #1
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	f000 fa5d 	bl	800477c <__malloc_unlock>
 80042c2:	3408      	adds	r4, #8
 80042c4:	4620      	mov	r0, r4
 80042c6:	b003      	add	sp, #12
 80042c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042cc:	68bc      	ldr	r4, [r7, #8]
 80042ce:	6863      	ldr	r3, [r4, #4]
 80042d0:	f023 0803 	bic.w	r8, r3, #3
 80042d4:	4545      	cmp	r5, r8
 80042d6:	d804      	bhi.n	80042e2 <_malloc_r+0x1ea>
 80042d8:	ebc5 0308 	rsb	r3, r5, r8
 80042dc:	2b0f      	cmp	r3, #15
 80042de:	f300 808c 	bgt.w	80043fa <_malloc_r+0x302>
 80042e2:	4b53      	ldr	r3, [pc, #332]	; (8004430 <_malloc_r+0x338>)
 80042e4:	f8df a158 	ldr.w	sl, [pc, #344]	; 8004440 <_malloc_r+0x348>
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	f8da 3000 	ldr.w	r3, [sl]
 80042ee:	3301      	adds	r3, #1
 80042f0:	442a      	add	r2, r5
 80042f2:	eb04 0b08 	add.w	fp, r4, r8
 80042f6:	f000 8150 	beq.w	800459a <_malloc_r+0x4a2>
 80042fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042fe:	320f      	adds	r2, #15
 8004300:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004304:	f022 020f 	bic.w	r2, r2, #15
 8004308:	4611      	mov	r1, r2
 800430a:	4630      	mov	r0, r6
 800430c:	9201      	str	r2, [sp, #4]
 800430e:	f7fc fb09 	bl	8000924 <_sbrk_r>
 8004312:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004316:	4681      	mov	r9, r0
 8004318:	9a01      	ldr	r2, [sp, #4]
 800431a:	f000 8147 	beq.w	80045ac <_malloc_r+0x4b4>
 800431e:	4583      	cmp	fp, r0
 8004320:	f200 80ee 	bhi.w	8004500 <_malloc_r+0x408>
 8004324:	4b43      	ldr	r3, [pc, #268]	; (8004434 <_malloc_r+0x33c>)
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	45cb      	cmp	fp, r9
 800432a:	4411      	add	r1, r2
 800432c:	6019      	str	r1, [r3, #0]
 800432e:	f000 8142 	beq.w	80045b6 <_malloc_r+0x4be>
 8004332:	f8da 0000 	ldr.w	r0, [sl]
 8004336:	f8df e108 	ldr.w	lr, [pc, #264]	; 8004440 <_malloc_r+0x348>
 800433a:	3001      	adds	r0, #1
 800433c:	bf1b      	ittet	ne
 800433e:	ebcb 0b09 	rsbne	fp, fp, r9
 8004342:	4459      	addne	r1, fp
 8004344:	f8ce 9000 	streq.w	r9, [lr]
 8004348:	6019      	strne	r1, [r3, #0]
 800434a:	f019 0107 	ands.w	r1, r9, #7
 800434e:	f000 8107 	beq.w	8004560 <_malloc_r+0x468>
 8004352:	f1c1 0008 	rsb	r0, r1, #8
 8004356:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800435a:	4481      	add	r9, r0
 800435c:	3108      	adds	r1, #8
 800435e:	444a      	add	r2, r9
 8004360:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004364:	ebc2 0a01 	rsb	sl, r2, r1
 8004368:	4651      	mov	r1, sl
 800436a:	4630      	mov	r0, r6
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	f7fc fad9 	bl	8000924 <_sbrk_r>
 8004372:	1c43      	adds	r3, r0, #1
 8004374:	9b01      	ldr	r3, [sp, #4]
 8004376:	f000 812c 	beq.w	80045d2 <_malloc_r+0x4da>
 800437a:	ebc9 0200 	rsb	r2, r9, r0
 800437e:	4452      	add	r2, sl
 8004380:	f042 0201 	orr.w	r2, r2, #1
 8004384:	6819      	ldr	r1, [r3, #0]
 8004386:	f8c7 9008 	str.w	r9, [r7, #8]
 800438a:	4451      	add	r1, sl
 800438c:	42bc      	cmp	r4, r7
 800438e:	f8c9 2004 	str.w	r2, [r9, #4]
 8004392:	6019      	str	r1, [r3, #0]
 8004394:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8004434 <_malloc_r+0x33c>
 8004398:	d016      	beq.n	80043c8 <_malloc_r+0x2d0>
 800439a:	f1b8 0f0f 	cmp.w	r8, #15
 800439e:	f240 80ee 	bls.w	800457e <_malloc_r+0x486>
 80043a2:	6862      	ldr	r2, [r4, #4]
 80043a4:	f1a8 030c 	sub.w	r3, r8, #12
 80043a8:	f023 0307 	bic.w	r3, r3, #7
 80043ac:	18e0      	adds	r0, r4, r3
 80043ae:	f002 0201 	and.w	r2, r2, #1
 80043b2:	f04f 0e05 	mov.w	lr, #5
 80043b6:	431a      	orrs	r2, r3
 80043b8:	2b0f      	cmp	r3, #15
 80043ba:	6062      	str	r2, [r4, #4]
 80043bc:	f8c0 e004 	str.w	lr, [r0, #4]
 80043c0:	f8c0 e008 	str.w	lr, [r0, #8]
 80043c4:	f200 8109 	bhi.w	80045da <_malloc_r+0x4e2>
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <_malloc_r+0x340>)
 80043ca:	68bc      	ldr	r4, [r7, #8]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4291      	cmp	r1, r2
 80043d0:	bf88      	it	hi
 80043d2:	6019      	strhi	r1, [r3, #0]
 80043d4:	4b19      	ldr	r3, [pc, #100]	; (800443c <_malloc_r+0x344>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4291      	cmp	r1, r2
 80043da:	6862      	ldr	r2, [r4, #4]
 80043dc:	bf88      	it	hi
 80043de:	6019      	strhi	r1, [r3, #0]
 80043e0:	f022 0203 	bic.w	r2, r2, #3
 80043e4:	4295      	cmp	r5, r2
 80043e6:	eba2 0305 	sub.w	r3, r2, r5
 80043ea:	d801      	bhi.n	80043f0 <_malloc_r+0x2f8>
 80043ec:	2b0f      	cmp	r3, #15
 80043ee:	dc04      	bgt.n	80043fa <_malloc_r+0x302>
 80043f0:	4630      	mov	r0, r6
 80043f2:	f000 f9c3 	bl	800477c <__malloc_unlock>
 80043f6:	2400      	movs	r4, #0
 80043f8:	e6aa      	b.n	8004150 <_malloc_r+0x58>
 80043fa:	1962      	adds	r2, r4, r5
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	f045 0501 	orr.w	r5, r5, #1
 8004404:	6065      	str	r5, [r4, #4]
 8004406:	4630      	mov	r0, r6
 8004408:	60ba      	str	r2, [r7, #8]
 800440a:	6053      	str	r3, [r2, #4]
 800440c:	f000 f9b6 	bl	800477c <__malloc_unlock>
 8004410:	3408      	adds	r4, #8
 8004412:	4620      	mov	r0, r4
 8004414:	b003      	add	sp, #12
 8004416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441a:	2814      	cmp	r0, #20
 800441c:	d968      	bls.n	80044f0 <_malloc_r+0x3f8>
 800441e:	2854      	cmp	r0, #84	; 0x54
 8004420:	f200 8097 	bhi.w	8004552 <_malloc_r+0x45a>
 8004424:	0b28      	lsrs	r0, r5, #12
 8004426:	306e      	adds	r0, #110	; 0x6e
 8004428:	0041      	lsls	r1, r0, #1
 800442a:	e6a5      	b.n	8004178 <_malloc_r+0x80>
 800442c:	2000044c 	.word	0x2000044c
 8004430:	200072c8 	.word	0x200072c8
 8004434:	200072cc 	.word	0x200072cc
 8004438:	200072c4 	.word	0x200072c4
 800443c:	200072c0 	.word	0x200072c0
 8004440:	20000858 	.word	0x20000858
 8004444:	0a5a      	lsrs	r2, r3, #9
 8004446:	2a04      	cmp	r2, #4
 8004448:	d955      	bls.n	80044f6 <_malloc_r+0x3fe>
 800444a:	2a14      	cmp	r2, #20
 800444c:	f200 80a7 	bhi.w	800459e <_malloc_r+0x4a6>
 8004450:	325b      	adds	r2, #91	; 0x5b
 8004452:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8004456:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 800445a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004618 <_malloc_r+0x520>
 800445e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004462:	4561      	cmp	r1, ip
 8004464:	d07f      	beq.n	8004566 <_malloc_r+0x46e>
 8004466:	684a      	ldr	r2, [r1, #4]
 8004468:	f022 0203 	bic.w	r2, r2, #3
 800446c:	4293      	cmp	r3, r2
 800446e:	d202      	bcs.n	8004476 <_malloc_r+0x37e>
 8004470:	6889      	ldr	r1, [r1, #8]
 8004472:	458c      	cmp	ip, r1
 8004474:	d1f7      	bne.n	8004466 <_malloc_r+0x36e>
 8004476:	68ca      	ldr	r2, [r1, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	60e2      	str	r2, [r4, #12]
 800447c:	60a1      	str	r1, [r4, #8]
 800447e:	6094      	str	r4, [r2, #8]
 8004480:	60cc      	str	r4, [r1, #12]
 8004482:	e6bb      	b.n	80041fc <_malloc_r+0x104>
 8004484:	1963      	adds	r3, r4, r5
 8004486:	f042 0701 	orr.w	r7, r2, #1
 800448a:	f045 0501 	orr.w	r5, r5, #1
 800448e:	6065      	str	r5, [r4, #4]
 8004490:	4630      	mov	r0, r6
 8004492:	614b      	str	r3, [r1, #20]
 8004494:	610b      	str	r3, [r1, #16]
 8004496:	f8c3 e00c 	str.w	lr, [r3, #12]
 800449a:	f8c3 e008 	str.w	lr, [r3, #8]
 800449e:	605f      	str	r7, [r3, #4]
 80044a0:	509a      	str	r2, [r3, r2]
 80044a2:	3408      	adds	r4, #8
 80044a4:	f000 f96a 	bl	800477c <__malloc_unlock>
 80044a8:	e652      	b.n	8004150 <_malloc_r+0x58>
 80044aa:	684b      	ldr	r3, [r1, #4]
 80044ac:	e6a6      	b.n	80041fc <_malloc_r+0x104>
 80044ae:	f109 0901 	add.w	r9, r9, #1
 80044b2:	f019 0f03 	tst.w	r9, #3
 80044b6:	f10c 0c08 	add.w	ip, ip, #8
 80044ba:	f47f aeb1 	bne.w	8004220 <_malloc_r+0x128>
 80044be:	e02c      	b.n	800451a <_malloc_r+0x422>
 80044c0:	f104 0308 	add.w	r3, r4, #8
 80044c4:	6964      	ldr	r4, [r4, #20]
 80044c6:	42a3      	cmp	r3, r4
 80044c8:	bf08      	it	eq
 80044ca:	3002      	addeq	r0, #2
 80044cc:	f43f ae69 	beq.w	80041a2 <_malloc_r+0xaa>
 80044d0:	e62e      	b.n	8004130 <_malloc_r+0x38>
 80044d2:	441a      	add	r2, r3
 80044d4:	461c      	mov	r4, r3
 80044d6:	6851      	ldr	r1, [r2, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80044de:	f041 0101 	orr.w	r1, r1, #1
 80044e2:	6051      	str	r1, [r2, #4]
 80044e4:	4630      	mov	r0, r6
 80044e6:	60eb      	str	r3, [r5, #12]
 80044e8:	609d      	str	r5, [r3, #8]
 80044ea:	f000 f947 	bl	800477c <__malloc_unlock>
 80044ee:	e62f      	b.n	8004150 <_malloc_r+0x58>
 80044f0:	305b      	adds	r0, #91	; 0x5b
 80044f2:	0041      	lsls	r1, r0, #1
 80044f4:	e640      	b.n	8004178 <_malloc_r+0x80>
 80044f6:	099a      	lsrs	r2, r3, #6
 80044f8:	3238      	adds	r2, #56	; 0x38
 80044fa:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80044fe:	e7aa      	b.n	8004456 <_malloc_r+0x35e>
 8004500:	42bc      	cmp	r4, r7
 8004502:	4b45      	ldr	r3, [pc, #276]	; (8004618 <_malloc_r+0x520>)
 8004504:	f43f af0e 	beq.w	8004324 <_malloc_r+0x22c>
 8004508:	689c      	ldr	r4, [r3, #8]
 800450a:	6862      	ldr	r2, [r4, #4]
 800450c:	f022 0203 	bic.w	r2, r2, #3
 8004510:	e768      	b.n	80043e4 <_malloc_r+0x2ec>
 8004512:	f8d8 8000 	ldr.w	r8, [r8]
 8004516:	4598      	cmp	r8, r3
 8004518:	d17c      	bne.n	8004614 <_malloc_r+0x51c>
 800451a:	f010 0f03 	tst.w	r0, #3
 800451e:	f1a8 0308 	sub.w	r3, r8, #8
 8004522:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8004526:	d1f4      	bne.n	8004512 <_malloc_r+0x41a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	ea23 0304 	bic.w	r3, r3, r4
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	0064      	lsls	r4, r4, #1
 8004532:	429c      	cmp	r4, r3
 8004534:	f63f aeca 	bhi.w	80042cc <_malloc_r+0x1d4>
 8004538:	2c00      	cmp	r4, #0
 800453a:	f43f aec7 	beq.w	80042cc <_malloc_r+0x1d4>
 800453e:	4223      	tst	r3, r4
 8004540:	4648      	mov	r0, r9
 8004542:	f47f ae69 	bne.w	8004218 <_malloc_r+0x120>
 8004546:	0064      	lsls	r4, r4, #1
 8004548:	4223      	tst	r3, r4
 800454a:	f100 0004 	add.w	r0, r0, #4
 800454e:	d0fa      	beq.n	8004546 <_malloc_r+0x44e>
 8004550:	e662      	b.n	8004218 <_malloc_r+0x120>
 8004552:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8004556:	d818      	bhi.n	800458a <_malloc_r+0x492>
 8004558:	0be8      	lsrs	r0, r5, #15
 800455a:	3077      	adds	r0, #119	; 0x77
 800455c:	0041      	lsls	r1, r0, #1
 800455e:	e60b      	b.n	8004178 <_malloc_r+0x80>
 8004560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004564:	e6fb      	b.n	800435e <_malloc_r+0x266>
 8004566:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800456a:	1092      	asrs	r2, r2, #2
 800456c:	f04f 0c01 	mov.w	ip, #1
 8004570:	fa0c f202 	lsl.w	r2, ip, r2
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c8 3004 	str.w	r3, [r8, #4]
 800457a:	460a      	mov	r2, r1
 800457c:	e77d      	b.n	800447a <_malloc_r+0x382>
 800457e:	2301      	movs	r3, #1
 8004580:	f8c9 3004 	str.w	r3, [r9, #4]
 8004584:	464c      	mov	r4, r9
 8004586:	2200      	movs	r2, #0
 8004588:	e72c      	b.n	80043e4 <_malloc_r+0x2ec>
 800458a:	f240 5354 	movw	r3, #1364	; 0x554
 800458e:	4298      	cmp	r0, r3
 8004590:	d81c      	bhi.n	80045cc <_malloc_r+0x4d4>
 8004592:	0ca8      	lsrs	r0, r5, #18
 8004594:	307c      	adds	r0, #124	; 0x7c
 8004596:	0041      	lsls	r1, r0, #1
 8004598:	e5ee      	b.n	8004178 <_malloc_r+0x80>
 800459a:	3210      	adds	r2, #16
 800459c:	e6b4      	b.n	8004308 <_malloc_r+0x210>
 800459e:	2a54      	cmp	r2, #84	; 0x54
 80045a0:	d823      	bhi.n	80045ea <_malloc_r+0x4f2>
 80045a2:	0b1a      	lsrs	r2, r3, #12
 80045a4:	326e      	adds	r2, #110	; 0x6e
 80045a6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80045aa:	e754      	b.n	8004456 <_malloc_r+0x35e>
 80045ac:	68bc      	ldr	r4, [r7, #8]
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	f022 0203 	bic.w	r2, r2, #3
 80045b4:	e716      	b.n	80043e4 <_malloc_r+0x2ec>
 80045b6:	f3cb 000b 	ubfx	r0, fp, #0, #12
 80045ba:	2800      	cmp	r0, #0
 80045bc:	f47f aeb9 	bne.w	8004332 <_malloc_r+0x23a>
 80045c0:	4442      	add	r2, r8
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	e6fd      	b.n	80043c8 <_malloc_r+0x2d0>
 80045cc:	21fc      	movs	r1, #252	; 0xfc
 80045ce:	207e      	movs	r0, #126	; 0x7e
 80045d0:	e5d2      	b.n	8004178 <_malloc_r+0x80>
 80045d2:	2201      	movs	r2, #1
 80045d4:	f04f 0a00 	mov.w	sl, #0
 80045d8:	e6d4      	b.n	8004384 <_malloc_r+0x28c>
 80045da:	f104 0108 	add.w	r1, r4, #8
 80045de:	4630      	mov	r0, r6
 80045e0:	f7ff faf4 	bl	8003bcc <_free_r>
 80045e4:	f8da 1000 	ldr.w	r1, [sl]
 80045e8:	e6ee      	b.n	80043c8 <_malloc_r+0x2d0>
 80045ea:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80045ee:	d804      	bhi.n	80045fa <_malloc_r+0x502>
 80045f0:	0bda      	lsrs	r2, r3, #15
 80045f2:	3277      	adds	r2, #119	; 0x77
 80045f4:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80045f8:	e72d      	b.n	8004456 <_malloc_r+0x35e>
 80045fa:	f240 5154 	movw	r1, #1364	; 0x554
 80045fe:	428a      	cmp	r2, r1
 8004600:	d804      	bhi.n	800460c <_malloc_r+0x514>
 8004602:	0c9a      	lsrs	r2, r3, #18
 8004604:	327c      	adds	r2, #124	; 0x7c
 8004606:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800460a:	e724      	b.n	8004456 <_malloc_r+0x35e>
 800460c:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8004610:	227e      	movs	r2, #126	; 0x7e
 8004612:	e720      	b.n	8004456 <_malloc_r+0x35e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	e78b      	b.n	8004530 <_malloc_r+0x438>
 8004618:	2000044c 	.word	0x2000044c

0800461c <memchr>:
 800461c:	0783      	lsls	r3, r0, #30
 800461e:	b470      	push	{r4, r5, r6}
 8004620:	b2c9      	uxtb	r1, r1
 8004622:	d040      	beq.n	80046a6 <memchr+0x8a>
 8004624:	1e54      	subs	r4, r2, #1
 8004626:	2a00      	cmp	r2, #0
 8004628:	d03f      	beq.n	80046aa <memchr+0x8e>
 800462a:	7803      	ldrb	r3, [r0, #0]
 800462c:	428b      	cmp	r3, r1
 800462e:	bf18      	it	ne
 8004630:	1c43      	addne	r3, r0, #1
 8004632:	d106      	bne.n	8004642 <memchr+0x26>
 8004634:	e01d      	b.n	8004672 <memchr+0x56>
 8004636:	b1f4      	cbz	r4, 8004676 <memchr+0x5a>
 8004638:	7802      	ldrb	r2, [r0, #0]
 800463a:	428a      	cmp	r2, r1
 800463c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004640:	d017      	beq.n	8004672 <memchr+0x56>
 8004642:	f013 0f03 	tst.w	r3, #3
 8004646:	4618      	mov	r0, r3
 8004648:	f103 0301 	add.w	r3, r3, #1
 800464c:	d1f3      	bne.n	8004636 <memchr+0x1a>
 800464e:	2c03      	cmp	r4, #3
 8004650:	d814      	bhi.n	800467c <memchr+0x60>
 8004652:	b184      	cbz	r4, 8004676 <memchr+0x5a>
 8004654:	7803      	ldrb	r3, [r0, #0]
 8004656:	428b      	cmp	r3, r1
 8004658:	d00b      	beq.n	8004672 <memchr+0x56>
 800465a:	1905      	adds	r5, r0, r4
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	e002      	b.n	8004666 <memchr+0x4a>
 8004660:	7802      	ldrb	r2, [r0, #0]
 8004662:	428a      	cmp	r2, r1
 8004664:	d005      	beq.n	8004672 <memchr+0x56>
 8004666:	42ab      	cmp	r3, r5
 8004668:	4618      	mov	r0, r3
 800466a:	f103 0301 	add.w	r3, r3, #1
 800466e:	d1f7      	bne.n	8004660 <memchr+0x44>
 8004670:	2000      	movs	r0, #0
 8004672:	bc70      	pop	{r4, r5, r6}
 8004674:	4770      	bx	lr
 8004676:	4620      	mov	r0, r4
 8004678:	bc70      	pop	{r4, r5, r6}
 800467a:	4770      	bx	lr
 800467c:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8004680:	4602      	mov	r2, r0
 8004682:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8004686:	4610      	mov	r0, r2
 8004688:	3204      	adds	r2, #4
 800468a:	6803      	ldr	r3, [r0, #0]
 800468c:	4073      	eors	r3, r6
 800468e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8004692:	ea25 0303 	bic.w	r3, r5, r3
 8004696:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800469a:	d1da      	bne.n	8004652 <memchr+0x36>
 800469c:	3c04      	subs	r4, #4
 800469e:	2c03      	cmp	r4, #3
 80046a0:	4610      	mov	r0, r2
 80046a2:	d8f0      	bhi.n	8004686 <memchr+0x6a>
 80046a4:	e7d5      	b.n	8004652 <memchr+0x36>
 80046a6:	4614      	mov	r4, r2
 80046a8:	e7d1      	b.n	800464e <memchr+0x32>
 80046aa:	4610      	mov	r0, r2
 80046ac:	e7e1      	b.n	8004672 <memchr+0x56>
 80046ae:	bf00      	nop

080046b0 <memmove>:
 80046b0:	4288      	cmp	r0, r1
 80046b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046b4:	d90d      	bls.n	80046d2 <memmove+0x22>
 80046b6:	188b      	adds	r3, r1, r2
 80046b8:	4298      	cmp	r0, r3
 80046ba:	d20a      	bcs.n	80046d2 <memmove+0x22>
 80046bc:	1881      	adds	r1, r0, r2
 80046be:	2a00      	cmp	r2, #0
 80046c0:	d054      	beq.n	800476c <memmove+0xbc>
 80046c2:	1a9a      	subs	r2, r3, r2
 80046c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d1f9      	bne.n	80046c4 <memmove+0x14>
 80046d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d2:	2a0f      	cmp	r2, #15
 80046d4:	d948      	bls.n	8004768 <memmove+0xb8>
 80046d6:	ea40 0301 	orr.w	r3, r0, r1
 80046da:	079b      	lsls	r3, r3, #30
 80046dc:	d147      	bne.n	800476e <memmove+0xbe>
 80046de:	f100 0410 	add.w	r4, r0, #16
 80046e2:	f101 0310 	add.w	r3, r1, #16
 80046e6:	4615      	mov	r5, r2
 80046e8:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80046ec:	f844 6c10 	str.w	r6, [r4, #-16]
 80046f0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80046f4:	f844 6c0c 	str.w	r6, [r4, #-12]
 80046f8:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80046fc:	f844 6c08 	str.w	r6, [r4, #-8]
 8004700:	3d10      	subs	r5, #16
 8004702:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8004706:	f844 6c04 	str.w	r6, [r4, #-4]
 800470a:	2d0f      	cmp	r5, #15
 800470c:	f103 0310 	add.w	r3, r3, #16
 8004710:	f104 0410 	add.w	r4, r4, #16
 8004714:	d8e8      	bhi.n	80046e8 <memmove+0x38>
 8004716:	f1a2 0310 	sub.w	r3, r2, #16
 800471a:	f023 030f 	bic.w	r3, r3, #15
 800471e:	f002 0e0f 	and.w	lr, r2, #15
 8004722:	3310      	adds	r3, #16
 8004724:	f1be 0f03 	cmp.w	lr, #3
 8004728:	4419      	add	r1, r3
 800472a:	4403      	add	r3, r0
 800472c:	d921      	bls.n	8004772 <memmove+0xc2>
 800472e:	1f1e      	subs	r6, r3, #4
 8004730:	460d      	mov	r5, r1
 8004732:	4674      	mov	r4, lr
 8004734:	3c04      	subs	r4, #4
 8004736:	f855 7b04 	ldr.w	r7, [r5], #4
 800473a:	f846 7f04 	str.w	r7, [r6, #4]!
 800473e:	2c03      	cmp	r4, #3
 8004740:	d8f8      	bhi.n	8004734 <memmove+0x84>
 8004742:	f1ae 0404 	sub.w	r4, lr, #4
 8004746:	f024 0403 	bic.w	r4, r4, #3
 800474a:	3404      	adds	r4, #4
 800474c:	4423      	add	r3, r4
 800474e:	4421      	add	r1, r4
 8004750:	f002 0203 	and.w	r2, r2, #3
 8004754:	b152      	cbz	r2, 800476c <memmove+0xbc>
 8004756:	3b01      	subs	r3, #1
 8004758:	440a      	add	r2, r1
 800475a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800475e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004762:	4291      	cmp	r1, r2
 8004764:	d1f9      	bne.n	800475a <memmove+0xaa>
 8004766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004768:	4603      	mov	r3, r0
 800476a:	e7f3      	b.n	8004754 <memmove+0xa4>
 800476c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800476e:	4603      	mov	r3, r0
 8004770:	e7f1      	b.n	8004756 <memmove+0xa6>
 8004772:	4672      	mov	r2, lr
 8004774:	e7ee      	b.n	8004754 <memmove+0xa4>
 8004776:	bf00      	nop

08004778 <__malloc_lock>:
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop

0800477c <__malloc_unlock>:
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop

08004780 <_putc_r>:
 8004780:	b570      	push	{r4, r5, r6, lr}
 8004782:	460d      	mov	r5, r1
 8004784:	4614      	mov	r4, r2
 8004786:	4606      	mov	r6, r0
 8004788:	b108      	cbz	r0, 800478e <_putc_r+0xe>
 800478a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800478c:	b1d3      	cbz	r3, 80047c4 <_putc_r+0x44>
 800478e:	68a3      	ldr	r3, [r4, #8]
 8004790:	3b01      	subs	r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	60a3      	str	r3, [r4, #8]
 8004796:	db06      	blt.n	80047a6 <_putc_r+0x26>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	701d      	strb	r5, [r3, #0]
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	6022      	str	r2, [r4, #0]
 80047a2:	7818      	ldrb	r0, [r3, #0]
 80047a4:	bd70      	pop	{r4, r5, r6, pc}
 80047a6:	69a2      	ldr	r2, [r4, #24]
 80047a8:	4293      	cmp	r3, r2
 80047aa:	db0e      	blt.n	80047ca <_putc_r+0x4a>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	701d      	strb	r5, [r3, #0]
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	7819      	ldrb	r1, [r3, #0]
 80047b4:	290a      	cmp	r1, #10
 80047b6:	d1f2      	bne.n	800479e <_putc_r+0x1e>
 80047b8:	4630      	mov	r0, r6
 80047ba:	4622      	mov	r2, r4
 80047bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80047c0:	f000 ba42 	b.w	8004c48 <__swbuf_r>
 80047c4:	f7ff f9aa 	bl	8003b1c <__sinit>
 80047c8:	e7e1      	b.n	800478e <_putc_r+0xe>
 80047ca:	4630      	mov	r0, r6
 80047cc:	4629      	mov	r1, r5
 80047ce:	4622      	mov	r2, r4
 80047d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80047d4:	f000 ba38 	b.w	8004c48 <__swbuf_r>

080047d8 <_realloc_r>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	4617      	mov	r7, r2
 80047de:	b083      	sub	sp, #12
 80047e0:	460e      	mov	r6, r1
 80047e2:	2900      	cmp	r1, #0
 80047e4:	f000 80e7 	beq.w	80049b6 <_realloc_r+0x1de>
 80047e8:	4681      	mov	r9, r0
 80047ea:	f107 050b 	add.w	r5, r7, #11
 80047ee:	f7ff ffc3 	bl	8004778 <__malloc_lock>
 80047f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80047f6:	2d16      	cmp	r5, #22
 80047f8:	f023 0403 	bic.w	r4, r3, #3
 80047fc:	f1a6 0808 	sub.w	r8, r6, #8
 8004800:	d84c      	bhi.n	800489c <_realloc_r+0xc4>
 8004802:	2210      	movs	r2, #16
 8004804:	4615      	mov	r5, r2
 8004806:	42af      	cmp	r7, r5
 8004808:	d84d      	bhi.n	80048a6 <_realloc_r+0xce>
 800480a:	4294      	cmp	r4, r2
 800480c:	f280 8084 	bge.w	8004918 <_realloc_r+0x140>
 8004810:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8004bc0 <_realloc_r+0x3e8>
 8004814:	f8db 0008 	ldr.w	r0, [fp, #8]
 8004818:	eb08 0104 	add.w	r1, r8, r4
 800481c:	4288      	cmp	r0, r1
 800481e:	f000 80d6 	beq.w	80049ce <_realloc_r+0x1f6>
 8004822:	6848      	ldr	r0, [r1, #4]
 8004824:	f020 0e01 	bic.w	lr, r0, #1
 8004828:	448e      	add	lr, r1
 800482a:	f8de e004 	ldr.w	lr, [lr, #4]
 800482e:	f01e 0f01 	tst.w	lr, #1
 8004832:	d13f      	bne.n	80048b4 <_realloc_r+0xdc>
 8004834:	f020 0003 	bic.w	r0, r0, #3
 8004838:	4420      	add	r0, r4
 800483a:	4290      	cmp	r0, r2
 800483c:	f280 80c1 	bge.w	80049c2 <_realloc_r+0x1ea>
 8004840:	07db      	lsls	r3, r3, #31
 8004842:	f100 808f 	bmi.w	8004964 <_realloc_r+0x18c>
 8004846:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800484a:	ebc3 0a08 	rsb	sl, r3, r8
 800484e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004852:	f023 0303 	bic.w	r3, r3, #3
 8004856:	eb00 0e03 	add.w	lr, r0, r3
 800485a:	4596      	cmp	lr, r2
 800485c:	db34      	blt.n	80048c8 <_realloc_r+0xf0>
 800485e:	68cb      	ldr	r3, [r1, #12]
 8004860:	688a      	ldr	r2, [r1, #8]
 8004862:	4657      	mov	r7, sl
 8004864:	60d3      	str	r3, [r2, #12]
 8004866:	609a      	str	r2, [r3, #8]
 8004868:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800486c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004870:	60cb      	str	r3, [r1, #12]
 8004872:	1f22      	subs	r2, r4, #4
 8004874:	2a24      	cmp	r2, #36	; 0x24
 8004876:	6099      	str	r1, [r3, #8]
 8004878:	f200 8136 	bhi.w	8004ae8 <_realloc_r+0x310>
 800487c:	2a13      	cmp	r2, #19
 800487e:	f240 80fd 	bls.w	8004a7c <_realloc_r+0x2a4>
 8004882:	6833      	ldr	r3, [r6, #0]
 8004884:	f8ca 3008 	str.w	r3, [sl, #8]
 8004888:	6873      	ldr	r3, [r6, #4]
 800488a:	f8ca 300c 	str.w	r3, [sl, #12]
 800488e:	2a1b      	cmp	r2, #27
 8004890:	f200 8140 	bhi.w	8004b14 <_realloc_r+0x33c>
 8004894:	3608      	adds	r6, #8
 8004896:	f10a 0310 	add.w	r3, sl, #16
 800489a:	e0f0      	b.n	8004a7e <_realloc_r+0x2a6>
 800489c:	f025 0507 	bic.w	r5, r5, #7
 80048a0:	2d00      	cmp	r5, #0
 80048a2:	462a      	mov	r2, r5
 80048a4:	daaf      	bge.n	8004806 <_realloc_r+0x2e>
 80048a6:	230c      	movs	r3, #12
 80048a8:	2000      	movs	r0, #0
 80048aa:	f8c9 3000 	str.w	r3, [r9]
 80048ae:	b003      	add	sp, #12
 80048b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b4:	07d9      	lsls	r1, r3, #31
 80048b6:	d455      	bmi.n	8004964 <_realloc_r+0x18c>
 80048b8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80048bc:	ebc3 0a08 	rsb	sl, r3, r8
 80048c0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80048c4:	f023 0303 	bic.w	r3, r3, #3
 80048c8:	4423      	add	r3, r4
 80048ca:	4293      	cmp	r3, r2
 80048cc:	db4a      	blt.n	8004964 <_realloc_r+0x18c>
 80048ce:	4657      	mov	r7, sl
 80048d0:	f8da 100c 	ldr.w	r1, [sl, #12]
 80048d4:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80048d8:	1f22      	subs	r2, r4, #4
 80048da:	2a24      	cmp	r2, #36	; 0x24
 80048dc:	60c1      	str	r1, [r0, #12]
 80048de:	6088      	str	r0, [r1, #8]
 80048e0:	f200 810e 	bhi.w	8004b00 <_realloc_r+0x328>
 80048e4:	2a13      	cmp	r2, #19
 80048e6:	f240 8109 	bls.w	8004afc <_realloc_r+0x324>
 80048ea:	6831      	ldr	r1, [r6, #0]
 80048ec:	f8ca 1008 	str.w	r1, [sl, #8]
 80048f0:	6871      	ldr	r1, [r6, #4]
 80048f2:	f8ca 100c 	str.w	r1, [sl, #12]
 80048f6:	2a1b      	cmp	r2, #27
 80048f8:	f200 8121 	bhi.w	8004b3e <_realloc_r+0x366>
 80048fc:	3608      	adds	r6, #8
 80048fe:	f10a 0210 	add.w	r2, sl, #16
 8004902:	6831      	ldr	r1, [r6, #0]
 8004904:	6011      	str	r1, [r2, #0]
 8004906:	6871      	ldr	r1, [r6, #4]
 8004908:	6051      	str	r1, [r2, #4]
 800490a:	68b1      	ldr	r1, [r6, #8]
 800490c:	6091      	str	r1, [r2, #8]
 800490e:	461c      	mov	r4, r3
 8004910:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004914:	463e      	mov	r6, r7
 8004916:	46d0      	mov	r8, sl
 8004918:	1b62      	subs	r2, r4, r5
 800491a:	2a0f      	cmp	r2, #15
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	d80e      	bhi.n	8004940 <_realloc_r+0x168>
 8004922:	4323      	orrs	r3, r4
 8004924:	4444      	add	r4, r8
 8004926:	f8c8 3004 	str.w	r3, [r8, #4]
 800492a:	6863      	ldr	r3, [r4, #4]
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6063      	str	r3, [r4, #4]
 8004932:	4648      	mov	r0, r9
 8004934:	f7ff ff22 	bl	800477c <__malloc_unlock>
 8004938:	4630      	mov	r0, r6
 800493a:	b003      	add	sp, #12
 800493c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004940:	eb08 0105 	add.w	r1, r8, r5
 8004944:	431d      	orrs	r5, r3
 8004946:	f042 0301 	orr.w	r3, r2, #1
 800494a:	440a      	add	r2, r1
 800494c:	f8c8 5004 	str.w	r5, [r8, #4]
 8004950:	604b      	str	r3, [r1, #4]
 8004952:	6853      	ldr	r3, [r2, #4]
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	3108      	adds	r1, #8
 800495a:	6053      	str	r3, [r2, #4]
 800495c:	4648      	mov	r0, r9
 800495e:	f7ff f935 	bl	8003bcc <_free_r>
 8004962:	e7e6      	b.n	8004932 <_realloc_r+0x15a>
 8004964:	4639      	mov	r1, r7
 8004966:	4648      	mov	r0, r9
 8004968:	f7ff fbc6 	bl	80040f8 <_malloc_r>
 800496c:	4607      	mov	r7, r0
 800496e:	b1d8      	cbz	r0, 80049a8 <_realloc_r+0x1d0>
 8004970:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004974:	f023 0201 	bic.w	r2, r3, #1
 8004978:	4442      	add	r2, r8
 800497a:	f1a0 0108 	sub.w	r1, r0, #8
 800497e:	4291      	cmp	r1, r2
 8004980:	f000 80ac 	beq.w	8004adc <_realloc_r+0x304>
 8004984:	1f22      	subs	r2, r4, #4
 8004986:	2a24      	cmp	r2, #36	; 0x24
 8004988:	f200 8099 	bhi.w	8004abe <_realloc_r+0x2e6>
 800498c:	2a13      	cmp	r2, #19
 800498e:	d86a      	bhi.n	8004a66 <_realloc_r+0x28e>
 8004990:	4603      	mov	r3, r0
 8004992:	4632      	mov	r2, r6
 8004994:	6811      	ldr	r1, [r2, #0]
 8004996:	6019      	str	r1, [r3, #0]
 8004998:	6851      	ldr	r1, [r2, #4]
 800499a:	6059      	str	r1, [r3, #4]
 800499c:	6892      	ldr	r2, [r2, #8]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	4631      	mov	r1, r6
 80049a2:	4648      	mov	r0, r9
 80049a4:	f7ff f912 	bl	8003bcc <_free_r>
 80049a8:	4648      	mov	r0, r9
 80049aa:	f7ff fee7 	bl	800477c <__malloc_unlock>
 80049ae:	4638      	mov	r0, r7
 80049b0:	b003      	add	sp, #12
 80049b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b6:	4611      	mov	r1, r2
 80049b8:	b003      	add	sp, #12
 80049ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049be:	f7ff bb9b 	b.w	80040f8 <_malloc_r>
 80049c2:	68ca      	ldr	r2, [r1, #12]
 80049c4:	6889      	ldr	r1, [r1, #8]
 80049c6:	4604      	mov	r4, r0
 80049c8:	60ca      	str	r2, [r1, #12]
 80049ca:	6091      	str	r1, [r2, #8]
 80049cc:	e7a4      	b.n	8004918 <_realloc_r+0x140>
 80049ce:	6841      	ldr	r1, [r0, #4]
 80049d0:	f021 0103 	bic.w	r1, r1, #3
 80049d4:	4421      	add	r1, r4
 80049d6:	f105 0010 	add.w	r0, r5, #16
 80049da:	4281      	cmp	r1, r0
 80049dc:	da5b      	bge.n	8004a96 <_realloc_r+0x2be>
 80049de:	07db      	lsls	r3, r3, #31
 80049e0:	d4c0      	bmi.n	8004964 <_realloc_r+0x18c>
 80049e2:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80049e6:	ebc3 0a08 	rsb	sl, r3, r8
 80049ea:	f8da 3004 	ldr.w	r3, [sl, #4]
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	eb01 0c03 	add.w	ip, r1, r3
 80049f6:	4560      	cmp	r0, ip
 80049f8:	f73f af66 	bgt.w	80048c8 <_realloc_r+0xf0>
 80049fc:	4657      	mov	r7, sl
 80049fe:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004a02:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8004a06:	1f22      	subs	r2, r4, #4
 8004a08:	2a24      	cmp	r2, #36	; 0x24
 8004a0a:	60cb      	str	r3, [r1, #12]
 8004a0c:	6099      	str	r1, [r3, #8]
 8004a0e:	f200 80b8 	bhi.w	8004b82 <_realloc_r+0x3aa>
 8004a12:	2a13      	cmp	r2, #19
 8004a14:	f240 80a9 	bls.w	8004b6a <_realloc_r+0x392>
 8004a18:	6833      	ldr	r3, [r6, #0]
 8004a1a:	f8ca 3008 	str.w	r3, [sl, #8]
 8004a1e:	6873      	ldr	r3, [r6, #4]
 8004a20:	f8ca 300c 	str.w	r3, [sl, #12]
 8004a24:	2a1b      	cmp	r2, #27
 8004a26:	f200 80b5 	bhi.w	8004b94 <_realloc_r+0x3bc>
 8004a2a:	3608      	adds	r6, #8
 8004a2c:	f10a 0310 	add.w	r3, sl, #16
 8004a30:	6832      	ldr	r2, [r6, #0]
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	6872      	ldr	r2, [r6, #4]
 8004a36:	605a      	str	r2, [r3, #4]
 8004a38:	68b2      	ldr	r2, [r6, #8]
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	eb0a 0205 	add.w	r2, sl, r5
 8004a40:	ebc5 030c 	rsb	r3, r5, ip
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	f8cb 2008 	str.w	r2, [fp, #8]
 8004a4c:	6053      	str	r3, [r2, #4]
 8004a4e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	431d      	orrs	r5, r3
 8004a58:	4648      	mov	r0, r9
 8004a5a:	f8ca 5004 	str.w	r5, [sl, #4]
 8004a5e:	f7ff fe8d 	bl	800477c <__malloc_unlock>
 8004a62:	4638      	mov	r0, r7
 8004a64:	e769      	b.n	800493a <_realloc_r+0x162>
 8004a66:	6833      	ldr	r3, [r6, #0]
 8004a68:	6003      	str	r3, [r0, #0]
 8004a6a:	6873      	ldr	r3, [r6, #4]
 8004a6c:	6043      	str	r3, [r0, #4]
 8004a6e:	2a1b      	cmp	r2, #27
 8004a70:	d829      	bhi.n	8004ac6 <_realloc_r+0x2ee>
 8004a72:	f100 0308 	add.w	r3, r0, #8
 8004a76:	f106 0208 	add.w	r2, r6, #8
 8004a7a:	e78b      	b.n	8004994 <_realloc_r+0x1bc>
 8004a7c:	463b      	mov	r3, r7
 8004a7e:	6832      	ldr	r2, [r6, #0]
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	6872      	ldr	r2, [r6, #4]
 8004a84:	605a      	str	r2, [r3, #4]
 8004a86:	68b2      	ldr	r2, [r6, #8]
 8004a88:	609a      	str	r2, [r3, #8]
 8004a8a:	463e      	mov	r6, r7
 8004a8c:	4674      	mov	r4, lr
 8004a8e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004a92:	46d0      	mov	r8, sl
 8004a94:	e740      	b.n	8004918 <_realloc_r+0x140>
 8004a96:	eb08 0205 	add.w	r2, r8, r5
 8004a9a:	1b4b      	subs	r3, r1, r5
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	f8cb 2008 	str.w	r2, [fp, #8]
 8004aa4:	6053      	str	r3, [r2, #4]
 8004aa6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	431d      	orrs	r5, r3
 8004ab0:	4648      	mov	r0, r9
 8004ab2:	f846 5c04 	str.w	r5, [r6, #-4]
 8004ab6:	f7ff fe61 	bl	800477c <__malloc_unlock>
 8004aba:	4630      	mov	r0, r6
 8004abc:	e73d      	b.n	800493a <_realloc_r+0x162>
 8004abe:	4631      	mov	r1, r6
 8004ac0:	f7ff fdf6 	bl	80046b0 <memmove>
 8004ac4:	e76c      	b.n	80049a0 <_realloc_r+0x1c8>
 8004ac6:	68b3      	ldr	r3, [r6, #8]
 8004ac8:	6083      	str	r3, [r0, #8]
 8004aca:	68f3      	ldr	r3, [r6, #12]
 8004acc:	60c3      	str	r3, [r0, #12]
 8004ace:	2a24      	cmp	r2, #36	; 0x24
 8004ad0:	d02c      	beq.n	8004b2c <_realloc_r+0x354>
 8004ad2:	f100 0310 	add.w	r3, r0, #16
 8004ad6:	f106 0210 	add.w	r2, r6, #16
 8004ada:	e75b      	b.n	8004994 <_realloc_r+0x1bc>
 8004adc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8004ae0:	f022 0203 	bic.w	r2, r2, #3
 8004ae4:	4414      	add	r4, r2
 8004ae6:	e717      	b.n	8004918 <_realloc_r+0x140>
 8004ae8:	4631      	mov	r1, r6
 8004aea:	4638      	mov	r0, r7
 8004aec:	4674      	mov	r4, lr
 8004aee:	463e      	mov	r6, r7
 8004af0:	f7ff fdde 	bl	80046b0 <memmove>
 8004af4:	46d0      	mov	r8, sl
 8004af6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004afa:	e70d      	b.n	8004918 <_realloc_r+0x140>
 8004afc:	463a      	mov	r2, r7
 8004afe:	e700      	b.n	8004902 <_realloc_r+0x12a>
 8004b00:	4631      	mov	r1, r6
 8004b02:	4638      	mov	r0, r7
 8004b04:	461c      	mov	r4, r3
 8004b06:	463e      	mov	r6, r7
 8004b08:	f7ff fdd2 	bl	80046b0 <memmove>
 8004b0c:	46d0      	mov	r8, sl
 8004b0e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004b12:	e701      	b.n	8004918 <_realloc_r+0x140>
 8004b14:	68b3      	ldr	r3, [r6, #8]
 8004b16:	f8ca 3010 	str.w	r3, [sl, #16]
 8004b1a:	68f3      	ldr	r3, [r6, #12]
 8004b1c:	f8ca 3014 	str.w	r3, [sl, #20]
 8004b20:	2a24      	cmp	r2, #36	; 0x24
 8004b22:	d018      	beq.n	8004b56 <_realloc_r+0x37e>
 8004b24:	3610      	adds	r6, #16
 8004b26:	f10a 0318 	add.w	r3, sl, #24
 8004b2a:	e7a8      	b.n	8004a7e <_realloc_r+0x2a6>
 8004b2c:	6933      	ldr	r3, [r6, #16]
 8004b2e:	6103      	str	r3, [r0, #16]
 8004b30:	6973      	ldr	r3, [r6, #20]
 8004b32:	6143      	str	r3, [r0, #20]
 8004b34:	f106 0218 	add.w	r2, r6, #24
 8004b38:	f100 0318 	add.w	r3, r0, #24
 8004b3c:	e72a      	b.n	8004994 <_realloc_r+0x1bc>
 8004b3e:	68b1      	ldr	r1, [r6, #8]
 8004b40:	f8ca 1010 	str.w	r1, [sl, #16]
 8004b44:	68f1      	ldr	r1, [r6, #12]
 8004b46:	f8ca 1014 	str.w	r1, [sl, #20]
 8004b4a:	2a24      	cmp	r2, #36	; 0x24
 8004b4c:	d00f      	beq.n	8004b6e <_realloc_r+0x396>
 8004b4e:	3610      	adds	r6, #16
 8004b50:	f10a 0218 	add.w	r2, sl, #24
 8004b54:	e6d5      	b.n	8004902 <_realloc_r+0x12a>
 8004b56:	6933      	ldr	r3, [r6, #16]
 8004b58:	f8ca 3018 	str.w	r3, [sl, #24]
 8004b5c:	6973      	ldr	r3, [r6, #20]
 8004b5e:	f8ca 301c 	str.w	r3, [sl, #28]
 8004b62:	3618      	adds	r6, #24
 8004b64:	f10a 0320 	add.w	r3, sl, #32
 8004b68:	e789      	b.n	8004a7e <_realloc_r+0x2a6>
 8004b6a:	463b      	mov	r3, r7
 8004b6c:	e760      	b.n	8004a30 <_realloc_r+0x258>
 8004b6e:	6932      	ldr	r2, [r6, #16]
 8004b70:	f8ca 2018 	str.w	r2, [sl, #24]
 8004b74:	6972      	ldr	r2, [r6, #20]
 8004b76:	f8ca 201c 	str.w	r2, [sl, #28]
 8004b7a:	3618      	adds	r6, #24
 8004b7c:	f10a 0220 	add.w	r2, sl, #32
 8004b80:	e6bf      	b.n	8004902 <_realloc_r+0x12a>
 8004b82:	4631      	mov	r1, r6
 8004b84:	4638      	mov	r0, r7
 8004b86:	f8cd c004 	str.w	ip, [sp, #4]
 8004b8a:	f7ff fd91 	bl	80046b0 <memmove>
 8004b8e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004b92:	e753      	b.n	8004a3c <_realloc_r+0x264>
 8004b94:	68b3      	ldr	r3, [r6, #8]
 8004b96:	f8ca 3010 	str.w	r3, [sl, #16]
 8004b9a:	68f3      	ldr	r3, [r6, #12]
 8004b9c:	f8ca 3014 	str.w	r3, [sl, #20]
 8004ba0:	2a24      	cmp	r2, #36	; 0x24
 8004ba2:	d003      	beq.n	8004bac <_realloc_r+0x3d4>
 8004ba4:	3610      	adds	r6, #16
 8004ba6:	f10a 0318 	add.w	r3, sl, #24
 8004baa:	e741      	b.n	8004a30 <_realloc_r+0x258>
 8004bac:	6933      	ldr	r3, [r6, #16]
 8004bae:	f8ca 3018 	str.w	r3, [sl, #24]
 8004bb2:	6973      	ldr	r3, [r6, #20]
 8004bb4:	f8ca 301c 	str.w	r3, [sl, #28]
 8004bb8:	3618      	adds	r6, #24
 8004bba:	f10a 0320 	add.w	r3, sl, #32
 8004bbe:	e737      	b.n	8004a30 <_realloc_r+0x258>
 8004bc0:	2000044c 	.word	0x2000044c

08004bc4 <__sread>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bcc:	f7fb ff20 	bl	8000a10 <_read_r>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	db03      	blt.n	8004bdc <__sread+0x18>
 8004bd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004bd6:	4403      	add	r3, r0
 8004bd8:	6523      	str	r3, [r4, #80]	; 0x50
 8004bda:	bd10      	pop	{r4, pc}
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	bd10      	pop	{r4, pc}
 8004be6:	bf00      	nop

08004be8 <__swrite>:
 8004be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bec:	4616      	mov	r6, r2
 8004bee:	898a      	ldrh	r2, [r1, #12]
 8004bf0:	461d      	mov	r5, r3
 8004bf2:	05d3      	lsls	r3, r2, #23
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	4607      	mov	r7, r0
 8004bf8:	d506      	bpl.n	8004c08 <__swrite+0x20>
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c00:	2302      	movs	r3, #2
 8004c02:	f7fb feb3 	bl	800096c <_lseek_r>
 8004c06:	89a2      	ldrh	r2, [r4, #12]
 8004c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c10:	81a2      	strh	r2, [r4, #12]
 8004c12:	4638      	mov	r0, r7
 8004c14:	4632      	mov	r2, r6
 8004c16:	462b      	mov	r3, r5
 8004c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1c:	f7fb bf72 	b.w	8000b04 <_write_r>

08004c20 <__sseek>:
 8004c20:	b510      	push	{r4, lr}
 8004c22:	460c      	mov	r4, r1
 8004c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c28:	f7fb fea0 	bl	800096c <_lseek_r>
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	1c42      	adds	r2, r0, #1
 8004c30:	bf0e      	itee	eq
 8004c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c3a:	6520      	strne	r0, [r4, #80]	; 0x50
 8004c3c:	81a3      	strh	r3, [r4, #12]
 8004c3e:	bd10      	pop	{r4, pc}

08004c40 <__sclose>:
 8004c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c44:	f7fb be88 	b.w	8000958 <_close_r>

08004c48 <__swbuf_r>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	460d      	mov	r5, r1
 8004c4c:	4614      	mov	r4, r2
 8004c4e:	4606      	mov	r6, r0
 8004c50:	b110      	cbz	r0, 8004c58 <__swbuf_r+0x10>
 8004c52:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d048      	beq.n	8004cea <__swbuf_r+0xa2>
 8004c58:	89a2      	ldrh	r2, [r4, #12]
 8004c5a:	69a3      	ldr	r3, [r4, #24]
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	b291      	uxth	r1, r2
 8004c60:	0708      	lsls	r0, r1, #28
 8004c62:	d538      	bpl.n	8004cd6 <__swbuf_r+0x8e>
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d035      	beq.n	8004cd6 <__swbuf_r+0x8e>
 8004c6a:	0489      	lsls	r1, r1, #18
 8004c6c:	b2ed      	uxtb	r5, r5
 8004c6e:	d515      	bpl.n	8004c9c <__swbuf_r+0x54>
 8004c70:	6822      	ldr	r2, [r4, #0]
 8004c72:	6961      	ldr	r1, [r4, #20]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	428b      	cmp	r3, r1
 8004c78:	da1c      	bge.n	8004cb4 <__swbuf_r+0x6c>
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	68a1      	ldr	r1, [r4, #8]
 8004c7e:	1c50      	adds	r0, r2, #1
 8004c80:	3901      	subs	r1, #1
 8004c82:	60a1      	str	r1, [r4, #8]
 8004c84:	6020      	str	r0, [r4, #0]
 8004c86:	7015      	strb	r5, [r2, #0]
 8004c88:	6962      	ldr	r2, [r4, #20]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d01a      	beq.n	8004cc4 <__swbuf_r+0x7c>
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	07db      	lsls	r3, r3, #31
 8004c92:	d501      	bpl.n	8004c98 <__swbuf_r+0x50>
 8004c94:	2d0a      	cmp	r5, #10
 8004c96:	d015      	beq.n	8004cc4 <__swbuf_r+0x7c>
 8004c98:	4628      	mov	r0, r5
 8004c9a:	bd70      	pop	{r4, r5, r6, pc}
 8004c9c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004c9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ca2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8004ca6:	81a2      	strh	r2, [r4, #12]
 8004ca8:	6822      	ldr	r2, [r4, #0]
 8004caa:	6661      	str	r1, [r4, #100]	; 0x64
 8004cac:	6961      	ldr	r1, [r4, #20]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	dbe2      	blt.n	8004c7a <__swbuf_r+0x32>
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	f7fe fe9c 	bl	80039f4 <_fflush_r>
 8004cbc:	b940      	cbnz	r0, 8004cd0 <__swbuf_r+0x88>
 8004cbe:	6822      	ldr	r2, [r4, #0]
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e7db      	b.n	8004c7c <__swbuf_r+0x34>
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	f7fe fe94 	bl	80039f4 <_fflush_r>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d0e3      	beq.n	8004c98 <__swbuf_r+0x50>
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	4621      	mov	r1, r4
 8004cda:	f000 f809 	bl	8004cf0 <__swsetup_r>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d1f6      	bne.n	8004cd0 <__swbuf_r+0x88>
 8004ce2:	89a2      	ldrh	r2, [r4, #12]
 8004ce4:	6923      	ldr	r3, [r4, #16]
 8004ce6:	b291      	uxth	r1, r2
 8004ce8:	e7bf      	b.n	8004c6a <__swbuf_r+0x22>
 8004cea:	f7fe ff17 	bl	8003b1c <__sinit>
 8004cee:	e7b3      	b.n	8004c58 <__swbuf_r+0x10>

08004cf0 <__swsetup_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4b2f      	ldr	r3, [pc, #188]	; (8004db0 <__swsetup_r+0xc0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4605      	mov	r5, r0
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	b113      	cbz	r3, 8004d02 <__swsetup_r+0x12>
 8004cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cfe:	2a00      	cmp	r2, #0
 8004d00:	d036      	beq.n	8004d70 <__swsetup_r+0x80>
 8004d02:	89a2      	ldrh	r2, [r4, #12]
 8004d04:	b293      	uxth	r3, r2
 8004d06:	0718      	lsls	r0, r3, #28
 8004d08:	d50c      	bpl.n	8004d24 <__swsetup_r+0x34>
 8004d0a:	6920      	ldr	r0, [r4, #16]
 8004d0c:	b1a8      	cbz	r0, 8004d3a <__swsetup_r+0x4a>
 8004d0e:	f013 0201 	ands.w	r2, r3, #1
 8004d12:	d01e      	beq.n	8004d52 <__swsetup_r+0x62>
 8004d14:	6963      	ldr	r3, [r4, #20]
 8004d16:	2200      	movs	r2, #0
 8004d18:	425b      	negs	r3, r3
 8004d1a:	61a3      	str	r3, [r4, #24]
 8004d1c:	60a2      	str	r2, [r4, #8]
 8004d1e:	b1f0      	cbz	r0, 8004d5e <__swsetup_r+0x6e>
 8004d20:	2000      	movs	r0, #0
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	06d9      	lsls	r1, r3, #27
 8004d26:	d53b      	bpl.n	8004da0 <__swsetup_r+0xb0>
 8004d28:	0758      	lsls	r0, r3, #29
 8004d2a:	d425      	bmi.n	8004d78 <__swsetup_r+0x88>
 8004d2c:	6920      	ldr	r0, [r4, #16]
 8004d2e:	f042 0308 	orr.w	r3, r2, #8
 8004d32:	81a3      	strh	r3, [r4, #12]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d1e9      	bne.n	8004d0e <__swsetup_r+0x1e>
 8004d3a:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8004d3e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004d42:	d0e4      	beq.n	8004d0e <__swsetup_r+0x1e>
 8004d44:	4628      	mov	r0, r5
 8004d46:	4621      	mov	r1, r4
 8004d48:	f000 f876 	bl	8004e38 <__smakebuf_r>
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	6920      	ldr	r0, [r4, #16]
 8004d50:	e7dd      	b.n	8004d0e <__swsetup_r+0x1e>
 8004d52:	0799      	lsls	r1, r3, #30
 8004d54:	bf58      	it	pl
 8004d56:	6962      	ldrpl	r2, [r4, #20]
 8004d58:	60a2      	str	r2, [r4, #8]
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	d1e0      	bne.n	8004d20 <__swsetup_r+0x30>
 8004d5e:	89a3      	ldrh	r3, [r4, #12]
 8004d60:	061a      	lsls	r2, r3, #24
 8004d62:	d5de      	bpl.n	8004d22 <__swsetup_r+0x32>
 8004d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe fed3 	bl	8003b1c <__sinit>
 8004d76:	e7c4      	b.n	8004d02 <__swsetup_r+0x12>
 8004d78:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d7a:	b149      	cbz	r1, 8004d90 <__swsetup_r+0xa0>
 8004d7c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8004d80:	4299      	cmp	r1, r3
 8004d82:	d003      	beq.n	8004d8c <__swsetup_r+0x9c>
 8004d84:	4628      	mov	r0, r5
 8004d86:	f7fe ff21 	bl	8003bcc <_free_r>
 8004d8a:	89a2      	ldrh	r2, [r4, #12]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	6323      	str	r3, [r4, #48]	; 0x30
 8004d90:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8004d94:	2300      	movs	r3, #0
 8004d96:	6920      	ldr	r0, [r4, #16]
 8004d98:	6063      	str	r3, [r4, #4]
 8004d9a:	b292      	uxth	r2, r2
 8004d9c:	6020      	str	r0, [r4, #0]
 8004d9e:	e7c6      	b.n	8004d2e <__swsetup_r+0x3e>
 8004da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da4:	2309      	movs	r3, #9
 8004da6:	602b      	str	r3, [r5, #0]
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dac:	81a2      	strh	r2, [r4, #12]
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	20000448 	.word	0x20000448

08004db4 <_fclose_r>:
 8004db4:	2900      	cmp	r1, #0
 8004db6:	d03d      	beq.n	8004e34 <_fclose_r+0x80>
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	4605      	mov	r5, r0
 8004dbc:	460c      	mov	r4, r1
 8004dbe:	b108      	cbz	r0, 8004dc4 <_fclose_r+0x10>
 8004dc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004dc2:	b37b      	cbz	r3, 8004e24 <_fclose_r+0x70>
 8004dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dc8:	b90b      	cbnz	r3, 8004dce <_fclose_r+0x1a>
 8004dca:	2000      	movs	r0, #0
 8004dcc:	bd70      	pop	{r4, r5, r6, pc}
 8004dce:	4628      	mov	r0, r5
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	f7fe fd65 	bl	80038a0 <__sflush_r>
 8004dd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004dd8:	4606      	mov	r6, r0
 8004dda:	b133      	cbz	r3, 8004dea <_fclose_r+0x36>
 8004ddc:	4628      	mov	r0, r5
 8004dde:	69e1      	ldr	r1, [r4, #28]
 8004de0:	4798      	blx	r3
 8004de2:	2800      	cmp	r0, #0
 8004de4:	bfb8      	it	lt
 8004de6:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	061b      	lsls	r3, r3, #24
 8004dee:	d41c      	bmi.n	8004e2a <_fclose_r+0x76>
 8004df0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004df2:	b141      	cbz	r1, 8004e06 <_fclose_r+0x52>
 8004df4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8004df8:	4299      	cmp	r1, r3
 8004dfa:	d002      	beq.n	8004e02 <_fclose_r+0x4e>
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f7fe fee5 	bl	8003bcc <_free_r>
 8004e02:	2300      	movs	r3, #0
 8004e04:	6323      	str	r3, [r4, #48]	; 0x30
 8004e06:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004e08:	b121      	cbz	r1, 8004e14 <_fclose_r+0x60>
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f7fe fede 	bl	8003bcc <_free_r>
 8004e10:	2300      	movs	r3, #0
 8004e12:	6463      	str	r3, [r4, #68]	; 0x44
 8004e14:	f7fe fe88 	bl	8003b28 <__sfp_lock_acquire>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	f7fe fe86 	bl	8003b2c <__sfp_lock_release>
 8004e20:	4630      	mov	r0, r6
 8004e22:	bd70      	pop	{r4, r5, r6, pc}
 8004e24:	f7fe fe7a 	bl	8003b1c <__sinit>
 8004e28:	e7cc      	b.n	8004dc4 <_fclose_r+0x10>
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	6921      	ldr	r1, [r4, #16]
 8004e2e:	f7fe fecd 	bl	8003bcc <_free_r>
 8004e32:	e7dd      	b.n	8004df0 <_fclose_r+0x3c>
 8004e34:	2000      	movs	r0, #0
 8004e36:	4770      	bx	lr

08004e38 <__smakebuf_r>:
 8004e38:	898b      	ldrh	r3, [r1, #12]
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	f012 0f02 	tst.w	r2, #2
 8004e40:	d13c      	bne.n	8004ebc <__smakebuf_r+0x84>
 8004e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e44:	460c      	mov	r4, r1
 8004e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e4a:	2900      	cmp	r1, #0
 8004e4c:	b091      	sub	sp, #68	; 0x44
 8004e4e:	4605      	mov	r5, r0
 8004e50:	db19      	blt.n	8004e86 <__smakebuf_r+0x4e>
 8004e52:	aa01      	add	r2, sp, #4
 8004e54:	f7fb fd83 	bl	800095e <_fstat_r>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	db12      	blt.n	8004e82 <__smakebuf_r+0x4a>
 8004e5c:	9b02      	ldr	r3, [sp, #8]
 8004e5e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e66:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8004e6a:	fab7 f787 	clz	r7, r7
 8004e6e:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8004e72:	d02a      	beq.n	8004eca <__smakebuf_r+0x92>
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e7a:	81a3      	strh	r3, [r4, #12]
 8004e7c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004e80:	e00b      	b.n	8004e9a <__smakebuf_r+0x62>
 8004e82:	89a3      	ldrh	r3, [r4, #12]
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004e8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e8e:	81a3      	strh	r3, [r4, #12]
 8004e90:	bf0c      	ite	eq
 8004e92:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8004e96:	2640      	movne	r6, #64	; 0x40
 8004e98:	2700      	movs	r7, #0
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	f7ff f92b 	bl	80040f8 <_malloc_r>
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	b340      	cbz	r0, 8004ef8 <__smakebuf_r+0xc0>
 8004ea6:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <__smakebuf_r+0xd8>)
 8004ea8:	63ea      	str	r2, [r5, #60]	; 0x3c
 8004eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eae:	81a3      	strh	r3, [r4, #12]
 8004eb0:	6020      	str	r0, [r4, #0]
 8004eb2:	6120      	str	r0, [r4, #16]
 8004eb4:	6166      	str	r6, [r4, #20]
 8004eb6:	b99f      	cbnz	r7, 8004ee0 <__smakebuf_r+0xa8>
 8004eb8:	b011      	add	sp, #68	; 0x44
 8004eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ebc:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	600b      	str	r3, [r1, #0]
 8004ec4:	610b      	str	r3, [r1, #16]
 8004ec6:	614a      	str	r2, [r1, #20]
 8004ec8:	4770      	bx	lr
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <__smakebuf_r+0xdc>)
 8004ecc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d1d0      	bne.n	8004e74 <__smakebuf_r+0x3c>
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004ed8:	4333      	orrs	r3, r6
 8004eda:	81a3      	strh	r3, [r4, #12]
 8004edc:	64e6      	str	r6, [r4, #76]	; 0x4c
 8004ede:	e7dc      	b.n	8004e9a <__smakebuf_r+0x62>
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ee6:	f7fb fd3f 	bl	8000968 <_isatty_r>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	d0e4      	beq.n	8004eb8 <__smakebuf_r+0x80>
 8004eee:	89a3      	ldrh	r3, [r4, #12]
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	81a3      	strh	r3, [r4, #12]
 8004ef6:	e7df      	b.n	8004eb8 <__smakebuf_r+0x80>
 8004ef8:	059a      	lsls	r2, r3, #22
 8004efa:	d4dd      	bmi.n	8004eb8 <__smakebuf_r+0x80>
 8004efc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f00:	f043 0302 	orr.w	r3, r3, #2
 8004f04:	2101      	movs	r1, #1
 8004f06:	81a3      	strh	r3, [r4, #12]
 8004f08:	6022      	str	r2, [r4, #0]
 8004f0a:	6122      	str	r2, [r4, #16]
 8004f0c:	6161      	str	r1, [r4, #20]
 8004f0e:	e7d3      	b.n	8004eb8 <__smakebuf_r+0x80>
 8004f10:	08003a21 	.word	0x08003a21
 8004f14:	08004c21 	.word	0x08004c21

08004f18 <_init>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	bf00      	nop
 8004f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1e:	bc08      	pop	{r3}
 8004f20:	469e      	mov	lr, r3
 8004f22:	4770      	bx	lr

08004f24 <_fini>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr
